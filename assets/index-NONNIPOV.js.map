{"version":3,"file":"index-NONNIPOV.js","sources":["../../src/Tools/TiltController.ts","../../src/Components/Button3D/index.tsx"],"sourcesContent":["import type { CSSProperties, MouseEvent, TouchEvent } from \"react\";\n\nexport class TiltController<T extends HTMLElement = HTMLElement> {\n  private top = 0;\n  private left = 0;\n  private width = 0;\n  private height = 0;\n  constructor(private setAnimationFrame: ISetAnimationFrame) {}\n\n  private cacheTargetData(eventTarget: EventTarget) {\n    const target = eventTarget as T;\n    const { top, left, height, width } = target.getBoundingClientRect();\n    this.top = top;\n    this.height = height;\n    const offset = width * 0.2;\n    this.left = left - offset / 2;\n    this.width = width + width * 0.2;\n  }\n\n  private getRotations(x: number, y: number): [x: number, y: number] {\n    const mouseY = y - this.top;\n    const mouseX = x - this.left;\n    const offsetX = 0.5 - mouseX / this.width;\n    const offsetY = 0.5 - mouseY / this.height;\n    return [offsetY * 50, offsetX * 20];\n  }\n\n  private setFrame([x, y]: Coordinate, duration: number) {\n    this.setAnimatedProperties({\n      rotX: x,\n      rotY: y,\n      transition: `${duration}s`,\n      scale: 1.1,\n      boxShadow: `0 ${x}px ${\n        this.height / 5\n      }px rgba(0,0,0,0.5), ${x}px ${y}px ${this.width / 5}px rgba(0,0,0,0.45)`,\n    });\n  }\n\n  private mouseEnter = (e: MouseEvent<T> | TouchEvent<T>) => {\n    this.cacheTargetData(e.currentTarget);\n    this.setFrame(this.getRotations(...this.getCoordinates(e)), 0.5);\n  };\n\n  private mouseMove = (e: MouseEvent<T> | TouchEvent<T>) => {\n    this.setFrame(this.getRotations(...this.getCoordinates(e)), 0);\n  };\n\n  private mouseLeave = () => {\n    this.setAnimatedProperties({\n      rotX: 0,\n      rotY: 0,\n      scale: 1,\n      transition: \"0.5s\",\n      boxShadow: \"none\",\n    });\n  };\n\n  private getCoordinates(\n    e: MouseEvent<T> | TouchEvent<T>,\n  ): [clientX: number, clientY: number] {\n    if (\"touches\" in e) {\n      return [e.touches[0].clientX, e.touches[0].clientY];\n    }\n    return [e.clientX, e.clientY];\n  }\n\n  private setAnimatedProperties(frame: IAnimationFrame) {\n    this.setAnimationFrame({\n      transform: `rotateX(${frame.rotX}deg) rotateY(${frame.rotY}deg) skew(-10deg) scale(${frame.scale})`,\n      transitionDuration: `${frame.transition}`,\n      boxShadow: frame.boxShadow,\n    });\n  }\n\n  public readonly events = {\n    onMouseMove: this.mouseMove,\n    onTouchEnd: this.mouseLeave,\n    onTouchMove: this.mouseMove,\n    onTouchStart: this.mouseEnter,\n    onMouseEnter: this.mouseEnter,\n    onMouseLeave: this.mouseLeave,\n  };\n}\n\nexport type Coordinate = [x: number, y: number];\n\nexport interface IAnimationFrame {\n  rotX: number;\n  rotY: number;\n  transition: number | string;\n  scale: number;\n  boxShadow: string;\n}\n\nexport type ISetAnimationFrame = (frame: CSSProperties) => void;\n","import { CSSProperties, memo, MouseEvent, useState } from \"react\";\nimport { useController } from \"Hooks/useController\";\nimport { TiltController } from \"Tools/TiltController\";\nimport \"./styles.scss\";\n\nexport const Button3D = memo(function Button3D({ text, onClick }: Props) {\n  const [frame, setFrame] = useState<CSSProperties>();\n  const controller = useController(new TiltController(setFrame));\n  return (\n    <button\n      onClick={onClick}\n      {...controller.events}\n      className=\"outline-button\"\n      style={frame}>\n      <div>{text}</div>\n    </button>\n  );\n});\n\nexport interface Props {\n  text: string;\n  onClick: (e: MouseEvent<HTMLButtonElement>) => void;\n}\n"],"names":["TiltController","constructor","setAnimationFrame","__publicField","this","e","cacheTargetData","currentTarget","setFrame","getRotations","getCoordinates","setAnimatedProperties","rotX","rotY","scale","transition","boxShadow","onMouseMove","mouseMove","onTouchEnd","mouseLeave","onTouchMove","onTouchStart","mouseEnter","onMouseEnter","onMouseLeave","eventTarget","target","top","left","height","width","getBoundingClientRect","offset","x","y","mouseY","offsetX","duration","touches","clientX","clientY","frame","transform","transitionDuration","Button3D","memo","text","onClick","useState","controller","useController","jsxRuntimeExports","jsx","__spreadValues","events","className","style","children"],"mappings":"kaAEO,MAAMA,EAKX,WAAAC,CAAoBC,GAJNC,EAAAC,KAAA,MAAA,GACCD,EAAAC,KAAA,OAAA,GACCD,EAAAC,KAAA,QAAA,GACCD,EAAAC,KAAA,SAAA,GAiCTD,EAAAC,KAAA,cAAcC,IACfD,KAAAE,gBAAgBD,EAAEE,eAClBH,KAAAI,SAASJ,KAAKK,gBAAgBL,KAAKM,eAAeL,IAAK,GAAG,IAGzDF,EAAAC,KAAA,aAAaC,IACdD,KAAAI,SAASJ,KAAKK,gBAAgBL,KAAKM,eAAeL,IAAK,EAAC,IAGvDF,EAAAC,KAAA,cAAa,KACnBA,KAAKO,sBAAsB,CACzBC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,WAAY,OACZC,UAAW,QACZ,IAoBsBb,EAAAC,KAAA,SAAA,CACvBa,YAAab,KAAKc,UAClBC,WAAYf,KAAKgB,WACjBC,YAAajB,KAAKc,UAClBI,aAAclB,KAAKmB,WACnBC,aAAcpB,KAAKmB,WACnBE,aAAcrB,KAAKgB,aA1EDhB,KAAAF,kBAAAA,CAAwC,CAEpD,eAAAI,CAAgBoB,GACtB,MAAMC,EAASD,GACTE,IAAEA,EAAKC,KAAAA,EAAAC,OAAMA,QAAQC,GAAUJ,EAAOK,wBAC5C5B,KAAKwB,IAAMA,EACXxB,KAAK0B,OAASA,EACd,MAAMG,EAAiB,GAARF,EACV3B,KAAAyB,KAAOA,EAAOI,EAAS,EACvB7B,KAAA2B,MAAQA,EAAgB,GAARA,CACvB,CAEQ,YAAAtB,CAAayB,EAAWC,GACxB,MAAAC,EAASD,EAAI/B,KAAKwB,IAElBS,EAAU,IADDH,EAAI9B,KAAKyB,MACOzB,KAAK2B,MAEpC,MAAO,CAAW,IADF,GAAMK,EAAShC,KAAK0B,QACJ,GAAVO,EACxB,CAEQ,QAAA7B,EAAU0B,EAAGC,GAAgBG,GACnClC,KAAKO,sBAAsB,CACzBC,KAAMsB,EACNrB,KAAMsB,EACNpB,WAAY,GAAGuB,KACfxB,MAAO,IACPE,UAAW,KAAKkB,OACd9B,KAAK0B,OAAS,wBACOI,OAAOC,OAAO/B,KAAK2B,MAAQ,wBAEtD,CAqBQ,cAAArB,CACNL,GAEA,MAAI,YAAaA,EACR,CAACA,EAAEkC,QAAQ,GAAGC,QAASnC,EAAEkC,QAAQ,GAAGE,SAEtC,CAACpC,EAAEmC,QAASnC,EAAEoC,QACvB,CAEQ,qBAAA9B,CAAsB+B,GAC5BtC,KAAKF,kBAAkB,CACrByC,UAAW,WAAWD,EAAM9B,oBAAoB8B,EAAM7B,+BAA+B6B,EAAM5B,SAC3F8B,mBAAoB,GAAGF,EAAM3B,aAC7BC,UAAW0B,EAAM1B,WAErB,ECpEK,MAAM6B,EAAWC,EAAKA,MAAA,UAAkBC,KAAEA,EAAAC,QAAMA,IACrD,MAAON,EAAOlC,GAAYyC,EAAwBA,WAC5CC,EAAaC,EAAc,IAAInD,EAAeQ,IAElD,OAAA4C,EAAAC,IAAC,+HAAAC,CAAA,CACCN,WACIE,EAAWK,cAFhB,CAGCC,UAAU,iBACVC,MAAOf,EACPgB,SAAAL,EAAAA,IAAC,OAAKK,SAAKX,cAGjB"}