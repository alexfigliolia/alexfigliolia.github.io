{"version":3,"file":"index-fmw2i_Cv.js","sources":["../../src/Components/ContactText/index.tsx","../../src/Pages/Contact/ContactButton/index.tsx","../../src/Pages/Contact/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\nexport class ContactText extends Component {\n  static contact = \"CONTACT\".split(\"\");\n\n  override shouldComponentUpdate() {\n    return false;\n  }\n\n  override render() {\n    return (\n      <div className=\"contact-text\">\n        <h1 id=\"contactText\">\n          {ContactText.contact.map((letter, i) => {\n            return (\n              <div className=\"text-letter\" key={`${letter}-${i}`}>\n                {letter}\n              </div>\n            );\n          })}\n        </h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button3D } from \"Components/Button3D\";\nimport type { IRouting } from \"Models/types\";\nimport { connectRouter } from \"State/Routing\";\nimport { TaskQueue } from \"Tools/TaskQueue\";\nimport \"./styles.scss\";\n\nexport class ContactButtonRenderer extends Component<Props, State> {\n  state: State = { reset: false };\n\n  override UNSAFE_componentWillReceiveProps({ active }: Props) {\n    if (!this.props.active && active) {\n      TaskQueue.deferTask(() => {\n        this.setState({ reset: true });\n      }, 3100);\n    }\n  }\n\n  override shouldComponentUpdate({ active }: Props, { reset }: State) {\n    if (active !== this.props.active) return true;\n    if (reset !== this.state.reset) return true;\n    return false;\n  }\n\n  override render() {\n    const { reset } = this.state;\n    const { text, onClick, active } = this.props;\n    return (\n      <div\n        className={`contact-button ${active ? \" active\" : \"\"} ${\n          reset ? \"reset\" : \"\"\n        }`}>\n        <Button3D text={text} onClick={onClick} />\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  text: string;\n  active: boolean;\n  onClick: () => void;\n}\n\ninterface State {\n  reset: boolean;\n}\n\nconst mSTP = ({ screenActive }: IRouting) => {\n  return { active: screenActive };\n};\n\nexport const ContactButton = connectRouter(mSTP)(ContactButtonRenderer);\n","import React, { Component } from \"react\";\nimport { Page } from \"Components/Page\";\nimport { ContactText } from \"Components/ContactText\";\nimport { ContactButton } from \"./ContactButton\";\nimport { Menu } from \"State/Menu\";\nimport \"./styles.scss\";\n\nexport default class Contact extends Component<Props> {\n  toNPM: () => void;\n  toGithub: () => void;\n  constructor(props: Props) {\n    super(props);\n    Menu.setButtonDelay(3500);\n    this.emailMe = this.emailMe.bind(this);\n    this.toGithub = this.openLink(\"https://github.com/alexfigliolia\");\n    this.toNPM = this.openLink(\"https://www.npmjs.com/~alexfigliolia\");\n  }\n\n  override shouldComponentUpdate() {\n    return false;\n  }\n\n  private openLink(link: string) {\n    return () => {\n      window.open(link, \"_blank\");\n    };\n  }\n\n  private emailMe() {\n    window.location.href =\n      \"mailto:alexfigliolia@gmail.com?subject=Hey%20Alex,%20let's%20chat!\";\n  }\n\n  override render() {\n    return (\n      <Page name=\"contact\">\n        <div>\n          <ContactText />\n          <div className=\"buttons\">\n            <ContactButton text=\"Email\" onClick={this.emailMe} />\n            <ContactButton text=\"Github\" onClick={this.toGithub} />\n            <ContactButton text=\"NPM\" onClick={this.toNPM} />\n          </div>\n        </div>\n      </Page>\n    );\n  }\n}\n\ntype Props = Record<string, never>;\n"],"names":["_ContactText","Component","shouldComponentUpdate","render","jsx","className","children","id","contact","map","letter","i","jsxRuntimeExports","__publicField","split","ContactText","ContactButtonRenderer","constructor","super","arguments","this","reset","UNSAFE_componentWillReceiveProps","active","props","TaskQueue","deferTask","setState","state","text","onClick","Button3D","ContactButton","connectRouter","screenActive","Contact","Menu","setButtonDelay","emailMe","bind","toGithub","openLink","toNPM","link","window","open","location","href","Page","name","jsxs"],"mappings":"mRAGO,MAAMA,EAAN,MAAMA,UAAoBC,EAAAA,UAGtB,qBAAAC,GACA,OAAA,CACT,CAES,MAAAC,GACP,SACGC,IAAA,MAAA,CAAIC,UAAU,eACbC,SAACF,EAAAA,IAAA,KAAA,CAAGG,GAAG,cACJD,SAAYN,EAAAQ,QAAQC,KAAI,CAACC,EAAQC,IAE9BC,EAAAR,IAAC,OAAIC,UAAU,cACZC,YAD+B,GAAGI,KAAUC,UAQ3D,GApBAE,EADWb,EACJ,UAAU,UAAUc,MAAM,KAD5B,IAAMC,EAANf,ECIA,MAAMgB,UAA8Bf,EAAAA,UAApC,WAAAgB,GAAAC,SAAAC,WACUN,EAAAO,KAAA,QAAA,CAAEC,OAAO,IAEf,gCAAAC,EAAiCC,OAAEA,KACrCH,KAAKI,MAAMD,QAAUA,GACxBE,EAAUC,WAAU,KAClBN,KAAKO,SAAS,CAAEN,OAAO,GAAM,GAC5B,KAEP,CAES,qBAAAnB,EAAsBqB,OAAEA,IAAiBF,MAAEA,IAC9C,OAAAE,IAAWH,KAAKI,MAAMD,QACtBF,IAAUD,KAAKQ,MAAMP,KAE3B,CAES,MAAAlB,GACD,MAAAkB,MAAEA,GAAUD,KAAKQ,OACjBC,KAAEA,EAAAC,QAAMA,EAASP,OAAAA,GAAWH,KAAKI,MAErC,OAAAZ,EAAAR,IAAC,MAAA,CACCC,UAAW,kBAAkBkB,EAAS,UAAY,MAChDF,EAAQ,QAAU,KAEpBf,SAAAF,EAAAA,IAAC2B,EAAS,CAAAF,OAAYC,aAG5B,EAaF,MAIaE,EAAgBC,GAJhB,EAAGC,mBACP,CAAEX,OAAQW,KAGUD,CAAoBjB,GC7CjD,MAAqBmB,UAAgBlC,EAAAA,UAGnC,WAAAgB,CAAYO,GACVN,MAAMM,GAHRX,EAAAO,KAAA,SACAP,EAAAO,KAAA,YAGEgB,EAAKC,eAAe,MACpBjB,KAAKkB,QAAUlB,KAAKkB,QAAQC,KAAKnB,MAC5BA,KAAAoB,SAAWpB,KAAKqB,SAAS,oCACzBrB,KAAAsB,MAAQtB,KAAKqB,SAAS,uCAC7B,CAES,qBAAAvC,GACA,OAAA,CACT,CAEQ,QAAAuC,CAASE,GACf,MAAO,KACEC,OAAAC,KAAKF,EAAM,SAAQ,CAE9B,CAEQ,OAAAL,GACNM,OAAOE,SAASC,KACd,oEACJ,CAES,MAAA5C,GAEJC,OAAAA,EAAAA,IAAA4C,EAAA,CAAKC,KAAK,UACT3C,gBAAC,MACC,CAAAA,SAAA,CAAAM,EAAAR,IAACW,EAAY,MACbmC,KAAC,MAAI,CAAA7C,UAAU,UACbC,SAAA,CAAAF,EAAAA,IAAC4B,EAAc,CAAAH,KAAK,QAAQC,QAASV,KAAKkB,gBACzCN,EAAc,CAAAH,KAAK,SAASC,QAASV,KAAKoB,iBAC1CR,EAAc,CAAAH,KAAK,MAAMC,QAASV,KAAKsB,eAKlD"}