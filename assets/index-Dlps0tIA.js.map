{"version":3,"mappings":"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","names":["MiddlewareEvents","Priority","AutoIncrementingID","constructor","__publicField","this","get","incrementor","last","reset","Subscriptable","Map","register","callback","ID","IDs","storage","set","remove","delete","execute","params","listener","executeBlocking","__async","executeConcurrent","tasks","push","Promise","all","length","size","Symbol","iterator","_","EventEmitter","on","event","subscriptable","off","removed","emit","payload","emitBlocking","emitConcurrent","Scheduler","executeTasks","bind","scheduleTask","task","priority","IMMEDIATE","MICROTASK","resolve","then","BATCHED","schedule","createSchedule","clearSchedule","setTimeout","clearTimeout","_a","call","State","name","initialState","mutation","func","state","clone","getState","args","lifeCycleEvent","onBeforeUpdate","returnValue","v","scheduleUpdate","onUpdate","emitter","registerMiddleware","middleware","subscribe","unsubscribe","clearAllSubscriptions","clear","i","String","BigInt","Boolean","Number","Array","isArray","Set","__spreadValues","useController","Controller","useRef","current","TimedPromise","threshold","run","performance","now","reject","result","rejected","remainingMS","diff","catch","error","createUseState","selection","props","setProps","useState","useEffect","subscribeAll","nextState","nextProps","unsubscribeAll","BaseModel","super","bindMiddleware","Menu","menuOpen","buttonDelay","linksVisible","close","update","toggle","setButtonDelay","delay","useMenu","isMenuOpen","getButtonDelay","QuickList","item","isEmpty","value","QuickQueue","enqueue","dequeue","peek","entry","PriorityQueue","buckets","max","guard","bucket","getBucket","Error","TaskQueue","config","defaultConfig","priorities","autoRun","taskSeparation","mainThreadYieldTime","registerTask","internals","executeAll","deferTask","timer","deferredTasks","onComplete","subscriptions","getCancelFN","cancelFN","cancellableExecution","jobID","removeJob","executeTasksWithPriority","clearPendingTasks","clearDeferredTasks","activeTask","queue","cancelToken","iterable","generator","more","temp","iter","__forAwait","next","done","proceed","isInputPending","yieldMainThread","return","iterate","window","navigator","_b","scheduling","_PageControllerModel","loading","routeName","screenActive","classes","show","replaceAll","flipScreen","shrink","flip","activateScreen","screenInnerTransition","shrinkDuration","initialize","wait","cb","unFlip","unShrink","active","setRouteName","hash","shrinkAndFlipDuration","innerWidth","smallScreenScale","largeScreenScale","sliceUnits","duration","parseInt","slice","variables","PageControllerModel","PageController","usePageController","screenClasses","isPageActive","routes","defaultRoute","setPage","currentRoute","Task","createLoader","onRouteLoaded","e","initialRoute","initialLoad","loadInitial","default","location","toLowerCase","Router","memo","Page","controller","addEventListener","hashChange","removeEventListener","classnames","arg","key","join","useClassNames","useMemo","Screen","width","height","innerHeight","updateMethod","initialized","onResize","destroy","useScreen","selectDimensions","selectHeight","FullScreen","forwardRef","ref","_c","style","children","Tag","rest","__objRest","jsx","Link","id","to","activeCheck","useCallback","hoverable","setCanHover","letters","toUpperCase","split","activeHovering","nav","jsxRuntimeExports","role","onClick","className","map","letter","open","inert","Timeout","add","abortAll","has","Labs","Scene","ready","timeout","onLoad","activateScene","useLabs","scene","Privacy","usePrivacy","isPrivacyOpen","Burger","sceneOpen","policy","deactivateScene","MenuButton","setActive","ScreenFlip","front","back","hide","frontClasses","jsxs","Loader","ScreenLoader","ErrorBoundary","Component","arguments","getDerivedStateFromError","componentDidCatch","errorInfo","onError","render","fallback","CreateLazyComponent","loader","errorBoundary","lazy","LazyComponent","_jsx","Suspense","preload","PriorityLevel","ATLLarge","ATLSmall","CartaLarge","CartaSmall","GnocciSmall","OpenSourceLarge","OpenSourceSmall","RepublicSmall","SkedgeLarge","SkedgeSmall","WordCloudsLarge","WordCloudsSmall","Preloader","mark","loadFNs","imgs","imageScope","img","Image","promisify","src","measure","loadBackground","backgroundScope","screenScope","largeImages","smallImages","image","onload","onerror","CommerceSmall","EatSmall","Routing","registerForegroundTask","foregroundTasks","wrapLoader","promises","scope","preloaded","component","small","large","Routes","home","import","work","labs","n","contact","privacypolicy","_g","_f","_e","_d","screen","orientation","lock","preloader","App","ScreenState","useLayoutEffect","document","body","overflow","node","getElementById","createRoot"],"sources":["../../node_modules/@figliolia/galena/dist/mjs/Middleware/types.js","../../node_modules/@figliolia/galena/dist/mjs/Galena/types.js","../../node_modules/@figliolia/event-emitter/dist/mjs/AutoIncrementingID.js","../../node_modules/@figliolia/event-emitter/dist/mjs/Subscriptable.js","../../node_modules/@figliolia/event-emitter/dist/mjs/EventEmitter.js","../../node_modules/@figliolia/galena/dist/mjs/Galena/Scheduler.js","../../node_modules/@figliolia/galena/dist/mjs/Galena/State.js","../../node_modules/@figliolia/galena-window/dist/mjs/useSetup.js","../../src/Hooks/useController.ts","../../node_modules/@figliolia/promises/dist/mjs/TimedPromise/TimedPromise.js","../../node_modules/@figliolia/react-galena/dist/mjs/extractAPI.js","../../node_modules/@figliolia/react-galena/dist/mjs/createUseState.js","../../src/Models/BaseModel.ts","../../src/State/Menu.ts","../../src/Models/MenuModel.ts","../../node_modules/@figliolia/data-structures/dist/mjs/QuickList.js","../../node_modules/@figliolia/data-structures/dist/mjs/QuickQueue.js","../../node_modules/@figliolia/task-queue/dist/mjs/PriorityQueue.js","../../src/Tools/TaskQueue.ts","../../node_modules/@figliolia/task-queue/dist/mjs/TaskQueue.js","../../src/Models/PageControllerModel.ts","../../src/State/PageController.ts","../../src/Components/Router/Controller.ts","../../src/Components/Router/index.tsx","../../node_modules/@figliolia/classnames/dist/mjs/classnames.js","../../node_modules/@figliolia/classnames/dist/mjs/useClassNames.js","../../src/State/Screen.ts","../../node_modules/@figliolia/galena-window/dist/mjs/WindowManager.js","../../src/Components/FullScreen/index.tsx","../../src/Components/Menu/Link/index.tsx","../../src/Components/Menu/index.tsx","../../node_modules/@figliolia/react-hooks/dist/mjs/Generics/Timeout.js","../../src/State/Labs.ts","../../src/Models/LabsModel.ts","../../src/State/Privacy.ts","../../src/Models/PrivacyModel.ts","../../src/Components/Burger/index.tsx","../../src/Components/ScreenFlip/MenuButton.tsx","../../src/Components/ScreenFlip/index.tsx","../../src/Components/Loader/index.tsx","../../src/Components/ScreenLoader/index.tsx","../../node_modules/@figliolia/react-lazy/dist/mjs/ErrorBoundary.js","../../node_modules/@figliolia/react-lazy/dist/mjs/CreateLazyComponent.js","../../node_modules/@figliolia/react-lazy/dist/mjs/types.js","../../src/Images/atl-large.jpg","../../src/Images/atl-small.jpg","../../src/Images/carta-large.jpg","../../src/Images/carta-small.jpg","../../src/Images/gnocchi-small.jpg","../../src/Images/openSource-large.webp","../../src/Images/openSource-small.webp","../../src/Images/republic-small.jpg","../../src/Images/skedge-desktop2.jpg","../../src/Images/skedge-small.jpg","../../src/Images/wordClouds.png","../../src/Images/wordClouds-small.png","../../src/Tools/Preloader.ts","../../src/Images/background-large.webp","../../src/Images/background-small.webp","../../src/Images/react-small.jpg","../../src/Images/sv-small.jpg","../../src/Images/react-desktop2.jpg","../../src/Images/sv-large.jpg","../../src/Images/gnocchi.jpg","../../src/Images/republic-large.jpg","../../src/Routing/Routing.ts","../../src/Routing/Routes.ts","../../src/Root/App.tsx","../../src/Hooks/useResizeBody.ts","../../src/Root/index.tsx"],"sourcesContent":["export var MiddlewareEvents;\n(function (MiddlewareEvents) {\n    MiddlewareEvents[\"onUpdate\"] = \"onUpdate\";\n    MiddlewareEvents[\"onBeforeUpdate\"] = \"onBeforeUpdate\";\n})(MiddlewareEvents || (MiddlewareEvents = {}));\n","export var Priority;\n(function (Priority) {\n    Priority[Priority[\"IMMEDIATE\"] = 1] = \"IMMEDIATE\";\n    Priority[Priority[\"MICROTASK\"] = 2] = \"MICROTASK\";\n    Priority[Priority[\"BATCHED\"] = 3] = \"BATCHED\";\n})(Priority || (Priority = {}));\n","/**\n * Auto Incrementing ID\n *\n * SQL-style ID generation!\n *\n * ```typescript\n * const IDs = new AutoIncrementingID();\n *\n * const uniqueID = IDs.get();\n * ```\n */\nexport class AutoIncrementingID {\n    incrementor = -1;\n    /**\n     * Get\n     *\n     * Returns an auto-incrementing ID\n     */\n    get() {\n        return `${++this.incrementor}`;\n    }\n    /**\n     * Last\n     *\n     * Returns the last generated ID\n     */\n    last() {\n        return `${this.incrementor}`;\n    }\n    /**\n     * Reset\n     *\n     * Resets the `AutoIncrementingID`'s incrementor back to 0\n     */\n    reset() {\n        this.incrementor - 1;\n    }\n}\n","import { AutoIncrementingID } from \"./AutoIncrementingID.js\";\n/**\n * Subscriptable\n *\n * Storage for the `EventEmitter`'s listeners. The `Subscriptable`\n * is an extension of the map prototype that provides ordered\n * indexing of callbacks with unique identifier for each index\n */\nexport class Subscriptable {\n    storage = new Map();\n    IDs = new AutoIncrementingID();\n    /**\n     * Register\n     *\n     * Indexes a callback on the map and returns its unique\n     * identifier\n     */\n    register(callback) {\n        const ID = this.IDs.get();\n        this.storage.set(ID, callback);\n        return ID;\n    }\n    /**\n     * Remove\n     *\n     * Deletes a callback by ID. Returns true if a callback with\n     * a corresponding ID existed, or false if it does not\n     */\n    remove(ID) {\n        return this.storage.delete(ID);\n    }\n    /**\n     * Execute\n     *\n     * Iterates over each lister on the map and executes it with\n     * the provided parameters\n     */\n    execute(...params) {\n        for (const listener of this) {\n            void listener(...params);\n        }\n    }\n    /**\n     * Execute Blocking\n     *\n     * Iterates over each lister on the map and executes it. Using\n     * this method will cause asynchronous operations to be handled\n     * as sequential blocking tasks\n     */\n    async executeBlocking(...params) {\n        for (const listener of this) {\n            await listener(...params);\n        }\n    }\n    /**\n     * Execute Concurrent\n     *\n     * Iterates over each lister on the map and executes it. Using\n     * this method will cause asynchronous operations to be handled\n     * concurrently\n     */\n    async executeConcurrent(...params) {\n        const tasks = [];\n        for (const listener of this) {\n            tasks.push(listener(...params));\n        }\n        return Promise.all(tasks);\n    }\n    /**\n     * Length\n     *\n     * Returns the number of entries on the instance\n     */\n    get length() {\n        return this.storage.size;\n    }\n    *[Symbol.iterator]() {\n        for (const [_, listener] of this.storage) {\n            yield listener;\n        }\n    }\n}\n","import { Subscriptable } from \"./Subscriptable.js\";\n/**\n * Event Emitter\n *\n * A low-code solution for type-safe event emitting outside of\n * the global scope\n *\n * ```typescript\n * const emitter = new EventEmitter<{\n *   \"event-1\": number[],\n *   \"event-2\": Map<string, () => {}>\n * }>();\n *\n * // Subscribe to permitted events\n * const ID1 = emitter.on(\"event-1\", list => {});\n * const ID2 = emitter.on(\"event-2\", map => {});\n *\n * // Emit permitted events\n * emitter.emit(\"event-1\", [1, 2, 3]);\n * emitter.emit(\"event-2\", new Map());\n *\n * // Clean up listeners to events\n *\n * emitter.off(\"event-1\", ID1);\n * emitter.off(\"event-2\", ID2);\n * ```\n */\nexport class EventEmitter {\n    storage = new Map();\n    /**\n     * On\n     *\n     * Registers an event handler on the `EventEmitter`. Your handler will\n     * be invoked each time `EventEmitter.emit()` is called with an event\n     * matching your handler.\n     *\n     * ```typescript\n     * const emitter = new EventEmitter();\n     *\n     * const listenerID = emitter.on(\"event-1\", event => {\n     *   console.log(\"event-1\", event);\n     * });\n     *\n     * // Cleaning up\n     * emitter.off(\"event-1\", listenerID);\n     * ```\n     */\n    on(event, listener) {\n        const subscriptable = this.storage.get(event) || new Subscriptable();\n        const ID = subscriptable.register(listener);\n        this.storage.set(event, subscriptable);\n        return ID;\n    }\n    /**\n     * Off\n     *\n     * Removes an event handler from the `EventEmitter` given an\n     * event and lister ID\n     */\n    off(event, ID) {\n        const subscriptable = this.storage.get(event);\n        if (!subscriptable) {\n            return false;\n        }\n        const removed = subscriptable.remove(ID);\n        if (!subscriptable.length) {\n            this.storage.delete(event);\n        }\n        return removed;\n    }\n    /**\n     * Emit\n     *\n     * Streams an event to all subscribers\n     */\n    emit(event, payload) {\n        const subscriptable = this.storage.get(event);\n        if (subscriptable) {\n            subscriptable.execute(payload);\n        }\n    }\n    /**\n     * Emit\n     *\n     * Streams an event to all subscribers handling\n     * asynchronous subscriptions as sequential blocking tasks.\n     * Returns a promise that'll resolve after all tasks complete\n     */\n    emitBlocking(event, payload) {\n        const subscriptable = this.storage.get(event);\n        if (subscriptable) {\n            return subscriptable.executeBlocking(payload);\n        }\n    }\n    /**\n     * Emit Concurrent\n     *\n     * Streams an event to all subscribers handling\n     * asynchronous subscriptions as concurrent tasks.\n     * Returns a promise that'll resolve after all tasks\n     * complete\n     */\n    async emitConcurrent(event, payload) {\n        const subscriptable = this.storage.get(event);\n        if (subscriptable) {\n            return subscriptable.executeConcurrent(payload);\n        }\n    }\n}\n","import { Priority } from \"./types.js\";\n/**\n * Scheduler\n *\n * Scheduling dispatched events to state consumers is how Galena\n * out-performs just about every state management library out there.\n * The scheduler offers the ability to dispatch state updates on 3\n * priorities:\n *\n * 1. Immediate - Immediate synchronous task execution and propagation of\n * changes to consumers\n * 2. Microtask - Immediate task execution and scheduled propagation of\n * changes to consumers\n * 3. Batched - Immediate task execution and batched propagation of\n * changes to consumers\n *\n * This module manages the propagation of changes to State consumers\n * by implementing the three priorities outlined above\n */\nexport class Scheduler {\n    task = null;\n    schedule = null;\n    constructor() {\n        this.executeTasks = this.executeTasks.bind(this);\n    }\n    /**\n     * Schedule Task\n     *\n     * Given a task (the emission of state changes to consumers)\n     * and a priority, this method executes the task on the priority\n     * level specified\n     */\n    scheduleTask(task, priority) {\n        this.task = task;\n        switch (priority) {\n            case Priority.IMMEDIATE:\n                return this.executeTasks();\n            case Priority.MICROTASK:\n                return Promise.resolve().then(() => {\n                    return this.executeTasks();\n                });\n            case Priority.BATCHED:\n            default:\n                if (!this.schedule) {\n                    this.createSchedule();\n                }\n        }\n    }\n    /**\n     * Create Schedule\n     *\n     * Schedules the execution of the current task after 5 milliseconds\n     */\n    createSchedule() {\n        this.clearSchedule();\n        this.schedule = setTimeout(this.executeTasks, 5);\n    }\n    /**\n     * Clear Schedule\n     *\n     * Clears the schedule if it exists\n     */\n    clearSchedule() {\n        if (this.schedule !== null) {\n            clearTimeout(this.schedule);\n            this.schedule = null;\n        }\n    }\n    /**\n     * Execute Tasks\n     *\n     * Clears the schedule if it exists and executes the current task\n     */\n    executeTasks() {\n        this.clearSchedule();\n        this.task?.();\n        this.task = null;\n    }\n}\n","import { EventEmitter } from \"@figliolia/event-emitter\";\nimport { MiddlewareEvents } from \"../Middleware/types.js\";\nimport { Scheduler } from \"./Scheduler.js\";\nimport { Priority } from \"./types.js\";\n/**\n * ### State\n *\n * The root of all reactivity in Galena. State instances can\n * operate in isolation by calling `new State(...args)` or as\n * part of your application's larger global state by using\n * `new Galena().composeState()`.\n *\n * `State` instances operate on the premise of pub-sub and mutability.\n * This provides significant performance improvement over more traditional\n * state management tools because\n *\n * 1. Mutations can occur in O(1) space\n * 2. Mutations can be batched when dispatching updates to subscribers\n *\n * When deciding how many `State` instances are required for your\n * applications needs, we suggest creating and organizing state in\n * accordance with your application logic. Meaning, you might have a\n * `State` instance for navigation/routing, another `State` instance\n * for storing user information, and so on. Performance can improve\n * significantly when state is dispersed amongst multiple instances\n *\n * #### Creating State Instances\n *\n * ```typescript\n * const MyState = new State(\"MyState\", {\n *   someData: true,\n *   listItems: [1, 2, 3, 4];\n *   // ...etc\n * });\n * ```\n *\n * #### Updating State\n * ##### Synchronous updates\n * ```typescript\n * MyState.update((state) => {\n *   state.listItems.push(5);\n * });\n * ```\n * ##### Asynchronous updates\n * ```typescript\n * MyState.update(async (state) => {\n *   const listItems = await fetch(\"/list-items\");\n *   state.listItems = listItems;\n * });\n * ```\n *\n * #### Subscribing to State Changes\n * ```typescript\n * MyState.subscribe((state) => {\n *   const { listItems } = state\n *   // Do something with your list items!\n * });\n * ```\n */\nexport class State extends Scheduler {\n    state;\n    name;\n    initialState;\n    middleware = [];\n    emitter = new EventEmitter();\n    constructor(name, initialState) {\n        super();\n        this.name = name;\n        this.state = initialState;\n        this.initialState = State.clone(initialState);\n    }\n    /**\n     * Get State\n     *\n     * Returns a readonly snapshot of the current state\n     */\n    getState() {\n        return this.state;\n    }\n    /**\n     * Update\n     *\n     * Mutates state and notifies any open subscriptions. This method\n     * by default uses task batching for optimized performance. In almost\n     * every use-case, this method is the correct way to mutate state. If\n     * you need to bypass batching for higher-priority state updates, you\n     * can use `State.priorityUpdate()` or `State.backgroundUpdate()`\n     *\n     * ##### Synchronous updates\n     * ```typescript\n     * MyState.update((state, initialState) => {\n     *   state.listItems.push(5);\n     * });\n     * ```\n     * ##### Asynchronous updates\n     * ```typescript\n     * MyState.update(async (state, initialState) => {\n     *   const listItems = await fetch(\"/list-items\");\n     *   state.listItems = listItems;\n     * });\n     * ```\n     */\n    update = this.mutation((func) => {\n        return func(this.state, this.initialState);\n    }, Priority.BATCHED);\n    /**\n     * Background Update\n     *\n     * Mutates state and notifies any open subscriptions. This method\n     * bypasses Galena's internal task batching for a more immediate\n     * state update and propagation of state to consumers. It utilizes\n     * a micro-task that allows for the current call stack to clear\n     * ahead of propagating state updates to consumers\n     *\n     * ##### Synchronous updates\n     * ```typescript\n     * MyState.backgroundUpdate((state, initialState) => {\n     *   state.listItems.push(5);\n     * });\n     * ```\n     * ##### Asynchronous updates\n     * ```typescript\n     * MyState.backgroundUpdate(async (state, initialState) => {\n     *   const listItems = await fetch(\"/list-items\");\n     *   state.listItems = listItems;\n     * });\n     * ```\n     */\n    backgroundUpdate = this.mutation((func) => {\n        return func(this.state, this.initialState);\n    }, Priority.MICROTASK);\n    /**\n     * Priority Update\n     *\n     * Mutates state and notifies any open subscriptions. This method\n     * bypasses optimizations for task batching and scheduling. This means\n     * that state updates made with this method propagate to subscriptions\n     * as immediately as possible. Overusing this method can cause your\n     * state updates to perform slower in certain cases. The usage of this\n     * method should be conserved for state mutations that need to occur\n     * at a certain frame rate\n     *\n     * ##### Synchronous updates\n     * ```typescript\n     * MyState.priorityUpdate((state, initialState) => {\n     *   state.listItems.push(5);\n     * });\n     * ```\n     * ##### Asynchronous updates\n     * ```typescript\n     * MyState.priorityUpdate(async (state, initialState) => {\n     *   const listItems = await fetch(\"/list-items\");\n     *   state.listItems = listItems;\n     * });\n     * ```\n     */\n    priorityUpdate = this.mutation((func) => {\n        return func(this.state, this.initialState);\n    }, Priority.IMMEDIATE);\n    /**\n     * Reset\n     *\n     * Resets the current state to its initial state\n     */\n    reset = this.mutation(() => {\n        this.state = State.clone(this.initialState);\n    });\n    /**\n     * Mutation\n     *\n     * This method can be used to wrap arbitrary functions that when invoked\n     * will:\n     * 1. Notify your subscriptions with the latest state\n     * 2. Execute any registered middleware (such as loggers or profiling tools)\n     *\n     * Using this method, developers can compose and extend `Galena`'s internal\n     * infrastructure for state mutations to create proprietary models for your\n     * state\n     *\n     * ```typescript\n     * import { State } from \"@figliolia/galena\";\n     *\n     * // Extend of Galena State\n     * class MyState extends State {\n     *   addListItem = mutation((newListItem) => {\n     *     this.state.list.push(newListItem);\n     *   });\n     * }\n     *\n     * // Create an instance\n     * const myState = new MyState(\"myState\", { list: [] });\n     *\n     * // Invoke your custom mutation method\n     * myState.addListItem(\"new-item\");\n     * ```\n     */\n    mutation(func, priority = Priority.BATCHED) {\n        return (...args) => {\n            this.lifeCycleEvent(MiddlewareEvents.onBeforeUpdate);\n            const returnValue = func(...args);\n            if (returnValue instanceof Promise) {\n                return returnValue.then(v => {\n                    this.scheduleUpdate(priority);\n                    return v;\n                });\n            }\n            this.scheduleUpdate(priority);\n            return returnValue;\n        };\n    }\n    /**\n     * Schedule Update\n     *\n     * Schedules an update to State subscribers and emits the\n     * `onUpdate` lifecycle hook\n     */\n    scheduleUpdate(priority) {\n        this.lifeCycleEvent(MiddlewareEvents.onUpdate);\n        void this.scheduleTask(() => this.emitter.emit(this.name, this.state), priority);\n    }\n    /**\n     * Register Middleware\n     *\n     * Caches a `Middleware` instance and invokes its\n     * lifecycle subscriptions on all state transitions\n     */\n    registerMiddleware(...middleware) {\n        this.middleware.push(...middleware);\n    }\n    /**\n     * Subscribe\n     *\n     * Registers a subscription on the state instance. The\n     * callback you provide will execute each time state changes.\n     * Returns a unique identifier for your subscription\n     */\n    subscribe(callback) {\n        return this.emitter.on(this.name, callback);\n    }\n    /**\n     * Unsubscribe\n     *\n     * Given a subscription ID, removes a registered subscription\n     * from the `State` instance\n     */\n    unsubscribe(ID) {\n        return this.emitter.off(this.name, ID);\n    }\n    /**\n     * Clear All Subscriptions\n     *\n     * Removes all open subscriptions to the `State` instance\n     */\n    clearAllSubscriptions() {\n        return this.emitter.storage.clear();\n    }\n    /**\n     * Life Cycle Event\n     *\n     * Triggers a life cycle event for each registered middleware\n     */\n    lifeCycleEvent(event) {\n        const maxIndex = this.middleware.length - 1;\n        for (let i = maxIndex; i > -1; i--) {\n            this.middleware[i][event](this);\n        }\n    }\n    /**\n     * Clone\n     *\n     * `State` instances accept any value as a form of reactive\n     * state. In order to maintain the initial state past any state\n     * transitions, this method clones the initial values provided\n     * to the `State` constructor and caches them to allow for\n     * developers to easily reset their current state back to its\n     * initial value\n     */\n    static clone(state) {\n        switch (typeof state) {\n            case \"string\":\n                return String(state);\n            case \"bigint\":\n                return BigInt(state);\n            case \"boolean\":\n                return Boolean(state);\n            case \"number\":\n                return Number(state);\n            case \"symbol\":\n            case \"function\":\n                return state;\n            case \"undefined\":\n                return undefined;\n            case \"object\":\n            default:\n                if (!state) {\n                    return null;\n                }\n                if (Array.isArray(state)) {\n                    return [...state];\n                }\n                if (state instanceof Set) {\n                    return new Set(state);\n                }\n                if (state instanceof Map) {\n                    return new Map(state);\n                }\n                if (state && typeof state === \"object\") {\n                    return { ...state };\n                }\n                return state;\n        }\n    }\n}\n","import { useEffect } from \"react\";\nexport const useSetup = (State) => {\n    useEffect(() => {\n        State.initialize();\n        return () => {\n            State.destroy();\n        };\n    }, [State]);\n};\n","import { useRef } from \"react\";\n\nexport const useController = <T>(Controller: T) => {\n  const controller = useRef<T>(Controller);\n  return controller.current;\n};\n","/**\n * Timed Promise\n *\n * A Promise wrapper that will execute your task against\n * a threshold number of milliseconds. When your promise\n * resolves or rejects, you'll receive the result/error\n * as well as any remaining milliseconds of your threshold.\n *\n * A common use-case for timed promises are scheduling\n * asynchronous work against UI transitions that may require\n * a certain duration to complete. Using `TimedPromise` you\n * can run your asynchronous work while scheduling any\n * remaining UI transitions against the remaining threshold\n *\n *\n * ```typescript\n * const TP = new TimedPromise(async () => {}, 1000);\n * const { result, remainingMS } = await TP.run();\n *\n * setTimeout(() => removeLoadingState(), remainingMS);\n * ```\n */\nexport class TimedPromise {\n    threshold;\n    task;\n    constructor(task, threshold) {\n        this.task = task;\n        this.threshold = threshold;\n    }\n    /**\n     * Run\n     *\n     * Executes your promise and resolves/rejects with the following:\n     *\n     * ```typescript\n     * const result = {\n     *   result: \"Your promise result\",\n     *   rejected: false, // or true,\n     *   remainingMS: 10\n     * }\n     * ```\n     */\n    async run() {\n        const then = performance.now();\n        return new Promise((resolve, reject) => {\n            void this.task()\n                .then((result) => {\n                resolve({\n                    result,\n                    rejected: false,\n                    remainingMS: this.diff(then),\n                });\n            })\n                .catch((error) => {\n                reject({\n                    result: error,\n                    rejected: true,\n                    remainingMS: this.diff(then),\n                });\n            });\n        });\n    }\n    diff(then) {\n        const diff = performance.now() - then;\n        if (diff > this.threshold) {\n            return 0;\n        }\n        return this.threshold - diff;\n    }\n}\n","export const subscribe = (state) => {\n    if (\"subscribeAll\" in state) {\n        return state.subscribeAll.bind(state);\n    }\n    return state.subscribe.bind(state);\n};\nexport const unsubscribe = (state) => {\n    if (\"unsubscribeAll\" in state) {\n        return state.unsubscribeAll.bind(state);\n    }\n    return state.unsubscribe.bind(state);\n};\n","import { useEffect, useState } from \"react\";\nimport { subscribe, unsubscribe } from \"./extractAPI.js\";\nimport { State } from \"@figliolia/galena\";\n/**\n * ### Create Use State\n *\n * A factory for generating selectors from `Galena` instances and\n * units of `State`\n *\n * ### Composing State and Selector Hooks!\n *\n * ```typescript\n * // AppState.ts\n * import { Galena } from \"@figliolia/galena\";\n * import { createUseState } from \"@figliolia/react-galena\";\n *\n * const AppState = new Galena();\n *\n * const NavigationState = AppState.composeState(\"navigation\", {\n *   route: \"/\",\n *   permittedRoutes: \"/**\"\n * });\n *\n * export const useAppState = createUseState(AppState);\n * // or using the Navigation Unit\n * export const useNavigationState = createUseState(NavigationState);\n * ```\n *\n * ### Using Selector Hooks in React\n * ```tsx\n * import { useAppState, useNavigationState } from \"./AppState\";\n *\n * const Navigation = ({ route, text }) => {\n *   const currentRoute = useAppState(({ navigation }) => navigation.state.route);\n *   // or using the Navigation unit\n *   const currentRoute = useNavigationState((state) => state.route);\n *\n *   return (\n *     <nav>\n *       <div>{currentRoute}</div>\n *       <Link to=\"/\" text=\"Home\" />\n *       <Link to=\"/about\" text=\"About\" />\n *       <Link to=\"/contact\" text=\"Contact\" />\n *      </nav>\n *   );\n * }\n * ```\n *\n * ### Computing Arbitrary Values from State\n * In addition to reading values from state, you may also compute\n * arbitrary values using your state. Your component will re-render\n * any time your computed value changes:\n * ```tsx\n * import { useNavigationState } from \"./AppState\";\n *\n * const Link = ({ route, text }) => {\n *   const isActive = useNavigationState((state) => state.route === route);\n *\n *   return (\n *     <a href={route} className={isActive ? \"active\" : \"\"}>{text}</a>\n *   );\n * }\n * ```\n */\nexport const createUseState = (state) => {\n    return function useGalenaState(selection) {\n        const [props, setProps] = useState(selection(state.getState()));\n        useEffect(() => {\n            const ID = subscribe(state)((nextState) => {\n                const nextProps = selection(nextState);\n                if (nextProps === nextState && typeof nextProps === \"object\") {\n                    return setProps(State.clone(nextProps));\n                }\n                return setProps(nextProps);\n            });\n            return () => unsubscribe(state)(ID);\n        }, [selection]);\n        return props;\n    };\n};\n","import { Logger, Profiler, State } from \"@figliolia/galena\";\n\nexport class BaseModel<T> extends State<T> {\n  constructor(...params: ConstructorParameters<typeof State<T>>) {\n    super(...params);\n    BaseModel.bindMiddleware(this);\n  }\n\n  private static bindMiddleware(state: State) {\n    if (process.env.NODE_ENV === \"development\") {\n      state.registerMiddleware(new Logger(), new Profiler());\n    }\n  }\n}\n","import { createUseState } from \"@figliolia/react-galena\";\nimport { MenuModel } from \"Models/MenuModel\";\nimport type { IMenu } from \"Models/types\";\n\nexport const Menu = new MenuModel();\nexport const useMenu = createUseState(Menu);\n\nexport const isMenuOpen = (state: IMenu) => state.menuOpen;\nexport const getButtonDelay = (state: IMenu) => state.buttonDelay;\n","import { BaseModel } from \"./BaseModel\";\nimport type { IMenu } from \"./types\";\n\nexport class MenuModel extends BaseModel<IMenu> {\n  constructor() {\n    super(\"Menu\", {\n      menuOpen: false,\n      buttonDelay: 10000,\n      linksVisible: false,\n    });\n  }\n  public close() {\n    this.update(state => {\n      state.menuOpen = false;\n    });\n  }\n\n  public toggle() {\n    this.update(state => {\n      state.menuOpen = !state.menuOpen;\n    });\n  }\n\n  public setButtonDelay(delay: number) {\n    this.update(state => {\n      state.buttonDelay = delay;\n    });\n  }\n}\n","import { AutoIncrementingID } from \"@figliolia/event-emitter\";\n/**\n * Quick List\n *\n * The base construct for `QuickStacks` and `QuickQueues`,\n * designed to mimick Array-like interfaces while providing\n * access to and deletions of items at O(1)\n */\nexport class QuickList {\n    storage = new Map();\n    IDs = new AutoIncrementingID();\n    /**\n     * Push\n     *\n     * Adds a new item onto the stack, returns a unique\n     * ID for the item\n     */\n    push(item) {\n        const ID = this.IDs.get();\n        this.storage.set(ID, item);\n        return ID;\n    }\n    /**\n     * Length\n     *\n     * Returns the total number of items on the stack\n     */\n    get length() {\n        return this.storage.size;\n    }\n    /**\n     * Is Empty\n     *\n     * Returns true if the list contains no items\n     */\n    get isEmpty() {\n        return this.storage.size === 0;\n    }\n    /**\n     * Get\n     *\n     * Returns an item on the stack by unique ID\n     */\n    get(ID) {\n        return this.storage.get(ID);\n    }\n    /**\n     * Delete\n     *\n     * Removes an entry from the stack by unique ID\n     */\n    delete(ID) {\n        return this.storage.delete(ID);\n    }\n    /**\n     * Clear\n     *\n     * Removes all items from the queue\n     */\n    clear() {\n        return this.storage.clear();\n    }\n    *[Symbol.iterator]() {\n        for (const [_, value] of this.storage) {\n            yield value;\n        }\n    }\n}\n","import { QuickList } from \"./QuickList.js\";\n/**\n * Quick Queue\n *\n * A wrapper around the native Map that assigns an\n * auto-incrementing ID to each value added. It provides\n * a Queue-like interface with the ability to access and\n * remove items in 0(1) time\n *\n * ```typescript\n * const queue = new QuickQueue<() => void>();\n * const uniqueID = queue.enqueue(() => {});\n *\n * const FN = queue.dequeue() // Remove and return the first item on the queue\n * const FN = queue.get(uniqueID); // Get an item by ID\n * queue.delete(uniqueID) // Delete an item by ID\n * ```\n */\nexport class QuickQueue extends QuickList {\n    /**\n     * Enqueue\n     *\n     * Adds an item to the queue and returns it's\n     * unique ID\n     */\n    enqueue(item) {\n        return super.push(item);\n    }\n    /**\n     * Dequeue\n     *\n     * Removes the first item from the Bucket and\n     * returns it\n     */\n    dequeue() {\n        for (const [ID, item] of this.storage) {\n            this.storage.delete(ID);\n            return item;\n        }\n    }\n    /**\n     * Peek\n     *\n     * Returns the first item from the Bucket or undefined\n     * if the queue is empty\n     */\n    peek() {\n        for (const entry of this.storage) {\n            return entry;\n        }\n    }\n}\n","import { QuickQueue } from \"@figliolia/data-structures\";\n/**\n * Priority Queue\n *\n * A bucket queue supporting a dynamic number of buckets\n * ```typescript\n * const queue = new PriorityQueue(3);\n * // queue = [[],[],[]]\n * queue.enqueue(() => {}, 1);\n * // queue = [[() => {}],[],[]]\n * queue.enqueue(() => {}, 2);\n * // queue = [[() => {}],[],[() => {}]]\n * queue.dequeue();\n * // queue = [[],[],[() => {}]]\n * queue.dequeue();\n * // queue = [[],[],[]]\n * ```\n */\nexport class PriorityQueue {\n    max;\n    buckets = [];\n    constructor(buckets) {\n        this.max = buckets - 1;\n        for (let i = 0; i < buckets; i++) {\n            this.buckets.push(new QuickQueue());\n        }\n    }\n    /**\n     * Enqueue\n     *\n     * Adds an item to the queue at the specified priority.\n     * If no priority is provided, the item will be indexed\n     * into the *highest* priority bucket\n     */\n    enqueue(item, priority = 0) {\n        this.guard(priority);\n        return this.buckets[priority].enqueue(item);\n    }\n    /**\n     * Dequeue\n     *\n     * Removes the first item in the priority queue and\n     * returns it. Items are dequeued from higher priorities\n     * before lower priorities\n     */\n    dequeue() {\n        for (const bucket of this) {\n            if (bucket.length) {\n                return bucket.dequeue();\n            }\n        }\n    }\n    /**\n     * Get Bucket\n     *\n     * Returns the Nth bucket in the Queue\n     */\n    getBucket(priority = 0) {\n        this.guard(priority);\n        return this.buckets[priority];\n    }\n    /**\n     * peek\n     *\n     * Returns the highest priority item in the Queue\n     */\n    peek() {\n        for (const bucket of this) {\n            if (bucket.length) {\n                return bucket.peek();\n            }\n        }\n    }\n    /**\n     * IsEmpty\n     *\n     * Returns true if the Queue has no items in any of\n     * its buckets\n     */\n    get isEmpty() {\n        for (const bucket of this) {\n            if (bucket.length) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Length\n     *\n     * Returns the total number of items in the Queue\n     */\n    get length() {\n        let length = 0;\n        for (const bucket of this) {\n            length += bucket.length;\n        }\n        return length;\n    }\n    /**\n     * Delete By ID\n     *\n     * Removes an item from the Queue using its ID and\n     * priority\n     */\n    delete(ID, priority) {\n        this.guard(priority);\n        return this.getBucket(priority).delete(ID);\n    }\n    /**\n     * Clear\n     *\n     * Resets the priority queue and removes all items\n     */\n    clear() {\n        for (const bucket of this) {\n            bucket.clear();\n        }\n    }\n    /**\n     * Guard\n     *\n     * Throws a range error if the priority specified is out of range\n     */\n    guard(priority) {\n        if (priority > this.max) {\n            throw new Error(`Out of Range Error: Attempted to access a bucket index that does not exist`);\n        }\n    }\n    *[Symbol.iterator]() {\n        for (const bucket of this.buckets) {\n            yield bucket;\n        }\n    }\n}\n","import { TaskQueue as TQ } from \"@figliolia/task-queue\";\n\nexport const TaskQueue = new TQ();\n","import { QuickQueue } from \"@figliolia/data-structures\";\nimport { PriorityQueue } from \"./PriorityQueue.js\";\n/**\n * Task Queue\n *\n * A Task Manager for handing varying priority tasks and scheduling.\n * `TaskQueue` instances provide two means for task scheduling.\n *\n * The first is a priority queue that indexes tasks based on a\n * priority specified by you:\n * ```\n * const TQ = new TaskQueue({\n *  priorities: 4,\n *  autoRun: false,\n *  taskSeparation: 5,\n *  mainThreadYieldTime: 5.\n * });\n *\n * const task1 = () => {};\n * const task2 = () => {};\n * const task3 = () => {};\n * const task4 = () => {};\n *\n * TQ.registerTask(task1, 4);\n * TQ.registerTask(task2, 3);\n * TQ.registerTask(task3, 2);\n * TQ.registerTask(task4, 1);\n *\n * const cancelFN = TQ.executeAll();\n * // The execution order => task4, task3, task2, task1\n * // 5ms will elapse between each task\n * ```\n *\n * `TaskQueue.registerTask()` returns a cancel function for easily\n * removing a task from the Queue\n *\n * The second means is the management and clean up of deferred tasks.\n * Deferring tasks through `setTimeout` is notorious for causing\n * memory leaks and unwanted side effects. This `TaskQueue` provides\n * management for scheduled tasks:\n * ```typescript\n * const TQ = new TaskQueue();\n *\n * const cancel = TQ.deferTask(() => {}, 1000); // Execute the task after 1000ms\n *\n * // cancel(); // cancel the task optionally\n * ```\n * `TaskQueue.deferTask()` also returns a cancel function for easily\n * removing a task from the Queue\n */\nexport class TaskQueue {\n    autoRun = false;\n    taskSeparation = 0;\n    mainThreadYieldTime = 5;\n    tasks;\n    subscriptions = new QuickQueue();\n    internals = new QuickQueue();\n    deferredTasks = new QuickQueue();\n    constructor(config = TaskQueue.defaultConfig) {\n        const { priorities = 1, autoRun = false, taskSeparation = 0, mainThreadYieldTime = 5, } = config;\n        this.autoRun = autoRun;\n        this.taskSeparation = taskSeparation;\n        this.mainThreadYieldTime = mainThreadYieldTime;\n        this.tasks = new PriorityQueue(priorities);\n    }\n    static defaultConfig = {\n        priorities: 1,\n        autoRun: false,\n        taskSeparation: 0,\n        mainThreadYieldTime: 5,\n    };\n    /**\n     * Register Task\n     *\n     * Registers a non-deferred task on the TaskQueue at\n     * a specified priority level. Returns a cancel\n     * function that removes the task from the queue\n     */\n    registerTask(task, priority = 1) {\n        const ID = this.tasks.enqueue(task, priority - 1);\n        if (this.autoRun && !this.internals.peek()) {\n            this.executeAll();\n        }\n        return () => {\n            this.tasks.delete(ID, priority - 1);\n        };\n    }\n    /**\n     * Defer Task\n     *\n     * Schedules the specified task after a delay. Returns\n     * a cancel function that removes the task from the\n     * queue\n     */\n    deferTask(task, delay) {\n        const timer = setTimeout(() => {\n            void task();\n            this.deferredTasks.delete(ID);\n        }, delay);\n        const ID = this.deferredTasks.enqueue(timer);\n        return () => {\n            clearTimeout(timer);\n            this.deferredTasks.delete(ID);\n        };\n    }\n    /**\n     * Execute All\n     *\n     * Executes all tasks registered using `TaskQueue.registerTask()`.\n     * The task execution order will be based on the priority each task\n     * was registered with. Returns a cancel function\n     */\n    executeAll(onComplete, taskSeparation = this.taskSeparation) {\n        if (onComplete) {\n            this.subscriptions.enqueue(onComplete);\n        }\n        if (this.internals.peek()) {\n            return this.getCancelFN();\n        }\n        const cancelFN = this.cancellableExecution(this.tasks, taskSeparation);\n        const jobID = this.internals.enqueue(cancelFN);\n        const removeJob = () => {\n            this.internals.delete(jobID);\n        };\n        this.subscriptions.enqueue(removeJob);\n        return () => {\n            cancelFN();\n            removeJob();\n        };\n    }\n    /**\n     * Execute Tasks With Priority\n     *\n     * Executes all tasks registered using `TaskQueue.registerTask(task, N)`\n     * with the provided priority. Returns a cancel function\n     */\n    executeTasksWithPriority(priority = 1, taskSeparation = 0, onComplete) {\n        if (onComplete) {\n            this.subscriptions.enqueue(onComplete);\n        }\n        if (this.internals.peek()) {\n            return this.getCancelFN();\n        }\n        return this.cancellableExecution(this.tasks.getBucket(priority - 1), taskSeparation);\n    }\n    /**\n     * Clear Pending Tasks\n     *\n     * Clears all pending tasks\n     */\n    clearPendingTasks() {\n        this.tasks.clear();\n        this.clearDeferredTasks();\n    }\n    /**\n     * Clear Deferred Tasks\n     *\n     * Clears all pending tasks registered using `TaskQueue.deferTask()`\n     */\n    clearDeferredTasks() {\n        while (this.deferredTasks.length) {\n            const item = this.deferredTasks.dequeue();\n            if (item !== undefined) {\n                clearTimeout(item);\n            }\n        }\n    }\n    /**\n     * Get Cancel Function\n     *\n     * Returns the cancel function for currently executing tasks\n     * (if it exists). Returns undefined if no tasks are being\n     * executed;\n     */\n    getCancelFN() {\n        const activeTask = this.internals.peek();\n        if (activeTask) {\n            return activeTask[1];\n        }\n    }\n    /**\n     * Cancellable Execution\n     *\n     * Given Queue and a task separation time, schedules the\n     * execution of each task present. Returns a cancel\n     * function that pauses the execution of tasks\n     */\n    cancellableExecution(queue, taskSeparation = this.taskSeparation) {\n        let cancelToken = false;\n        const iterable = this.generator(queue, taskSeparation);\n        const iterate = async () => {\n            for await (const proceed of iterable) {\n                if (cancelToken || !proceed) {\n                    break;\n                }\n                if (this.isInputPending()) {\n                    await this.yieldMainThread();\n                    continue;\n                }\n                const task = queue.dequeue();\n                task && void task();\n            }\n            if (this.subscriptions.length) {\n                return this.cancellableExecution(this.subscriptions, 0);\n            }\n        };\n        void iterate();\n        return () => {\n            cancelToken = true;\n        };\n    }\n    /**\n     * Generator\n     *\n     * Returns an async iterable yielding a promise that resolves\n     * after a specified duration. The duration specified is\n     * used for dispersing prioritized along the call stack\n     */\n    *generator(queue, taskSeparation = 0) {\n        while (!queue.isEmpty) {\n            if (!taskSeparation) {\n                yield true;\n            }\n            else {\n                yield new Promise(resolve => {\n                    this.deferTask(() => {\n                        resolve(true);\n                    }, taskSeparation);\n                });\n            }\n        }\n    }\n    isInputPending() {\n        if (typeof window !== \"undefined\" && typeof navigator !== \"undefined\") {\n            // @ts-ignore\n            return navigator?.scheduling?.isInputPending() ?? false;\n        }\n        return false;\n    }\n    yieldMainThread() {\n        return new Promise(resolve => {\n            setTimeout(resolve, this.mainThreadYieldTime);\n        });\n    }\n}\n","import { Menu } from \"State/Menu\";\nimport variables from \"Styles/exports.module.scss\";\nimport { TaskQueue } from \"Tools/TaskQueue\";\nimport { BaseModel } from \"./BaseModel\";\nimport type { IPageController } from \"./types\";\n\nexport class PageControllerModel extends BaseModel<IPageController> {\n  static screenInnerTransition = this.sliceUnits(\n    variables.screenInnerTransition,\n  );\n  static smallScreenScale = this.sliceUnits(variables.smallScreenScale);\n  static largeScreenScale = this.sliceUnits(variables.largeScreenScale);\n  constructor() {\n    super(\"Page Controller\", {\n      loading: true,\n      routeName: \"home\",\n      screenActive: false,\n      classes: \"screen shrink flip hidden\",\n    });\n  }\n\n  public show() {\n    this.update(state => {\n      state.classes = state.classes.replaceAll(\" hidden\", \"\");\n    });\n  }\n\n  public flipScreen() {\n    return new Promise<void>(resolve => {\n      this.loading(true);\n      this.shrink();\n      TaskQueue.deferTask(() => {\n        this.flip();\n        TaskQueue.deferTask(() => {\n          Menu.close();\n          this.activateScreen(false);\n          resolve();\n        }, PageControllerModel.screenInnerTransition);\n      }, PageControllerModel.shrinkDuration);\n    });\n  }\n\n  public initialize(wait = 1000, cb?: () => void) {\n    TaskQueue.deferTask(() => {\n      this.unFlip();\n      this.loading(false);\n      TaskQueue.deferTask(() => {\n        this.unShrink();\n        TaskQueue.deferTask(() => {\n          this.activateScreen();\n          cb?.();\n        }, PageControllerModel.shrinkDuration);\n      }, PageControllerModel.screenInnerTransition);\n    }, wait);\n  }\n\n  public loading(loading: boolean) {\n    this.update(state => {\n      state.loading = loading;\n    });\n  }\n\n  public shrink() {\n    this.update(state => {\n      state.classes = state.classes + \" shrink\";\n    });\n  }\n\n  public unShrink() {\n    this.update(state => {\n      state.classes = state.classes.replaceAll(\" shrink\", \"\");\n    });\n  }\n\n  public flip() {\n    this.update(state => {\n      state.classes = state.classes + \" flip\";\n    });\n  }\n\n  public unFlip() {\n    this.update(state => {\n      state.classes = state.classes.replaceAll(\" flip\", \"\");\n    });\n  }\n\n  private activateScreen(active = true) {\n    this.update(state => {\n      state.screenActive = active;\n    });\n  }\n\n  public setRouteName(hash: string) {\n    this.update(state => {\n      state.routeName = hash;\n    });\n  }\n\n  public static get shrinkAndFlipDuration() {\n    return this.shrinkDuration + this.screenInnerTransition;\n  }\n\n  private static get shrinkDuration() {\n    if (window.innerWidth < 957) {\n      return this.smallScreenScale;\n    }\n    return this.largeScreenScale;\n  }\n\n  private static sliceUnits(duration: string) {\n    return parseInt(duration.slice(0, -2));\n  }\n}\n","import { createUseState } from \"@figliolia/react-galena\";\nimport { PageControllerModel } from \"Models/PageControllerModel\";\nimport type { IPageController } from \"Models/types\";\n\nexport const PageController = new PageControllerModel();\nexport const usePageController = createUseState(PageController);\n\nexport const screenClasses = (state: IPageController) => state.classes;\nexport const isPageActive = (state: IPageController) => state.screenActive;\n","import type { TimedPromiseResolution } from \"@figliolia/promises\";\nimport { TimedPromise } from \"@figliolia/promises\";\nimport type { LazyComponent } from \"@figliolia/react-lazy\";\nimport { PageController } from \"State/PageController\";\nimport type { PropLess } from \"Tools/Types\";\nimport type { ISetPage, RouteMap } from \"./types\";\n\nexport class Controller<T extends RouteMap> {\n  private routes: RouteMap;\n  private setPage: ISetPage;\n  private defaultRoute: Extract<keyof T, string>;\n  private initialRoute: Extract<keyof T, string>;\n  private initialLoad: Promise<TimedPromiseResolution<LazyComponent<PropLess>>>;\n  constructor(\n    routes: T,\n    defaultRoute: Extract<keyof T, string>,\n    setPage: ISetPage,\n  ) {\n    this.routes = routes;\n    this.setPage = setPage;\n    this.defaultRoute = defaultRoute;\n    this.initialRoute = this.currentRoute;\n    this.initialLoad = this.createLoader(this.initialRoute, 1750).run();\n  }\n\n  public async loadInitial() {\n    this.onRouteLoaded(this.initialRoute, await this.initialLoad);\n  }\n\n  public hashChange = () => {\n    const hash = this.currentRoute;\n    void PageController.flipScreen().then(async () => {\n      try {\n        const Task = this.createLoader(hash);\n        this.onRouteLoaded(hash, await Task.run());\n      } catch {\n        // silence\n      }\n    });\n  };\n\n  private createLoader(hash: Extract<keyof T, string>, threshold = 1000) {\n    return new TimedPromise(() => this.routes[hash](), threshold);\n  }\n\n  private onRouteLoaded(\n    hash: string,\n    { result, remainingMS }: TimedPromiseResolution<LazyComponent<PropLess>>,\n  ) {\n    this.setPage(result.default);\n    PageController.initialize(remainingMS, () => {\n      PageController.setRouteName(hash);\n    });\n  }\n\n  private get currentRoute() {\n    return (window.location.hash.slice(1).toLowerCase() ||\n      this.defaultRoute) as Extract<keyof T, string>;\n  }\n}\n","import type { ComponentType } from \"react\";\nimport { memo, useEffect, useState } from \"react\";\nimport { useController } from \"Hooks/useController\";\nimport { Controller } from \"./Controller\";\nimport type { RouteMap } from \"./types\";\n\nfunction IRouter<T extends RouteMap>({ defaultRoute, routes }: Props<T>) {\n  const [Page, setPage] = useState<ComponentType | null>(null);\n\n  const controller = useController(\n    new Controller(routes, defaultRoute, setPage),\n  );\n\n  useEffect(() => {\n    addEventListener(\"hashchange\", controller.hashChange);\n    void controller.loadInitial();\n    return () => {\n      window.removeEventListener(\"hashchange\", controller.hashChange);\n    };\n  }, [controller]);\n\n  if (!Page) {\n    return null;\n  }\n  return <Page />;\n}\n\nexport const Router = memo(IRouter);\n\ninterface Props<T extends RouteMap> {\n  readonly routes: T;\n  readonly defaultRoute: Extract<keyof T, string>;\n}\n","export const classnames = (...args) => {\n    const classes = [];\n    for (const arg of args) {\n        if (typeof arg === \"string\" && arg.length) {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg)) {\n            classes.push(...classnames(arg));\n        }\n        else if (typeof arg === \"object\" && !!arg) {\n            for (const key in arg) {\n                if (arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    }\n    return classes.join(\" \");\n};\n","import { useMemo } from \"react\";\nimport { classnames } from \"./classnames.js\";\nexport const useClassNames = (...args) => {\n    return useMemo(() => classnames(...args), [args]);\n};\n","import { WindowManager } from \"@figliolia/galena-window\";\nimport { createUseState } from \"@figliolia/react-galena\";\nimport type { IScreen } from \"Models/types\";\n\nexport const Screen = new WindowManager(\"IMMEDIATE\");\nexport const useScreen = createUseState(Screen);\n\nexport const selectDimensions = (state: IScreen) => {\n  return [state.width, state.height];\n};\n\nexport const selectHeight = (state: IScreen) => state.height;\n","import { State } from \"@figliolia/galena\";\nexport class WindowManager extends State {\n    initialized = false;\n    priority;\n    constructor(priority = \"BATCHED\") {\n        super(\"Screen\", {\n            width: window?.innerWidth ?? 0,\n            height: window?.innerHeight ?? 0,\n        });\n        this.priority = priority;\n    }\n    initialize() {\n        if (!this.initialized && typeof window !== \"undefined\") {\n            this.initialized = true;\n            window.addEventListener(\"resize\", this.onResize);\n        }\n    }\n    destroy() {\n        if (typeof window !== \"undefined\") {\n            this.initialized = false;\n            window.removeEventListener(\"resize\", this.onResize);\n        }\n    }\n    onResize = () => {\n        this[this.updateMethod](state => {\n            state.width = window?.innerWidth ?? 0;\n            state.height = window?.innerHeight ?? 0;\n        });\n    };\n    get updateMethod() {\n        switch (this.priority) {\n            default:\n            case \"BATCHED\":\n                return \"update\";\n            case \"IMMEDIATE\":\n                return \"priorityUpdate\";\n            case \"MICROTASK\":\n                return \"backgroundUpdate\";\n        }\n    }\n}\n","import { ForwardedRef, forwardRef, type HTMLAttributes } from \"react\";\nimport { selectDimensions, useScreen } from \"State/Screen\";\n\nconst FullScreenComponent = <T extends keyof HTMLElementTagNameMap>(\n  {\n    style,\n    children,\n    // @ts-ignore\n    Tag = \"div\",\n    ...rest\n  }: Props<T>,\n  ref: ForwardedRef<HTMLElementTagNameMap[T]>,\n) => {\n  const [width, height] = useScreen(selectDimensions);\n  return (\n    // @ts-ignore\n    <Tag style={{ height, width, ...style }} {...rest} ref={ref}>\n      {children}\n    </Tag>\n  );\n};\n\nexport const FullScreen = forwardRef(FullScreenComponent);\n\ninterface Props<T extends keyof HTMLElementTagNameMap>\n  extends HTMLAttributes<HTMLElementTagNameMap[T]> {\n  Tag?: T;\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { PageControllerModel } from \"Models/PageControllerModel\";\nimport type { IPageController } from \"Models/types\";\nimport { isMenuOpen, Menu, useMenu } from \"State/Menu\";\nimport { usePageController } from \"State/PageController\";\nimport { TaskQueue } from \"Tools/TaskQueue\";\nimport \"./styles.scss\";\n\nexport const Link = memo(function Link({ id, to }: Props) {\n  const activeCheck = useCallback(\n    (state: IPageController) => {\n      return state.routeName.toLowerCase() === to.toLowerCase();\n    },\n    [to],\n  );\n\n  const active = usePageController(activeCheck);\n  const [hoverable, setCanHover] = useState(false);\n  const menuOpen = useMenu(isMenuOpen);\n  const letters = useMemo(() => to.toUpperCase().split(\"\"), [to]);\n  const delay = useMemo(() => letters.length * 50 + 2200, [letters]);\n\n  const activeHovering = useCallback(() => {\n    TaskQueue.deferTask(() => {\n      setCanHover(true);\n    }, delay);\n  }, [delay]);\n\n  useEffect(() => {\n    if (menuOpen) {\n      activeHovering();\n      return;\n    }\n    setCanHover(false);\n  }, [menuOpen, activeHovering]);\n\n  const nav = useCallback(() => {\n    window.location.hash = `#${to}`;\n    TaskQueue.deferTask(() => {\n      Menu.toggle();\n    }, PageControllerModel.shrinkAndFlipDuration);\n  }, [to]);\n\n  const classes = useClassNames(\"link\", { active, hoverable });\n\n  return (\n    <button\n      id={id}\n      role=\"link\"\n      onClick={nav}\n      className={classes}\n      aria-label={to}>\n      {letters.map((letter, i) => {\n        return (\n          <span key={`${letter}-${i}`} className=\"link-letter\" aria-hidden>\n            {letter}\n          </span>\n        );\n      })}\n    </button>\n  );\n});\n\ninterface Props {\n  id: string;\n  to: string;\n}\n","import { memo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { isMenuOpen, useMenu } from \"State/Menu\";\nimport type { PropLess } from \"Tools/Types\";\nimport { Link } from \"./Link\";\nimport \"./styles.scss\";\n\nexport const Menu = memo(\n  function Menu(_: PropLess) {\n    const open = useMenu(isMenuOpen);\n    const classes = useClassNames(\"menu\", { open });\n    return (\n      <nav className={classes} aria-hidden={!open} inert={!open}>\n        <Link id=\"linkHome\" to=\"Home\" />\n        <Link id=\"linkWork\" to=\"Work\" />\n        <Link id=\"linkLabs\" to=\"Labs\" />\n        <Link id=\"linkContact\" to=\"Contact\" />\n      </nav>\n    );\n  },\n  () => true,\n);\n","export class Timeout {\n    IDs = new Set();\n    execute(callback, delay = 0) {\n        const ID = setTimeout(() => {\n            callback();\n        }, delay);\n        this.IDs.add(ID);\n        return () => {\n            this.clear(ID);\n        };\n    }\n    abortAll() {\n        for (const ID of this.IDs) {\n            clearTimeout(ID);\n        }\n        this.IDs.clear();\n    }\n    clear(ID) {\n        if (ID && this.IDs.has(ID)) {\n            clearTimeout(ID);\n            this.IDs.delete(ID);\n        }\n    }\n}\n","import { createUseState } from \"@figliolia/react-galena\";\nimport { ILabs, LabsModel } from \"Models/LabsModel\";\n\nexport const Labs = new LabsModel();\nexport const useLabs = createUseState(Labs);\n\nexport const ready = (state: ILabs) => state.ready;\nexport const loading = (state: ILabs) => state.loading;\nexport const scene = (state: ILabs) => state.Scene;\n","import { ReactNode } from \"react\";\nimport { State } from \"@figliolia/galena\";\nimport { Timeout } from \"@figliolia/react-hooks\";\n\nexport class LabsModel extends State<ILabs> {\n  private timeout = new Timeout();\n  constructor() {\n    super(\"Labs\", {\n      Scene: undefined,\n      loading: false,\n      ready: false,\n    });\n  }\n\n  public onLoad() {\n    this.update(state => {\n      state.loading = false;\n      state.ready = true;\n    });\n  }\n\n  public activateScene(Scene: ReactNode) {\n    this.update(state => {\n      state.loading = true;\n      state.Scene = Scene;\n    });\n  }\n\n  public deactivateScene = () => {\n    this.update(state => {\n      state.ready = false;\n    });\n    this.timeout.execute(() => {\n      this.update(state => {\n        state.Scene = undefined;\n      });\n    }, 1000);\n  };\n\n  public destroy() {\n    this.timeout.abortAll();\n    this.reset();\n  }\n}\n\nexport interface ILabs {\n  ready: boolean;\n  loading: boolean;\n  Scene?: ReactNode;\n}\n","import { createUseState } from \"@figliolia/react-galena\";\nimport { PrivacyModel } from \"Models/PrivacyModel\";\nimport type { IPrivacy } from \"Models/types\";\n\nexport const Privacy = new PrivacyModel();\nexport const usePrivacy = createUseState(Privacy);\n\nexport const isPrivacyOpen = (state: IPrivacy) => state.open;\n","import { BaseModel } from \"./BaseModel\";\nimport type { IPrivacy } from \"./types\";\n\nexport class PrivacyModel extends BaseModel<IPrivacy> {\n  constructor() {\n    super(\"Privacy\", { open: false });\n  }\n\n  public toggle = () => {\n    this.update(state => {\n      state.open = !state.open;\n    });\n  };\n}\n","import { memo, useCallback, useMemo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { Labs, ready, useLabs } from \"State/Labs\";\nimport { isMenuOpen, Menu, useMenu } from \"State/Menu\";\nimport { isPrivacyOpen, Privacy, usePrivacy } from \"State/Privacy\";\nimport type { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Burger = memo(\n  function Burger(_: PropLess) {\n    const sceneOpen = useLabs(ready);\n    const menuOpen = useMenu(isMenuOpen);\n    const policy = usePrivacy(isPrivacyOpen);\n    const open = useMemo(\n      () => menuOpen || policy || !!sceneOpen,\n      [menuOpen, policy, sceneOpen],\n    );\n\n    const toggle = useCallback(() => {\n      if (policy) {\n        Privacy.toggle();\n        return;\n      }\n      if (sceneOpen) {\n        Labs.deactivateScene();\n        return;\n      }\n      Menu.toggle();\n    }, [policy, sceneOpen]);\n\n    const classes = useClassNames(\"burger\", { open, policy });\n\n    return (\n      <button onClick={toggle} className={classes}>\n        <div>\n          <span className=\"top\" />\n          <span className=\"middle\" />\n          <span className=\"bottom\" />\n        </div>\n      </button>\n    );\n  },\n  () => true,\n);\n","import { memo, useEffect, useState } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { CancelFN } from \"@figliolia/task-queue\";\nimport { Burger } from \"Components/Burger\";\nimport { getButtonDelay, useMenu } from \"State/Menu\";\nimport { isPageActive, usePageController } from \"State/PageController\";\nimport { TaskQueue } from \"Tools/TaskQueue\";\nimport type { PropLess } from \"Tools/Types\";\n\nexport const MenuButton = memo(\n  function MenuButton(_: PropLess) {\n    const [active, setActive] = useState(false);\n    const delay = useMenu(getButtonDelay);\n    const screenActive = usePageController(isPageActive);\n\n    useEffect(() => {\n      if (!screenActive && active) {\n        setActive(false);\n        return;\n      }\n      let cancelFN: CancelFN;\n      if (screenActive && !active) {\n        cancelFN = TaskQueue.deferTask(() => {\n          setActive(true);\n        }, delay);\n      }\n      return () => {\n        cancelFN?.();\n      };\n    }, [active, delay, screenActive]);\n\n    const classes = useClassNames(\"menu-button\", { active });\n\n    return (\n      <div className={classes}>\n        <Burger />\n      </div>\n    );\n  },\n  () => true,\n);\n","import type { ReactNode } from \"react\";\nimport { memo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { FullScreen } from \"Components/FullScreen\";\nimport { Menu } from \"Components/Menu\";\nimport { isMenuOpen, useMenu } from \"State/Menu\";\nimport { screenClasses, usePageController } from \"State/PageController\";\nimport { MenuButton } from \"./MenuButton\";\nimport \"./styles.scss\";\n\nexport const ScreenFlip = memo(function Screen({ front, back }: Props) {\n  const hide = useMenu(isMenuOpen);\n  const classes = usePageController(screenClasses);\n  const frontClasses = useClassNames(\"front\", { hide });\n  return (\n    <FullScreen className={classes}>\n      <div className=\"inner\">\n        <div className={frontClasses}>\n          <Menu />\n          <MenuButton />\n          {front}\n        </div>\n        <div className=\"back\">{back}</div>\n      </div>\n    </FullScreen>\n  );\n});\n\ninterface Props {\n  back: ReactNode;\n  front: ReactNode;\n}\n","import { memo } from \"react\";\nimport type { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Loader = memo(\n  function Loader(_: PropLess) {\n    return (\n      <div className=\"loader\" aria-hidden>\n        <div>\n          <span />\n          <span />\n          <span />\n        </div>\n      </div>\n    );\n  },\n  () => true,\n);\n","import { memo } from \"react\";\nimport { Loader } from \"Components/Loader\";\nimport type { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const ScreenLoader = memo(\n  function ScreenLoader(_: PropLess) {\n    return (\n      <div className=\"screen-loader\">\n        <Loader />\n      </div>\n    );\n  },\n  () => true,\n);\n","import { Component } from \"react\";\nexport class ErrorBoundary extends Component {\n    state = { error: false };\n    static getDerivedStateFromError() {\n        return { error: true };\n    }\n    componentDidCatch(error, errorInfo) {\n        const { onError } = this.props;\n        if (onError) {\n            void onError(error, errorInfo);\n        }\n    }\n    render() {\n        const { children, fallback } = this.props;\n        if (this.state.error && fallback) {\n            return fallback;\n        }\n        return children;\n    }\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { lazy, Suspense } from \"react\";\nimport { ErrorBoundary } from \"./ErrorBoundary.js\";\nexport const CreateLazyComponent = ({ loader, onError, fallback = null, errorBoundary = null, }) => {\n    const Component = lazy(() => loader());\n    function LazyComponent(props) {\n        return (_jsx(ErrorBoundary, { fallback: errorBoundary, onError: onError, children: _jsx(Suspense, { fallback: fallback, children: _jsx(Component, { ...props }) }) }));\n    }\n    LazyComponent.preload = loader;\n    return LazyComponent;\n};\n","export var PriorityLevel;\n(function (PriorityLevel) {\n    PriorityLevel[PriorityLevel[\"Immediate\"] = 0] = \"Immediate\";\n    PriorityLevel[PriorityLevel[\"Background\"] = 1] = \"Background\";\n})(PriorityLevel || (PriorityLevel = {}));\n","export default \"__VITE_ASSET__QNDBHvqy__\"","export default \"__VITE_ASSET___Ud7FWdE__\"","export default \"__VITE_ASSET__$wYVkYx7__\"","export default \"__VITE_ASSET__0fUAPyEr__\"","export default \"__VITE_ASSET__bXVWGjHe__\"","export default \"__VITE_ASSET__cfVUO8an__\"","export default \"__VITE_ASSET__8oGZFr5___\"","export default \"__VITE_ASSET__CAFDT1fz__\"","export default \"__VITE_ASSET__FS7sfDTY__\"","export default \"__VITE_ASSET__aQNo4XGO__\"","export default \"__VITE_ASSET__zVsQ8NZo__\"","export default \"__VITE_ASSET__0tqEz7cZ__\"","import ATLLarge from \"Images/atl-large.jpg\";\nimport ATLSmall from \"Images/atl-small.jpg\";\nimport BackgroundLarge from \"Images/background-large.webp\";\nimport BackgroundSmall from \"Images/background-small.webp\";\nimport CartaLarge from \"Images/carta-large.jpg\";\nimport CartaSmall from \"Images/carta-small.jpg\";\nimport CommerceLarge from \"Images/gnocchi.jpg\";\nimport CommerceSmall from \"Images/gnocchi-small.jpg\";\nimport OpenSourceLarge from \"Images/openSource-large.webp\";\nimport OpenSourceSmall from \"Images/openSource-small.webp\";\nimport ReactLarge from \"Images/react-desktop2.jpg\";\nimport ReactSmall from \"Images/react-small.jpg\";\nimport EatLarge from \"Images/republic-large.jpg\";\nimport EatSmall from \"Images/republic-small.jpg\";\nimport SkedgeLarge from \"Images/skedge-desktop2.jpg\";\nimport SkedgeSmall from \"Images/skedge-small.jpg\";\nimport SVLarge from \"Images/sv-large.jpg\";\nimport SVSmall from \"Images/sv-small.jpg\";\nimport WordCloudsLarge from \"Images/wordClouds.png\";\nimport WordCloudsSmall from \"Images/wordClouds-small.png\";\nimport { Screen } from \"State/Screen\";\n\nexport class Preloader {\n  public static async initialize() {\n    performance.mark(\"preload-start\");\n    const loadFNs: Promise<any>[] = [];\n    const imgs = this.imageScope();\n    for (let i = 0; i < imgs.length; i++) {\n      const img = new Image();\n      loadFNs[i] = this.promisify(img);\n      img.src = imgs[i];\n    }\n    await Promise.all(loadFNs);\n    performance.measure(\"preload-end\");\n  }\n\n  public static loadBackground() {\n    const img = new Image();\n    const loader = this.promisify(img);\n    img.src = this.backgroundScope();\n    return loader;\n  }\n\n  public static screenScope() {\n    const { width } = Screen.getState();\n    if (width >= 670) {\n      return \"large\";\n    }\n    return \"small\";\n  }\n\n  public static imageScope() {\n    if (this.screenScope() === \"large\") {\n      return this.largeImages;\n    }\n    return this.smallImages;\n  }\n\n  private static promisify(image: HTMLImageElement) {\n    return new Promise(resolve => {\n      image.onload = resolve;\n      image.onerror = resolve;\n    });\n  }\n\n  private static backgroundScope() {\n    if (this.screenScope() === \"large\") {\n      return BackgroundLarge;\n    }\n    return BackgroundSmall;\n  }\n\n  private static readonly smallImages = [\n    ATLSmall,\n    CartaSmall,\n    WordCloudsSmall,\n    SkedgeSmall,\n    ReactSmall,\n    SVSmall,\n    CommerceSmall,\n    EatSmall,\n    OpenSourceSmall,\n  ];\n\n  private static readonly largeImages = [\n    ATLLarge,\n    CartaLarge,\n    WordCloudsLarge,\n    SkedgeLarge,\n    ReactLarge,\n    SVLarge,\n    CommerceLarge,\n    EatLarge,\n    OpenSourceLarge,\n  ];\n}\n","export default \"__VITE_ASSET__5XtP4GQx__\"","export default \"__VITE_ASSET__nSe8peRO__\"","export default \"__VITE_ASSET__RM5Z2pPK__\"","export default \"__VITE_ASSET__ZI67Fqt___\"","export default \"__VITE_ASSET__I7hzm$To__\"","export default \"__VITE_ASSET__CvoDTRpI__\"","export default \"__VITE_ASSET__nG5pwqW1__\"","export default \"__VITE_ASSET__PZEwhkvZ__\"","import type { CreateLazyComponent } from \"@figliolia/react-lazy\";\nimport type { LazyComponent } from \"@figliolia/react-lazy\";\nimport { Preloader } from \"Tools/Preloader\";\nimport type { PropLess } from \"Tools/Types\";\nimport type { ImagesPreloaded } from \"./types\";\n\nexport class Routing {\n  private static preloaded: ImagesPreloaded = {\n    small: false,\n    large: false,\n  };\n  private static foregroundTasks: Promise<any>[] = [];\n\n  public static registerForegroundTask(task: Promise<any>) {\n    this.foregroundTasks.push(task);\n  }\n\n  public static wrapLoader(\n    loader: ReturnType<typeof CreateLazyComponent<PropLess>>,\n  ) {\n    return () => {\n      return new Promise<LazyComponent<PropLess>>(resolve => {\n        const promises: [\n          component: Promise<LazyComponent<PropLess>>,\n          ...rest: Promise<void>[],\n        ] = [loader.preload(), ...this.foregroundTasks];\n        const scope = Preloader.screenScope();\n        if (!this.preloaded[scope]) {\n          this.preloaded[scope] = true;\n          promises.push(Preloader.initialize());\n        }\n        void Promise.all(promises).then(([component]) => {\n          this.foregroundTasks = [];\n          resolve(component);\n        });\n      });\n    };\n  }\n}\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\nimport { Routing } from \"./Routing\";\n\nexport const Routes = {\n  home: Routing.wrapLoader(\n    CreateLazyComponent({\n      loader: () => import(\"Pages/Home\"),\n    }),\n  ),\n  work: Routing.wrapLoader(\n    CreateLazyComponent({\n      loader: () => import(\"Pages/Work\"),\n    }),\n  ),\n  labs: Routing.wrapLoader(\n    CreateLazyComponent({\n      loader: () => import(\"Pages/Labs\"),\n    }),\n  ),\n  contact: Routing.wrapLoader(\n    CreateLazyComponent({\n      loader: () => import(\"Pages/Contact\"),\n    }),\n  ),\n  privacypolicy: Routing.wrapLoader(\n    CreateLazyComponent({\n      loader: () => import(\"Pages/PrivacyPolicy\"),\n    }),\n  ),\n} as const;\n","import { memo, useEffect } from \"react\";\nimport { useSetup } from \"@figliolia/galena-window\";\nimport { Router } from \"Components/Router\";\nimport { ScreenFlip } from \"Components/ScreenFlip\";\nimport { ScreenLoader } from \"Components/ScreenLoader\";\nimport { useResizeBody } from \"Hooks/useResizeBody\";\nimport { Routes, Routing } from \"Routing\";\nimport { PageController } from \"State/PageController\";\nimport { Screen as ScreenState } from \"State/Screen\";\nimport { Preloader } from \"Tools/Preloader\";\nimport { TaskQueue } from \"Tools/TaskQueue\";\nimport type { PropLess } from \"Tools/Types\";\n\n// @ts-ignore\nvoid window?.screen?.orientation?.lock?.(\"portrait\")?.catch(() => {});\nconst preloader = Preloader.loadBackground();\nRouting.registerForegroundTask(preloader);\n\nexport const App = memo(\n  function App(_: PropLess) {\n    useSetup(ScreenState);\n    useResizeBody();\n\n    useEffect(() => {\n      void preloader.then(() => {\n        PageController.show();\n      });\n      return () => {\n        TaskQueue.clearPendingTasks();\n      };\n    }, []);\n\n    return (\n      <ScreenFlip\n        back={<ScreenLoader />}\n        front={<Router defaultRoute=\"home\" routes={Routes} />}\n      />\n    );\n  },\n  () => true,\n);\n","import { useLayoutEffect } from \"react\";\nimport { selectDimensions, useScreen } from \"State/Screen\";\n\nexport const useResizeBody = () => {\n  const [width, height] = useScreen(selectDimensions);\n  useLayoutEffect(() => {\n    document.body.style.overflow = \"hidden\";\n    document.body.style.width = `${width}px`;\n    document.body.style.height = `${height}px`;\n  }, [width, height]);\n};\n","import { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\nimport \"Styles/reset.scss\";\n\nconst node = document.getElementById(\"root\");\nif (!node) {\n  throw new Error(\"what\");\n}\nconst root = createRoot(node);\nroot.render(<App />);\n"],"file":"assets/index-Dlps0tIA.js"}