{"version":3,"mappings":"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","names":["Experiment","title","description","image","video","scene","preload","preloadScene","preloadedScene","useRef","preloadingVideo","videoNode","preloadedVideo","setPreloadedVideo","useState","preloadLabsScene","useCallback","current","preloadLabsVideo","_b","_a","play","call","oncanplaythrough","onerror","src","onMouseEnter","onMouseOut","pause","onClick","Labs","activateScene","classes","useClassNames","ready","jsxRuntimeExports","jsxs","role","tabIndex","className","onTouchEnd","onMouseLeave","onTouchStart","children","jsx","ref","loop","playsInline","autoPlay","muted","SplitHeading","As","text","LabsText","memo","_","id","Scene","active","useLabs","sceneComponent","LazyCarScene","CreateLazyComponent","loader","__vitePreload","import","then","v","default","CarScene","LazyMagazineScene","MagazineScene","LazyNetflixScene","NetflixScene","RipplesScene","useRipples","useEffect","onLoad","FullScreen","LazySkateboardScene","API","index","onUnmount","callback","fn","useUnmount","destroy","Page","name","map","item","i","__spreadValues"],"sources":["../../node_modules/@figliolia/react-hooks/dist/mjs/Hooks/useUnmount.js","../../src/Components/Experiment/index.tsx","../../src/Components/LabsText/index.tsx","../../src/Components/Scene/index.tsx","../../src/3D/CarScene/Lazy.tsx","../../src/3D/MagazineScene/Lazy.tsx","../../src/3D/Netflix/Lazy.tsx","../../src/3D/RipplesScene/index.tsx","../../src/3D/SkateboardScene/Lazy.tsx","../../src/Pages/Labs/API.tsx","../../src/Images/car-scene.webp","../../src/Videos/car-scene.mp4","../../src/Images/skateboard-configurator.webp","../../src/Videos/skateboard-configurator.mp4","../../src/Images/netflix-content-transition.webp","../../src/Videos/netflix-content-transition.mp4","../../src/Images/ripples.webp","../../src/Videos/ripples.mp4","../../src/Images/magazine-slider.webp","../../src/Videos/magazine-slider.mp4","../../src/Pages/Labs/index.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nexport const useUnmount = (onUnmount) => {\n    const callback = useRef(onUnmount);\n    callback.current = onUnmount;\n    useEffect(() => {\n        const { current: fn } = callback;\n        return () => fn();\n    }, []);\n};\n","import { ReactNode, useCallback, useRef, useState } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { CreateLazyComponent } from \"@figliolia/react-lazy\";\nimport { SplitHeading } from \"Components/SplitHeading\";\nimport { Labs } from \"State/Labs\";\nimport \"./styles.scss\";\n\nexport const Experiment = ({\n  title,\n  description,\n  image,\n  video,\n  scene,\n  preload: preloadScene,\n}: Props) => {\n  const preloadedScene = useRef(false);\n  const preloadingVideo = useRef(false);\n  const videoNode = useRef<HTMLVideoElement>(null);\n  const [preloadedVideo, setPreloadedVideo] = useState(false);\n\n  const preloadLabsScene = useCallback(() => {\n    if (!preloadedScene.current) {\n      preloadedScene.current = true;\n      void preloadScene?.();\n    }\n  }, [preloadScene]);\n\n  const preloadLabsVideo = useCallback(() => {\n    if (preloadingVideo.current || !videoNode.current) {\n      return;\n    }\n    void preloadScene?.();\n    if (preloadedVideo) {\n      void videoNode.current?.play?.();\n      return;\n    }\n    preloadingVideo.current = true;\n    videoNode.current.oncanplaythrough = () => {\n      setPreloadedVideo(true);\n      preloadingVideo.current = false;\n      void videoNode.current?.play?.();\n    };\n    videoNode.current.onerror = () => {\n      preloadingVideo.current = false;\n    };\n    videoNode.current.src = video;\n  }, [preloadedVideo, video, preloadScene]);\n\n  const onMouseEnter = useCallback(() => {\n    preloadLabsScene();\n    preloadLabsVideo();\n  }, [preloadLabsScene, preloadLabsVideo]);\n\n  const onMouseOut = useCallback(() => {\n    videoNode?.current?.pause?.();\n  }, []);\n\n  const onClick = useCallback(() => {\n    Labs.activateScene(scene);\n  }, [scene]);\n\n  const classes = useClassNames(\"experiment\", { ready: preloadedVideo });\n\n  return (\n    <article\n      role=\"button\"\n      tabIndex={0}\n      onClick={onClick}\n      className={classes}\n      onTouchEnd={onMouseOut}\n      onMouseLeave={onMouseOut}\n      onMouseEnter={onMouseEnter}\n      onTouchStart={onMouseEnter}>\n      <div className=\"media\">\n        <video ref={videoNode} loop playsInline autoPlay muted src={video} />\n        <img src={image} />\n      </div>\n      <div className=\"meta\">\n        <SplitHeading As=\"h2\" text={title} />\n        <p>{description}</p>\n      </div>\n    </article>\n  );\n};\n\ninterface Props {\n  title: string;\n  description: string;\n  image: string;\n  video: string;\n  scene: ReactNode;\n  preload?: ReturnType<typeof CreateLazyComponent<any>>[\"preload\"];\n}\n","import { memo } from \"react\";\nimport { SplitHeading } from \"Components/SplitHeading\";\nimport type { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const LabsText = memo(\n  function LabsText(_: PropLess) {\n    return (\n      <div className=\"labs-text\">\n        <SplitHeading id=\"labsText\" text=\"Labs\" />\n      </div>\n    );\n  },\n  () => true,\n);\n","import { useClassNames } from \"@figliolia/classnames\";\nimport { ready, scene, useLabs } from \"State/Labs\";\nimport { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Scene = (_: PropLess) => {\n  const active = useLabs(ready);\n  const sceneComponent = useLabs(scene);\n  const classes = useClassNames(\"scene\", { active });\n  return <div className={classes}>{sceneComponent}</div>;\n};\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyCarScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.CarScene })),\n});\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyMagazineScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.MagazineScene })),\n});\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyNetflixScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.NetflixScene })),\n});\n","import { useEffect } from \"react\";\nimport { FullScreen } from \"Components/FullScreen\";\nimport { useRipples } from \"Hooks/useRipples\";\nimport { Labs } from \"State/Labs\";\nimport { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const RipplesScene = (_: PropLess) => {\n  const ref = useRipples();\n\n  useEffect(() => {\n    Labs.onLoad();\n  }, []);\n\n  return <FullScreen className=\"ripples-scene\" ref={ref} />;\n};\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazySkateboardScene = CreateLazyComponent({\n  loader: () => import(\"./index\"),\n});\n","import { LazyCarScene } from \"3D/CarScene/Lazy\";\nimport { LazyMagazineScene } from \"3D/MagazineScene/Lazy\";\nimport { LazyNetflixScene } from \"3D/Netflix/Lazy\";\nimport { RipplesScene } from \"3D/RipplesScene\";\nimport { LazySkateboardScene } from \"3D/SkateboardScene/Lazy\";\nimport CarImage from \"Images/car-scene.webp\";\nimport MagazineImage from \"Images/magazine-slider.webp\";\nimport NetflixImage from \"Images/netflix-content-transition.webp\";\nimport RipplesImage from \"Images/ripples.webp\";\nimport SkateboardImage from \"Images/skateboard-configurator.webp\";\nimport CarVid from \"Videos/car-scene.mp4\";\nimport MagazineVideo from \"Videos/magazine-slider.mp4\";\nimport NetflixVideo from \"Videos/netflix-content-transition.mp4\";\nimport RipplesVideo from \"Videos/ripples.mp4\";\nimport SkateboardVideo from \"Videos/skateboard-configurator.mp4\";\n\nexport const API = [\n  {\n    title: \"Car Scene\",\n    description:\n      \"A guided three.js exercise in animation, lighting, and visual effects using a C8 Corvette\",\n    image: CarImage,\n    video: CarVid,\n    scene: <LazyCarScene />,\n    preload: LazyCarScene.preload,\n  },\n  {\n    title: \"Skateboard Configurator\",\n    description:\n      \"A guided three.js tutorial building a CMS driven product configurator\",\n    image: SkateboardImage,\n    video: SkateboardVideo,\n    scene: <LazySkateboardScene />,\n    preload: LazySkateboardScene.preload,\n  },\n  {\n    title: \"Netflix Design Concept\",\n    description:\n      \"A webGL experiment replacing all media on the netflix home page with WebGL shaders\",\n    image: NetflixImage,\n    video: NetflixVideo,\n    scene: <LazyNetflixScene />,\n    preload: LazyNetflixScene.preload,\n  },\n  {\n    title: \"WebGL Ripples\",\n    description:\n      \"A dependency-free webGL shader library that brings water ripples to ordinary background images\",\n    image: RipplesImage,\n    video: RipplesVideo,\n    scene: <RipplesScene />,\n  },\n  {\n    title: \"Magazine Slider\",\n    description: \"A fun image slider originally designed by Wassim Samad\",\n    image: MagazineImage,\n    video: MagazineVideo,\n    scene: <LazyMagazineScene />,\n    preload: LazyMagazineScene.preload,\n  },\n] as const;\n","export default \"__VITE_ASSET___iOh_$Ui__\"","export default \"__VITE_ASSET__USvigzXn__\"","export default \"__VITE_ASSET__Ggska8ZM__\"","export default \"__VITE_ASSET__xiN_Pmhz__\"","export default \"__VITE_ASSET__8MBbvqIB__\"","export default \"__VITE_ASSET__ptVW13$8__\"","export default \"__VITE_ASSET__YzqEpbLs__\"","export default \"__VITE_ASSET__9x6oJLu6__\"","export default \"__VITE_ASSET__HpfhwPzX__\"","export default \"__VITE_ASSET__4QmNIuJ8__\"","import { memo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { useUnmount } from \"@figliolia/react-hooks\";\nimport { Experiment } from \"Components/Experiment\";\nimport { LabsText } from \"Components/LabsText\";\nimport { Page } from \"Components/Page\";\nimport { Scene } from \"Components/Scene\";\nimport { useMenuButtonDelay } from \"Hooks/useMenuButtonDelay\";\nimport { Labs, ready, useLabs } from \"State/Labs\";\nimport type { PropLess } from \"Tools/Types\";\nimport { API } from \"./API\";\nimport \"./styles.scss\";\n\nexport default memo(\n  function LabsPage(_: PropLess) {\n    useMenuButtonDelay();\n    const active = useLabs(ready);\n\n    useUnmount(() => {\n      Labs.destroy();\n    });\n\n    const classes = useClassNames(\"labs\", { \"no-scroll\": active });\n\n    return (\n      <Page name={classes}>\n        <div className=\"heading\">\n          <LabsText />\n        </div>\n        <div className=\"experiments\">\n          {API.map((item, i) => (\n            <Experiment key={i} {...item} />\n          ))}\n        </div>\n        <Scene />\n      </Page>\n    );\n  },\n  () => false,\n);\n"],"file":"assets/index-C2Ttjq50.js"}