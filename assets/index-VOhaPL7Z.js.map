{"version":3,"file":"index-VOhaPL7Z.js","sources":["../../node_modules/@react-three/drei/helpers/constants.js","../../node_modules/@react-three/drei/core/CubeCamera.js","../../node_modules/@react-three/drei/materials/ConvolutionMaterial.js","../../node_modules/@react-three/drei/materials/BlurPass.js","../../node_modules/@react-three/drei/materials/MeshReflectorMaterial.js","../../node_modules/@react-three/drei/core/MeshReflectorMaterial.js","../../src/3D/CarScene/Boxes/Box.tsx","../../src/3D/CarScene/Boxes/index.tsx","../../src/Tools/Scenes.ts","../../src/3D/CarScene/Resources/corvette/scene.gltf","../../src/3D/CarScene/Corvette/index.tsx","../../src/3D/CarScene/Resources/grid-texture.png","../../src/3D/CarScene/Grid/index.tsx","../../src/3D/CarScene/Resources/ground-normal.jpg","../../src/3D/CarScene/Resources/ground-roughness.jpg","../../src/3D/CarScene/Ground/index.tsx","../../src/3D/CarScene/Rings/index.tsx","../../src/3D/CarScene/Scene.tsx","../../src/3D/CarScene/index.tsx"],"sourcesContent":["import { REVISION } from 'three';\n\nconst getVersion = () => parseInt(REVISION.replace(/\\D+/g, ''));\nconst version = /* @__PURE__ */getVersion();\n\nexport { version };\n","import * as THREE from 'three';\nimport { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useMemo, useEffect } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction useCubeCamera({\n  resolution = 256,\n  near = 0.1,\n  far = 1000,\n  envMap,\n  fog\n} = {}) {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const fbo = useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  useEffect(() => {\n    return () => {\n      fbo.dispose();\n    };\n  }, [fbo]);\n  const camera = useMemo(() => new THREE.CubeCamera(near, far, fbo), [near, far, fbo]);\n  let originalFog;\n  let originalBackground;\n  const update = React.useCallback(() => {\n    originalFog = scene.fog;\n    originalBackground = scene.background;\n    scene.background = envMap || originalBackground;\n    scene.fog = fog || originalFog;\n    camera.update(gl, scene);\n    scene.fog = originalFog;\n    scene.background = originalBackground;\n  }, [gl, scene, camera]);\n  return {\n    fbo,\n    camera,\n    update\n  };\n}\nfunction CubeCamera({\n  children,\n  frames = Infinity,\n  resolution,\n  near,\n  far,\n  envMap,\n  fog,\n  ...props\n}) {\n  const ref = React.useRef(null);\n  const {\n    fbo,\n    camera,\n    update\n  } = useCubeCamera({\n    resolution,\n    near,\n    far,\n    envMap,\n    fog\n  });\n  let count = 0;\n  useFrame(() => {\n    if (ref.current && (frames === Infinity || count < frames)) {\n      ref.current.visible = false;\n      update();\n      ref.current.visible = true;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: camera\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children == null ? void 0 : children(fbo.texture)));\n}\n\nexport { CubeCamera, useCubeCamera };\n","import * as THREE from 'three';\nimport { version } from '../helpers/constants.js';\n\nclass ConvolutionMaterial extends THREE.ShaderMaterial {\n  constructor(texelSize = new THREE.Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new THREE.Uniform(null),\n        depthBuffer: new THREE.Uniform(null),\n        resolution: new THREE.Uniform(new THREE.Vector2()),\n        texelSize: new THREE.Uniform(new THREE.Vector2()),\n        halfTexelSize: new THREE.Uniform(new THREE.Vector2()),\n        kernel: new THREE.Uniform(0.0),\n        scale: new THREE.Uniform(1.0),\n        cameraNear: new THREE.Uniform(0.0),\n        cameraFar: new THREE.Uniform(1.0),\n        minDepthThreshold: new THREE.Uniform(0.0),\n        maxDepthThreshold: new THREE.Uniform(1.0),\n        depthScale: new THREE.Uniform(0.0),\n        depthToBlurRatioBias: new THREE.Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: THREE.NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n}\n\nexport { ConvolutionMaterial };\n","import { WebGLRenderTarget, LinearFilter, HalfFloatType, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      type: HalfFloatType\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l;\n    // Apply the multi-pass blur.\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n}\n\nexport { BlurPass };\n","import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n}\n\nexport { MeshReflectorMaterial };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, LinearFilter, HalfFloatType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nconst MeshReflectorMaterial = /* @__PURE__ */React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  reflectorOffset = 0,\n  ...props\n}, ref) => {\n  extend({\n    MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n  });\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const blurX = blur[0];\n  const blurY = blur[1];\n  const materialRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => materialRef.current, []);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null || (_materialRef$current = _materialRef$current.__r3f.parent) == null ? void 0 : _materialRef$current.object);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n    // Avoid rendering when reflector is facing away\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n    // Update the texture matrix\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld);\n    // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n    // Calculate the scaled plane vector\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));\n    // Replacing the third row of the projection matrix\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blurX,\n      height: blurY,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blurX, blurY, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null || (_materialRef$current2 = _materialRef$current2.__r3f.parent) == null ? void 0 : _materialRef$current2.object);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\"\n    // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: materialRef\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n","import { useMemo, useRef } from \"react\";\nimport { Mesh, Vector3 } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\n\nexport const Box = ({ color }: Props) => {\n  const time = useRef(0);\n  const box = useRef<Mesh>(null);\n  const position = useRef(positionBox());\n  const xSpeed = useMemo(() => Math.random(), []);\n  const ySpeed = useMemo(() => Math.random(), []);\n  const scale = useMemo(() => Math.pow(Math.random(), 2) * 0.5 + 0.05, []);\n\n  useFrame((_, delta) => {\n    time.current += delta * 1.2;\n    if (!box.current) {\n      return;\n    }\n    const { x, y, z } = position.current;\n    const nextZ = z - time.current;\n    if (nextZ < -10) {\n      position.current = positionBox(Math.random() * 10 + 10);\n      time.current = 0;\n    }\n    box.current.position.set(x, y, nextZ);\n    box.current.rotation.x += xSpeed * delta;\n    box.current.rotation.y += ySpeed * delta;\n  });\n\n  return (\n    <mesh castShadow ref={box} scale={scale}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={color} envMapIntensity={0.15} />\n    </mesh>\n  );\n};\n\nexport type BoxColor = [r: number, g: number, b: number];\n\ninterface Props {\n  color: BoxColor;\n}\n\nfunction positionBox(z: number = (Math.random() * 2 - 1) * 15) {\n  const position = new Vector3(\n    (Math.random() * 2 - 1) * 3,\n    Math.max(0.5, Math.random() * 2.5 + 0.1),\n    z,\n  );\n  if (position.x < 0) {\n    position.x -= 2.5;\n  } else if (position.x > 0) {\n    position.x += 2.5;\n  }\n  return position;\n}\n","import { Fragment, useMemo } from \"react\";\nimport { Box, BoxColor } from \"./Box\";\n\nconst OFF_RED: BoxColor = [0.4, 0.1, 0.1];\nconst OFF_BLUE: BoxColor = [0.05, 0.15, 0.4];\n\nexport const Boxes = ({ total = 100 }: Props) => {\n  const boxes = useMemo(() => new Array<null>(total).fill(null), [total]);\n  return (\n    <Fragment>\n      {boxes.map((_, i) => (\n        <Box key={i} color={i % 2 === 0 ? OFF_RED : OFF_BLUE} />\n      ))}\n    </Fragment>\n  );\n};\n\ninterface Props {\n  total?: number;\n}\n","import { Group, Material, Mesh, MeshStandardMaterial, Object3D } from \"three\";\n\nexport class Scenes {\n  public static forEachMesh(scene: Group, callback: (mesh: Mesh) => void) {\n    scene.traverse(object => {\n      if (this.isMesh(object)) {\n        callback(object);\n      }\n    });\n  }\n\n  public static forEachMaterial(\n    materials: Material | Material[],\n    fn: (material: MeshStandardMaterial) => void,\n  ) {\n    const iterable = Array.isArray(materials) ? materials : [materials];\n    for (const material of iterable) {\n      fn(material as MeshStandardMaterial);\n    }\n  }\n\n  private static isMesh(object: Object3D): object is Mesh {\n    return object instanceof Mesh;\n  }\n}\n","export default \"__VITE_ASSET__rdDQKLP9__\"","import { useEffect, useState } from \"react\";\nimport { Mesh } from \"three\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Scenes } from \"Tools/Scenes\";\nimport { PropLess } from \"Tools/Types\";\nimport Scene from \"../Resources/corvette/scene.gltf\";\n\nconst ROTATION_BLACK_LIST = [\n  \"polySurface778\",\n  \"polySurface491\",\n  \"polySurface33\",\n  \"polySurface262\",\n];\n\nexport const Corvette = (_: PropLess) => {\n  const { scene } = useGLTF(Scene);\n  const [wheelMeshes, setWheelMeshes] = useState<Mesh[]>([]);\n\n  useEffect(() => {\n    const wheels: Mesh[] = [];\n    scene.scale.set(110, 110, 110);\n    scene.position.set(0, 0, 0);\n    Scenes.forEachMesh(scene, mesh => {\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      Scenes.forEachMaterial(mesh.material, material => {\n        material.envMapIntensity = 20;\n      });\n      if (\n        mesh.name.includes(\"Wheel\") &&\n        !ROTATION_BLACK_LIST.some(n => mesh.name.startsWith(n))\n      ) {\n        wheels.push(mesh);\n      }\n    });\n    setWheelMeshes(wheels);\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    const movement = clock.getElapsedTime() * 2;\n    for (const mesh of wheelMeshes) {\n      mesh.rotation.x = movement;\n    }\n  });\n\n  return <primitive object={scene} />;\n};\n\nuseGLTF.preload(Scene);\n","export default \"__VITE_ASSET__zLLbauW2__\"","import { useCallback } from \"react\";\nimport { Texture } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Textures } from \"Tools/Textures\";\nimport { PropLess } from \"Tools/Types\";\nimport gridTexture from \"../Resources/grid-texture.png\";\n\nexport const Grid = (_: PropLess) => {\n  const onLoad = useCallback((texture: Texture) => {\n    Textures.wrap(texture).repeat(texture, 30).rerender(texture);\n    texture.anisotropy = 4;\n  }, []);\n\n  const grid = useTexture(gridTexture, onLoad);\n\n  useFrame(({ clock }) => {\n    grid.offset.set(0, -clock.getElapsedTime() * 0.68);\n  });\n\n  return (\n    <mesh rotation-x={-Math.PI * 0.5} position={[0, 0.015, 0]}>\n      <planeGeometry args={[35, 35]} />\n      <meshBasicMaterial\n        transparent\n        map={grid}\n        alphaMap={grid}\n        opacity={0.25}\n        color={[1, 1, 1]}\n      />\n    </mesh>\n  );\n};\n\nuseTexture.preload(gridTexture);\n","export default \"__VITE_ASSET__sI66FgXy__\"","export default \"__VITE_ASSET__rs6ThNhK__\"","import { useCallback } from \"react\";\nimport { Texture } from \"three\";\nimport { MeshReflectorMaterial, useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Textures } from \"Tools/Textures\";\nimport { PropLess } from \"Tools/Types\";\nimport GroundNormal from \"../Resources/ground-normal.jpg\";\nimport GroundRoughness from \"../Resources/ground-roughness.jpg\";\n\nexport const Ground = (_: PropLess) => {\n  const onNormalLoad = useCallback((texture: Texture) => {\n    return Textures.wrap(texture)\n      .repeat(texture, 5)\n      .colorless(texture)\n      .rerender(texture);\n  }, []);\n\n  const onRoughnessLoad = useCallback((texture: Texture) => {\n    return Textures.wrap(texture).repeat(texture, 5).rerender(texture);\n  }, []);\n\n  const normals = useTexture(GroundNormal, onNormalLoad);\n  const roughness = useTexture(GroundRoughness, onRoughnessLoad);\n\n  useFrame(({ clock }) => {\n    const movement = clock.getElapsedTime() * -0.128;\n    normals.offset.set(0, movement);\n    roughness.offset.set(0, movement);\n  });\n\n  return (\n    <mesh castShadow receiveShadow rotation-x={-Math.PI * 0.5}>\n      <planeGeometry args={[30, 30]} />\n      <MeshReflectorMaterial\n        dithering\n        normalMap={normals}\n        roughnessMap={roughness}\n        envMapIntensity={0}\n        normalScale={[1, 1]}\n        color={[0.015, 0.015, 0.015]}\n        roughness={0.7}\n        blur={[1000, 400]} // Blur ground reflections (width, heigt), 0 skips blur\n        mixBlur={30} // How much blur mixes with surface roughness (default = 1)\n        mixStrength={80} // Strength of the reflections\n        mixContrast={1} // Contrast of the reflections\n        resolution={1024} // Off-buffer resolution, lower=faster, higher=better quality, slower\n        mirror={0} // Mirror environment, 0 = texture colors, 1 = pick up env colors\n        depthScale={0.01} // Scale the depth factor (0 = no depth, default = 0)\n        minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\n        maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\n        depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n        reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n      />\n    </mesh>\n  );\n};\n\nuseTexture.preload([GroundNormal, GroundRoughness]);\n","import { Fragment, useCallback, useMemo, useRef } from \"react\";\nimport { Color, Mesh } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Scenes } from \"Tools/Scenes\";\n\nconst RED = new Color(6, 0.16, 0.7).multiplyScalar(0.5);\nconst BLUE = new Color(0.1, 0.7, 3).multiplyScalar(0.5);\n\nexport const Rings = ({ total = 14 }: Props) => {\n  const nodes = useRef<Mesh[]>([]);\n  const color = useMemo(() => [0, 0, 0] as const, []);\n  const position = useMemo(() => [0, 0, 0] as const, []);\n  const ringEmission = useMemo(() => [0.5, 0.5, 0.5] as const, []);\n  const ringArgs = useMemo(() => [3.35, 0.05, 16, 100] as const, []);\n  const rings = useMemo(() => new Array<null>(total).fill(null), [total]);\n\n  const cacheReference = useCallback((index: number) => {\n    return (reference: Mesh) => {\n      nodes.current[index] = reference;\n    };\n  }, []);\n\n  useFrame(({ clock }) => {\n    let pointer = -1;\n    const time = clock.getElapsedTime();\n    for (const mesh of nodes.current) {\n      pointer++;\n      if (!mesh) {\n        continue;\n      }\n      const Z = (pointer - total / 2) * 3.5 + ((time * 0.4) % 3.5) * 2;\n      mesh.position.set(0, 0, -Z);\n      const distance = Math.abs(Z);\n      const scale = 1 - distance * 0.04;\n      mesh.scale.set(scale, scale, scale);\n      const color = (pointer % 2 === 0 ? BLUE : RED).clone();\n      let colorScale = 1;\n      if (distance > 2) {\n        colorScale = 1 - (Math.min(12, distance) - 2) / 10;\n      }\n      colorScale *= 0.5;\n      color.multiplyScalar(colorScale);\n      Scenes.forEachMaterial(mesh.material, material => {\n        material.emissive = color;\n      });\n    }\n  });\n\n  return (\n    <Fragment>\n      {rings.map((_, i) => {\n        const ref = cacheReference(i);\n        return (\n          <mesh ref={ref} key={i} castShadow receiveShadow position={position}>\n            <torusGeometry args={ringArgs} />\n            <meshStandardMaterial emissive={ringEmission} color={color} />\n          </mesh>\n        );\n      })}\n    </Fragment>\n  );\n};\n\ninterface Props {\n  total?: number;\n}\n","import { Fragment, useEffect, useMemo } from \"react\";\nimport {\n  CubeCamera,\n  Environment,\n  OrbitControls,\n  PerspectiveCamera,\n} from \"@react-three/drei\";\nimport { useThree } from \"@react-three/fiber\";\nimport { selectDimensions, useScreen } from \"State/Screen\";\nimport { PropLess } from \"Tools/Types\";\nimport { Boxes } from \"./Boxes\";\nimport { Corvette } from \"./Corvette\";\nimport { Grid } from \"./Grid\";\nimport { Ground } from \"./Ground\";\nimport { Rings } from \"./Rings\";\n\nexport const Scene = (_: PropLess) => {\n  const camera = useThree(t => t.camera);\n  const [width, height] = useScreen(selectDimensions);\n  const maxDimension = useMemo(() => Math.max(width, height), [width, height]);\n\n  useEffect(() => {\n    camera.position.x = Math.max(5, 50 - maxDimension / 20);\n  }, [maxDimension, camera]);\n\n  return (\n    <Fragment>\n      <OrbitControls\n        target={[0, 0.35, 0]}\n        maxPolarAngle={1.45}\n        maxZoom={-5.0}\n        minDistance={5}\n        maxDistance={50}\n      />\n      <PerspectiveCamera makeDefault fov={50} position={[3, 2, 5]} />\n      <color args={[0, 0, 0]} attach=\"background\" />\n      <spotLight\n        castShadow\n        color={[1, 0.25, 0.7]}\n        intensity={10.5}\n        angle={0.6}\n        decay={0.5}\n        penumbra={0.5}\n        position={[5, 5, 0]}\n        shadow-bias={-0.0001}\n      />\n      <spotLight\n        castShadow\n        color={[0.14, 0.5, 1]}\n        intensity={20}\n        angle={0.6}\n        decay={0.5}\n        penumbra={0.5}\n        position={[-5, 5, 0]}\n        shadow-bias={-0.0001}\n      />\n      <CubeCamera resolution={256} frames={Infinity}>\n        {texture => (\n          <Fragment>\n            <Environment map={texture} environmentIntensity={15} />\n            <Corvette />\n          </Fragment>\n        )}\n      </CubeCamera>\n      <Rings />\n      <Boxes />\n      <Grid />\n      <Ground />\n    </Fragment>\n  );\n};\n","import { LabsScene } from \"Components/LabsScene\";\nimport { PropLess } from \"Tools/Types\";\nimport { Scene } from \"./Scene\";\n\nexport const CarScene = (_: PropLess) => {\n  return (\n    <LabsScene>\n      <Scene />\n    </LabsScene>\n  );\n};\n"],"names":["version","parseInt","REVISION","replace","getVersion","CubeCamera","_a","_b","children","frames","Infinity","resolution","near","far","envMap","fog","props","__objRest","ref","React.useRef","fbo","camera","update","gl","useThree","scene","useMemo","WebGLCubeRenderTarget","texture","type","HalfFloatType","useEffect","dispose","THREE.CubeCamera","originalFog","originalBackground","React.useCallback","background","useCubeCamera","count","useFrame","current","visible","createElement","React.createElement","object","reactExports","ConvolutionMaterial","THREE.ShaderMaterial","constructor","texelSize","THREE.Vector2","super","uniforms","inputBuffer","THREE.Uniform","depthBuffer","halfTexelSize","kernel","scale","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","fragmentShader","vertexShader","blending","THREE.NoBlending","depthWrite","depthTest","this","toneMapped","setTexelSize","x","y","Float32Array","value","set","multiplyScalar","setResolution","copy","BlurPass","width","height","renderToScreen","renderTargetA","WebGLRenderTarget","minFilter","LinearFilter","magFilter","stencilBuffer","renderTargetB","clone","convolutionMaterial","Vector2","Scene","Camera","defines","USE_DEPTH","vertices","uvs","geometry","BufferGeometry","setAttribute","BufferAttribute","screen","Mesh","frustumCulled","add","render","renderer","outputBuffer","material","depthTexture","destRT","i","l","lastRT","length","setRenderTarget","MeshStandardMaterial","parameters","_tDepth","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","onBeforeCompile","shader","_shader$defines","USE_UV","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","distortion","mixContrast","v","MeshReflectorMaterial","React.forwardRef","forwardRef","_c","_d","blur","reflectorOffset","extend","MeshReflectorMaterialImpl","MeshReflectorMaterial$1","Array","isArray","blurX","blurY","materialRef","React.useImperativeHandle","reflectorPlane","React.useState","Plane","normal","Vector3","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","target","q","virtualCamera","PerspectiveCamera","beforeRender","_materialRef$current","parent","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","position","up","lookAt","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","z","constant","Math","sign","elements","w","fbo1","fbo2","blurpass","reflectorProps","React.useMemo","DepthTexture","format","DepthFormat","UnsignedShortType","_materialRef$current2","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","state","buffers","depth","setMask","autoClear","clear","_extends","attach","key","Box","color","time","useRef","box","positionBox","xSpeed","random","ySpeed","pow","_","delta","nextZ","rotation","castShadow","jsx","args","envMapIntensity","max","OFF_RED","OFF_BLUE","Boxes","total","boxes","fill","Fragment","map","Scenes","forEachMesh","callback","traverse","isMesh","forEachMaterial","materials","fn","iterable","Scene$1","ROTATION_BLACK_LIST","Corvette","useGLTF","wheelMeshes","setWheelMeshes","useState","wheels","mesh","receiveShadow","name","includes","some","n","startsWith","push","clock","movement","getElapsedTime","preload","gridTexture","Grid","onLoad","useCallback","Textures","wrap","repeat","rerender","anisotropy","grid","useTexture","offset","jsxRuntimeExports","jsxs","PI","transparent","alphaMap","opacity","GroundNormal","GroundRoughness","Ground","onNormalLoad","colorless","onRoughnessLoad","normals","roughness","dithering","normalMap","roughnessMap","normalScale","RED","Color","BLUE","Rings","nodes","ringEmission","ringArgs","rings","cacheReference","index","reference","pointer","Z","distance","abs","colorScale","min","emissive","t","useScreen","selectDimensions","maxDimension","OrbitControls","maxPolarAngle","maxZoom","minDistance","maxDistance","makeDefault","fov","intensity","angle","decay","penumbra","Environment","environmentIntensity","CarScene","LabsScene"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}