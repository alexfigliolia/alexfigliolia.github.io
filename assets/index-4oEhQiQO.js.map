{"version":3,"file":"index-4oEhQiQO.js","sources":["../../node_modules/@figliolia/ripples/dist/mjs/Animation.js","../../node_modules/@figliolia/ripples/dist/mjs/ImageLoader.js","../../node_modules/@figliolia/ripples/dist/mjs/Options.js","../../node_modules/@figliolia/ripples/dist/mjs/Shaders.js","../../node_modules/@figliolia/ripples/dist/mjs/StyleCache.js","../../node_modules/@figliolia/ripples/dist/mjs/Textures.js","../../node_modules/@figliolia/ripples/dist/mjs/BrowserSupport.js","../../node_modules/@figliolia/ripples/dist/mjs/WebGL.js","../../node_modules/@figliolia/ripples/dist/mjs/Ripples.js","../../src/Hooks/useRipples.ts","../../src/Components/Page/index.tsx"],"sourcesContent":["import { Subscriptable } from \"@figliolia/event-emitter\";\nexport class Animations {\n    static frame = null;\n    static callstack = new Subscriptable();\n    static register(callback) {\n        const ID = this.callstack.register(callback);\n        void Promise.resolve().then(() => {\n            this.nextFrame();\n        });\n        return ID;\n    }\n    static delete(ID) {\n        return this.callstack.remove(ID);\n    }\n    static nextFrame() {\n        if (this.frame) {\n            return;\n        }\n        this.animate();\n    }\n    static animate() {\n        this.frame = requestAnimationFrame(() => {\n            if (!this.callstack.length) {\n                return this.closeLoop();\n            }\n            this.callstack.execute();\n            this.animate();\n        });\n    }\n    static closeLoop() {\n        if (this.frame) {\n            cancelAnimationFrame(this.frame);\n            this.frame = null;\n        }\n    }\n}\n","export class ImageLoader {\n    Textures;\n    GL;\n    constructor(Textures) {\n        this.Textures = Textures;\n        this.GL = this.Textures.GL;\n    }\n    load(src, crossOrigin) {\n        const image = new Image();\n        return new Promise((resolve, reject) => {\n            image.onload = () => {\n                this.textureIze(image);\n                resolve(image);\n            };\n            image.onerror = () => {\n                this.Textures.setTransparent();\n                reject();\n            };\n            image.crossOrigin = this.isDataUri(src) ? null : crossOrigin;\n            image.src = src;\n        });\n    }\n    textureIze(image) {\n        const wrapping = this.isPowerOfTwo(image.width) && this.isPowerOfTwo(image.height)\n            ? this.GL.REPEAT\n            : this.GL.CLAMP_TO_EDGE;\n        this.GL.bindTexture(this.GL.TEXTURE_2D, this.Textures.backgroundTexture);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_S, wrapping);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_T, wrapping);\n        this.GL.texImage2D(this.GL.TEXTURE_2D, 0, this.GL.RGBA, this.GL.RGBA, this.GL.UNSIGNED_BYTE, image);\n    }\n    isDataUri(url) {\n        return url.match(/^data:/);\n    }\n    isPowerOfTwo(x) {\n        return (x & (x - 1)) == 0;\n    }\n}\n","export class Options {\n    resolution;\n    dropRadius;\n    perturbance;\n    crossOrigin;\n    interactive;\n    imageUrl;\n    onInitialized;\n    constructor(options) {\n        const configuration = this.configure(options);\n        this.imageUrl = configuration.imageUrl;\n        this.dropRadius = configuration.dropRadius;\n        this.interactive = configuration.interactive;\n        this.perturbance = configuration.perturbance;\n        this.crossOrigin = configuration.crossOrigin;\n        this.onInitialized = configuration.onInitialized;\n        this.resolution = this.extractResolution(configuration.resolution);\n    }\n    static defaults = {\n        imageUrl: null,\n        resolution: 512,\n        dropRadius: 10,\n        perturbance: 0.02,\n        interactive: true,\n        crossOrigin: \"\",\n    };\n    configure(options) {\n        return Object.assign({}, Options.defaults, options);\n    }\n    extractResolution(resolution) {\n        if (typeof resolution === \"number\") {\n            return resolution;\n        }\n        if (typeof window.devicePixelRatio === \"number\") {\n            return Math.max(Options.defaults.resolution, 256 * window.devicePixelRatio);\n        }\n        return Options.defaults.resolution;\n    }\n    extractUrl(value) {\n        const urlMatch = /url\\([\"']?([^\"']*)[\"']?\\)/.exec(value);\n        if (urlMatch == null) {\n            return null;\n        }\n        return urlMatch[1];\n    }\n    isDataUri(url) {\n        return url.match(/^data:/);\n    }\n}\n","export class Shaders {\n    dropProgram;\n    updateProgram;\n    renderProgram;\n    GL;\n    textureDelta;\n    constructor(GL, resolution) {\n        this.GL = GL;\n        this.textureDelta = new Float32Array([1 / resolution, 1 / resolution]);\n        this.dropProgram = this.compileDrop();\n        this.updateProgram = this.compileUpdate();\n        this.GL.uniform2fv(this.updateProgram.locations.delta, this.textureDelta);\n        this.renderProgram = this.compileRender();\n        this.GL.uniform2fv(this.renderProgram.locations.delta, this.textureDelta);\n    }\n    drop(position, radius, strength) {\n        if (this.dropProgram) {\n            this.GL.useProgram(this.dropProgram.id);\n            this.GL.uniform2fv(this.dropProgram.locations.center, position);\n            this.GL.uniform1f(this.dropProgram.locations.radius, radius);\n            this.GL.uniform1f(this.dropProgram.locations.strength, strength);\n        }\n    }\n    render(perturbance) {\n        this.GL.uniform1f(this.renderProgram.locations.perturbance, perturbance);\n        this.GL.uniform2fv(this.renderProgram.locations.topLeft, \n        // @ts-ignore\n        this.renderProgram.uniforms.topLeft);\n        this.GL.uniform2fv(this.renderProgram.locations.bottomRight, \n        // @ts-ignore\n        this.renderProgram.uniforms.bottomRight);\n        this.GL.uniform2fv(this.renderProgram.locations.containerRatio, \n        // @ts-ignore\n        this.renderProgram.uniforms.containerRatio);\n        this.GL.uniform1i(this.renderProgram.locations.samplerBackground, 0);\n        this.GL.uniform1i(this.renderProgram.locations.samplerRipples, 1);\n    }\n    compileDrop() {\n        return this.createProgram(Shaders.VERTEX_SHADER, Shaders.DROP_PROGRAM);\n    }\n    compileUpdate() {\n        return this.createProgram(Shaders.VERTEX_SHADER, Shaders.UPDATE_PROGRAM);\n    }\n    compileRender() {\n        return this.createProgram(Shaders.RENDER_BACKGROUND_PROGRAM, Shaders.RENDER_RIPPLE_PROGRAM);\n    }\n    createProgram(vertexSource, fragmentSource) {\n        if (!this.GL) {\n            throw new Error(\"Cannot initialize shaders without a rendering context\");\n        }\n        const program = { id: this.GL.createProgram() };\n        this.GL.attachShader(program.id, this.compileSource(this.GL.VERTEX_SHADER, vertexSource));\n        this.GL.attachShader(program.id, this.compileSource(this.GL.FRAGMENT_SHADER, fragmentSource));\n        this.GL.linkProgram(program.id);\n        if (!this.GL.getProgramParameter(program.id, this.GL.LINK_STATUS)) {\n            throw new Error(\"link error: \" + this.GL.getProgramInfoLog(program.id));\n        }\n        program.uniforms = {};\n        program.locations = {};\n        this.GL.useProgram(program.id);\n        this.GL.enableVertexAttribArray(0);\n        let match, name;\n        const regex = /uniform (\\w+) (\\w+)/g;\n        const shaderCode = vertexSource + fragmentSource;\n        while ((match = regex.exec(shaderCode)) != null) {\n            name = match[2];\n            program.locations[name] = this.GL.getUniformLocation(program.id, name);\n        }\n        return program;\n    }\n    compileSource(type, source) {\n        if (!this.GL) {\n            throw new Error(\"Cannot initialize shaders without a rendering context\");\n        }\n        const shader = this.GL.createShader(type);\n        this.GL.shaderSource(shader, source);\n        this.GL.compileShader(shader);\n        if (!this.GL.getShaderParameter(shader, this.GL.COMPILE_STATUS)) {\n            throw new Error(\"compile error: \" + this.GL.getShaderInfoLog(shader));\n        }\n        return shader;\n    }\n    static VERTEX_SHADER = [\n        \"attribute vec2 vertex;\",\n        \"varying vec2 coord;\",\n        \"void main() {\",\n        \"coord = vertex * 0.5 + 0.5;\",\n        \"gl_Position = vec4(vertex, 0.0, 1.0);\",\n        \"}\",\n    ].join(\"\\n\");\n    static DROP_PROGRAM = [\n        \"precision highp float;\",\n        \"const float PI = 3.141592653589793;\",\n        \"uniform sampler2D texture;\",\n        \"uniform vec2 center;\",\n        \"uniform float radius;\",\n        \"uniform float strength;\",\n        \"varying vec2 coord;\",\n        \"void main() {\",\n        \"vec4 info = texture2D(texture, coord);\",\n        \"float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - coord) / radius);\",\n        \"drop = 0.5 - cos(drop * PI) * 0.5;\",\n        \"info.r += drop * strength;\",\n        \"gl_FragColor = info;\",\n        \"}\",\n    ].join(\"\\n\");\n    static UPDATE_PROGRAM = [\n        \"precision highp float;\",\n        \"uniform sampler2D texture;\",\n        \"uniform vec2 delta;\",\n        \"varying vec2 coord;\",\n        \"void main() {\",\n        \"vec4 info = texture2D(texture, coord);\",\n        \"vec2 dx = vec2(delta.x, 0.0);\",\n        \"vec2 dy = vec2(0.0, delta.y);\",\n        \"float average = (\",\n        \"texture2D(texture, coord - dx).r +\",\n        \"texture2D(texture, coord - dy).r +\",\n        \"texture2D(texture, coord + dx).r +\",\n        \"texture2D(texture, coord + dy).r\",\n        \") * 0.25;\",\n        \"info.g += (average - info.r) * 2.0;\",\n        \"info.g *= 0.995;\",\n        \"info.r += info.g;\",\n        \"gl_FragColor = info;\",\n        \"}\",\n    ].join(\"\\n\");\n    static RENDER_BACKGROUND_PROGRAM = [\n        \"precision highp float;\",\n        \"attribute vec2 vertex;\",\n        \"uniform vec2 topLeft;\",\n        \"uniform vec2 bottomRight;\",\n        \"uniform vec2 containerRatio;\",\n        \"varying vec2 ripplesCoord;\",\n        \"varying vec2 backgroundCoord;\",\n        \"void main() {\",\n        \"backgroundCoord = mix(topLeft, bottomRight, vertex * 0.5 + 0.5);\",\n        \"backgroundCoord.y = 1.0 - backgroundCoord.y;\",\n        \"ripplesCoord = vec2(vertex.x, -vertex.y) * containerRatio * 0.5 + 0.5;\",\n        \"gl_Position = vec4(vertex.x, -vertex.y, 0.0, 1.0);\",\n        \"}\",\n    ].join(\"\\n\");\n    static RENDER_RIPPLE_PROGRAM = [\n        \"precision highp float;\",\n        \"uniform sampler2D samplerBackground;\",\n        \"uniform sampler2D samplerRipples;\",\n        \"uniform vec2 delta;\",\n        \"uniform float perturbance;\",\n        \"varying vec2 ripplesCoord;\",\n        \"varying vec2 backgroundCoord;\",\n        \"void main() {\",\n        \"float height = texture2D(samplerRipples, ripplesCoord).r;\",\n        \"float heightX = texture2D(samplerRipples, vec2(ripplesCoord.x + delta.x, ripplesCoord.y)).r;\",\n        \"float heightY = texture2D(samplerRipples, vec2(ripplesCoord.x, ripplesCoord.y + delta.y)).r;\",\n        \"vec3 dx = vec3(delta.x, heightX - height, 0.0);\",\n        \"vec3 dy = vec3(0.0, heightY - height, delta.y);\",\n        \"vec2 offset = -normalize(cross(dy, dx)).xz;\",\n        \"float specular = pow(max(0.0, dot(offset, normalize(vec2(-0.6, 1.0)))), 4.0);\",\n        \"gl_FragColor = texture2D(samplerBackground, backgroundCoord + offset * perturbance) + specular;\",\n        \"}\",\n    ].join(\"\\n\");\n}\n","export class StyleCache extends Map {\n    constructor() {\n        super([\n            [\"zIndex\", \"\"],\n            [\"position\", \"\"],\n            [\"backgroundWidth\", 0],\n            [\"backgroundHeight\", 0],\n            [\"originalInlineCSS\", \"\"],\n            [\"originalCSSBackgroundImage\", \"\"],\n        ]);\n    }\n    initialize(target) {\n        const { position, zIndex, backgroundImage } = window.getComputedStyle(target);\n        this.set(\"zIndex\", zIndex);\n        this.set(\"position\", position);\n        this.set(\"originalCSSBackgroundImage\", backgroundImage);\n        this.set(\"originalInlineCSS\", target.style.backgroundImage);\n    }\n    get(key) {\n        return super.get(key);\n    }\n    evict(key) {\n        return super.set(key, \"\");\n    }\n}\n","import { BrowserSupport } from \"./BrowserSupport.js\";\nexport class Textures {\n    quad;\n    bufferReadIndex = 1;\n    bufferWriteIndex = 0;\n    GL;\n    textures = [];\n    backgroundTexture;\n    frameBuffers = [];\n    static browserSupport = new BrowserSupport();\n    transparentPixels = this.createImageData(32, 32);\n    constructor(context) {\n        this.GL = context;\n        this.quad = this.GL.createBuffer();\n        this.backgroundTexture = this.createBackground();\n    }\n    drawQuad() {\n        this.GL.bindBuffer(this.GL.ARRAY_BUFFER, this.quad);\n        this.GL.vertexAttribPointer(0, 2, this.GL.FLOAT, false, 0, 0);\n        this.GL.drawArrays(this.GL.TRIANGLE_FAN, 0, 4);\n    }\n    get firstTexture() {\n        return this.textures[0];\n    }\n    get readTexture() {\n        return this.textures[this.bufferReadIndex];\n    }\n    get writeTexture() {\n        return this.textures[this.bufferWriteIndex];\n    }\n    get readFrame() {\n        return this.frameBuffers[this.bufferReadIndex];\n    }\n    get writeFrame() {\n        return this.frameBuffers[this.bufferWriteIndex];\n    }\n    getBrowserExtensions() {\n        Textures.browserSupport.extensions.forEach(name => {\n            this.GL.getExtension(name);\n        });\n    }\n    initialize(resolution) {\n        this.GL.bindBuffer(this.GL.ARRAY_BUFFER, this.quad);\n        const { linearSupport, type, arrayType } = Textures.browserSupport;\n        const textureData = arrayType\n            ? new arrayType(resolution * resolution * 4)\n            : null;\n        for (let i = 0; i < 2; i++) {\n            const texture = this.GL.createTexture();\n            const frameBuffer = this.GL.createFramebuffer();\n            this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, frameBuffer);\n            this.GL.bindTexture(this.GL.TEXTURE_2D, texture);\n            this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MIN_FILTER, linearSupport ? this.GL.LINEAR : this.GL.NEAREST);\n            this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MAG_FILTER, linearSupport ? this.GL.LINEAR : this.GL.NEAREST);\n            this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_S, this.GL.CLAMP_TO_EDGE);\n            this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_T, this.GL.CLAMP_TO_EDGE);\n            this.GL.texImage2D(this.GL.TEXTURE_2D, 0, this.GL.RGBA, resolution, resolution, 0, this.GL.RGBA, type, textureData);\n            this.GL.framebufferTexture2D(this.GL.FRAMEBUFFER, this.GL.COLOR_ATTACHMENT0, this.GL.TEXTURE_2D, texture, 0);\n            this.textures.push(texture);\n            this.frameBuffers.push(frameBuffer);\n        }\n    }\n    setTransparent() {\n        this.GL.bindTexture(this.GL.TEXTURE_2D, this.backgroundTexture);\n        this.GL.texImage2D(this.GL.TEXTURE_2D, 0, this.GL.RGBA, this.GL.RGBA, this.GL.UNSIGNED_BYTE, this.transparentPixels);\n    }\n    swapBufferIndices() {\n        this.bufferWriteIndex = 1 - this.bufferWriteIndex;\n        this.bufferReadIndex = 1 - this.bufferReadIndex;\n    }\n    createBackground() {\n        const texture = this.GL.createTexture();\n        this.GL.bindTexture(this.GL.TEXTURE_2D, texture);\n        this.GL.pixelStorei(this.GL.UNPACK_FLIP_Y_WEBGL, 1);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MAG_FILTER, this.GL.LINEAR);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MIN_FILTER, this.GL.LINEAR);\n        return texture;\n    }\n    createImageData(width, height) {\n        try {\n            return new ImageData(width, height);\n        }\n        catch (e) {\n            // Fallback for IE\n            const canvas = document.createElement(\"canvas\");\n            return canvas.getContext(\"2d\")?.createImageData(width, height);\n        }\n    }\n}\n","export class BrowserSupport {\n    type;\n    extensions;\n    linearSupport;\n    GL;\n    arrayType;\n    constructor() {\n        this.detect();\n    }\n    detect() {\n        const extensions = this.getExtensions();\n        const texture = this.frameAndBuffer();\n        const configurations = this.getAll(extensions);\n        const { length } = configurations;\n        for (let i = 0; i < length; i++) {\n            this.GL.texImage2D(this.GL.TEXTURE_2D, 0, this.GL.RGBA, 32, 32, 0, this.GL.RGBA, configurations[i].type, null);\n            this.GL.framebufferTexture2D(this.GL.FRAMEBUFFER, this.GL.COLOR_ATTACHMENT0, this.GL.TEXTURE_2D, texture, 0);\n            if (this.GL.checkFramebufferStatus(this.GL.FRAMEBUFFER) ===\n                this.GL.FRAMEBUFFER_COMPLETE) {\n                const config = configurations[i];\n                this.type = config.type;\n                this.arrayType = config.arrayType;\n                this.extensions = config.extensions;\n                this.linearSupport = config.linearSupport;\n                return;\n            }\n        }\n        throw new Error(\"No compatible browser configurations\");\n    }\n    getAll(extensions) {\n        const configs = [];\n        configs.push(this.createConfig(\"float\", this.GL.FLOAT, Float32Array, extensions));\n        if (extensions.OES_texture_half_float) {\n            configs.push(this.createConfig(\"half_float\", extensions.OES_texture_half_float.HALF_FLOAT_OES, null, extensions));\n        }\n        return configs;\n    }\n    createConfig(type, glType, arrayType, extensions) {\n        const name = \"OES_texture_\" + type, nameLinear = name + \"_linear\", linearSupport = nameLinear in extensions, configExtensions = [name];\n        if (linearSupport) {\n            configExtensions.push(nameLinear);\n        }\n        return {\n            type: glType,\n            arrayType: arrayType,\n            linearSupport: linearSupport,\n            extensions: configExtensions,\n        };\n    }\n    frameAndBuffer() {\n        const texture = this.GL.createTexture();\n        const frameBuffer = this.GL.createFramebuffer();\n        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, frameBuffer);\n        this.GL.bindTexture(this.GL.TEXTURE_2D, texture);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MIN_FILTER, this.GL.NEAREST);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_MAG_FILTER, this.GL.NEAREST);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_S, this.GL.CLAMP_TO_EDGE);\n        this.GL.texParameteri(this.GL.TEXTURE_2D, this.GL.TEXTURE_WRAP_T, this.GL.CLAMP_TO_EDGE);\n        return texture;\n    }\n    getExtensions() {\n        const canvas = document.createElement(\"canvas\");\n        this.GL = (canvas.getContext(\"webgl\") ||\n            canvas.getContext(\"experimental-webgl\"));\n        if (!this.GL) {\n            throw new Error(\"No WebGL support\");\n        }\n        const extensions = {};\n        const keys = [\n            \"OES_texture_float\",\n            \"OES_texture_half_float\",\n            \"OES_texture_float_linear\",\n            \"OES_texture_half_float_linear\",\n        ];\n        keys.forEach(name => {\n            const extension = this.GL.getExtension(name);\n            if (extension) {\n                extensions[name] = extension;\n            }\n        });\n        if (!extensions.OES_texture_float) {\n            throw new Error(\"No texture float support\");\n        }\n        return extensions;\n    }\n}\n","import { ImageLoader } from \"./ImageLoader.js\";\nimport { Options } from \"./Options.js\";\nimport { Shaders } from \"./Shaders.js\";\nimport { StyleCache } from \"./StyleCache.js\";\nimport { Textures } from \"./Textures.js\";\nexport class WebGL extends Options {\n    Shaders;\n    Textures;\n    quad;\n    target;\n    canvas;\n    GL;\n    StyleCache = new StyleCache();\n    imageSource = null;\n    constructor(target, ...rest) {\n        super(...rest);\n        this.target = target;\n        this.canvas = document.createElement(\"canvas\");\n        this.positionCanvas();\n        this.GL = this.createGL(this.canvas);\n        this.Shaders = new Shaders(this.GL, this.resolution);\n        this.Textures = new Textures(this.GL);\n    }\n    initializeWebGL() {\n        this.Textures.initialize(this.resolution);\n        this.GL.bufferData(this.GL.ARRAY_BUFFER, new Float32Array([-1, -1, +1, -1, +1, +1, -1, +1]), this.GL.STATIC_DRAW);\n        this.Textures.setTransparent();\n        void this.loadImage().then(() => {\n            this.onInitialized?.();\n        });\n        this.GL.clearColor(0, 0, 0, 0);\n        this.GL.blendFunc(this.GL.SRC_ALPHA, this.GL.ONE_MINUS_SRC_ALPHA);\n    }\n    hideCSSBackground() {\n        const inlineCSS = this.target.style.backgroundImage;\n        if (inlineCSS === \"none\") {\n            return;\n        }\n        this.StyleCache.set(\"originalInlineCSS\", inlineCSS);\n        this.StyleCache.set(\"originalCSSBackgroundImage\", window.getComputedStyle(this.target).backgroundImage);\n        this.target.style.backgroundImage = \"none\";\n    }\n    render() {\n        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, null);\n        this.GL.viewport(0, 0, this.canvas.width, this.canvas.height);\n        this.GL.enable(this.GL.BLEND);\n        this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n        this.GL.useProgram(this.Shaders.renderProgram.id);\n        this.bindTexture(this.Textures.backgroundTexture, 0);\n        this.bindTexture(this.Textures.firstTexture, 1);\n        this.Shaders.render(this.perturbance);\n        this.Textures.drawQuad();\n        this.GL.disable(this.GL.BLEND);\n    }\n    update() {\n        this.GL.viewport(0, 0, this.resolution, this.resolution);\n        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, this.Textures.writeFrame);\n        this.bindTexture(this.Textures.readTexture);\n        this.GL.useProgram(this.Shaders.updateProgram.id);\n        this.Textures.drawQuad();\n        this.Textures.swapBufferIndices();\n    }\n    isPercentage(str) {\n        return str[str.length - 1] == \"%\";\n    }\n    bindTexture(texture, unit = 0) {\n        this.GL.activeTexture(this.GL.TEXTURE0 + (unit || 0));\n        this.GL.bindTexture(this.GL.TEXTURE_2D, texture);\n    }\n    positionCanvas() {\n        this.canvas.width = this.target.offsetWidth;\n        this.canvas.height = this.target.offsetHeight;\n        this.canvas.style.position = \"absolute\";\n        this.canvas.style.top = \"0\";\n        this.canvas.style.right = \"0\";\n        this.canvas.style.bottom = \"0\";\n        this.canvas.style.left = \"0\";\n        this.canvas.style.zIndex = \"-1\";\n        this.target.appendChild(this.canvas);\n    }\n    createGL(canvas) {\n        return (canvas.getContext(\"webgl\") ||\n            canvas.getContext(\"experimental-webgl\"));\n    }\n    async loadImage() {\n        const { backgroundImage } = window.getComputedStyle(this.target);\n        const newImageSource = this.imageUrl ||\n            this.extractUrl(this.StyleCache.get(\"originalCSSBackgroundImage\")) ||\n            this.extractUrl(backgroundImage);\n        if (newImageSource == this.imageSource) {\n            return;\n        }\n        this.imageSource = newImageSource;\n        if (!this.imageSource) {\n            this.Textures.setTransparent();\n            return;\n        }\n        try {\n            const loader = new ImageLoader(this.Textures);\n            const image = await loader.load(this.imageSource, this.crossOrigin);\n            this.StyleCache.set(\"backgroundWidth\", image.width);\n            this.StyleCache.set(\"backgroundHeight\", image.height);\n            this.hideCSSBackground();\n        }\n        catch (error) {\n            // silence\n        }\n    }\n}\n","import { Animations } from \"./Animation.js\";\nimport { WebGL } from \"./WebGL.js\";\nexport class Ripples extends WebGL {\n    ID;\n    visible = false;\n    running = false;\n    destroyed = false;\n    initialized = false;\n    constructor(...options) {\n        super(...options);\n        this.cacheTargetPositions();\n        this.setupWebGL();\n    }\n    drop(x, y, radius, strength) {\n        const { offsetHeight, offsetWidth } = this.target;\n        const longestSide = Math.max(offsetHeight, offsetWidth);\n        radius = radius / longestSide;\n        const dropPosition = new Float32Array([\n            (2 * x - offsetWidth) / longestSide,\n            (offsetHeight - 2 * y) / longestSide,\n        ]);\n        this.GL.viewport(0, 0, this.resolution, this.resolution);\n        this.GL.bindFramebuffer(this.GL.FRAMEBUFFER, this.Textures.writeFrame);\n        this.bindTexture(this.Textures.readTexture);\n        this.Shaders.drop(dropPosition, radius, strength);\n        this.Textures.drawQuad();\n        this.Textures.swapBufferIndices();\n    }\n    updateSize = () => {\n        const { offsetHeight, offsetWidth } = this.target;\n        if (offsetWidth !== this.canvas.width ||\n            offsetHeight !== this.canvas.height) {\n            this.canvas.width = offsetWidth;\n            this.canvas.height = offsetHeight;\n            void this.reloadImage();\n        }\n    };\n    show() {\n        this.visible = true;\n        this.canvas.style.display = \"block\";\n        this.hideCSSBackground();\n    }\n    hide() {\n        this.visible = false;\n        this.canvas.style.display = \"none\";\n        this.restoreCSSBackground();\n    }\n    pause() {\n        this.running = false;\n    }\n    play() {\n        this.running = true;\n    }\n    destroy() {\n        this.target.style.zIndex = this.StyleCache.get(\"zIndex\");\n        this.target.style.position = this.StyleCache.get(\"position\");\n        // @ts-ignore\n        this.GL = null;\n        window.removeEventListener(\"resize\", this.updateSize);\n        this.target.removeEventListener(\"mousedown\", this.onClick);\n        this.target.removeEventListener(\"touchmove\", this.onTouch);\n        this.target.removeEventListener(\"touchstart\", this.onTouch);\n        this.target.removeEventListener(\"mousemove\", this.onMouseMove);\n        this.target.removeChild(this.canvas);\n        this.restoreCSSBackground();\n        if (this.ID) {\n            Animations.delete(this.ID);\n        }\n        this.destroyed = true;\n    }\n    reloadImage() {\n        this.restoreCSSBackground();\n        this.StyleCache.evict(\"originalCSSBackgroundImage\");\n        return this.loadImage();\n    }\n    cacheTargetPositions() {\n        this.StyleCache.initialize(this.target);\n        this.target.style.zIndex = \"0\";\n        this.target.style.position = \"relative\";\n    }\n    setupWebGL() {\n        this.Textures.getBrowserExtensions();\n        window.addEventListener(\"resize\", this.updateSize);\n        this.initializeWebGL();\n        this.visible = true;\n        this.running = true;\n        this.initialized = true;\n        this.setupPointerEvents();\n        this.ID = Animations.register(() => {\n            if (!this.destroyed) {\n                this.step();\n            }\n        });\n    }\n    setupPointerEvents() {\n        this.target.addEventListener(\"mousedown\", this.onClick);\n        this.target.addEventListener(\"mousemove\", this.onMouseMove);\n        this.target.addEventListener(\"touchmove\", this.onTouch, { passive: true });\n        this.target.addEventListener(\"touchstart\", this.onTouch, { passive: true });\n    }\n    onClick = (e) => {\n        if (!this.pointerEventsEnabled) {\n            return;\n        }\n        this.dropAtPointer(e, this.dropRadius * 1.5, 0.14);\n    };\n    onTouch = (e) => {\n        if (!this.pointerEventsEnabled) {\n            return;\n        }\n        const touches = e.changedTouches;\n        for (let i = 0; i < touches.length; i++) {\n            this.dropAtPointer(touches[i], this.dropRadius, 0.01);\n        }\n    };\n    onMouseMove = (e) => {\n        if (!this.pointerEventsEnabled) {\n            return;\n        }\n        this.dropAtPointer(e, this.dropRadius, 0.01);\n    };\n    get pointerEventsEnabled() {\n        return this.visible && this.running && this.interactive;\n    }\n    step() {\n        if (!this.visible) {\n            return;\n        }\n        this.computeTextureBoundaries();\n        if (this.running) {\n            this.update();\n        }\n        this.render();\n    }\n    computeBackgroundSize(backgroundSize, container) {\n        const BW = this.StyleCache.get(\"backgroundWidth\");\n        const BH = this.StyleCache.get(\"backgroundHeight\");\n        if (backgroundSize == \"cover\") {\n            const scale = Math.max(container.width / BW, container.height / BH);\n            return [BW * scale, BH * scale];\n        }\n        if (backgroundSize == \"contain\") {\n            const scale = Math.min(container.width / BW, container.height / BH);\n            return [BW * scale, BH * scale];\n        }\n        const BP = backgroundSize.split(\" \");\n        let backgroundWidth = BP[0] || \"\";\n        let backgroundHeight = BP[1] || backgroundWidth;\n        if (this.isPercentage(backgroundWidth)) {\n            backgroundWidth = (container.width * parseFloat(backgroundWidth)) / 100;\n        }\n        else if (backgroundWidth != \"auto\") {\n            backgroundWidth = parseFloat(backgroundWidth);\n        }\n        if (this.isPercentage(backgroundHeight)) {\n            backgroundHeight =\n                (container.height * parseFloat(backgroundHeight)) / 100;\n        }\n        else if (backgroundHeight != \"auto\") {\n            backgroundHeight = parseFloat(backgroundHeight);\n        }\n        if (backgroundWidth == \"auto\" && backgroundHeight == \"auto\") {\n            backgroundWidth = BW;\n            backgroundHeight = BH;\n        }\n        else {\n            if (backgroundWidth == \"auto\") {\n                backgroundWidth = BW * (backgroundHeight / BH);\n            }\n            if (backgroundHeight == \"auto\") {\n                backgroundHeight = BH * (backgroundWidth / BW);\n            }\n        }\n        return [backgroundWidth, backgroundHeight];\n    }\n    computeTextureBoundaries() {\n        const { backgroundSize, backgroundAttachment, backgroundPosition: BP, } = window.getComputedStyle(this.target);\n        const backgroundPosition = this.translateBackgroundPosition(BP);\n        let container;\n        if (backgroundAttachment == \"fixed\") {\n            container = {\n                left: window.scrollX,\n                top: window.scrollY,\n                width: window.innerWidth,\n                height: window.innerHeight,\n            };\n        }\n        else {\n            const { offsetTop, offsetLeft, offsetHeight, offsetWidth } = this.target;\n            container = {\n                top: offsetTop,\n                left: offsetLeft,\n                width: offsetWidth,\n                height: offsetHeight,\n            };\n        }\n        const [width, height] = this.computeBackgroundSize(backgroundSize, container);\n        let [x, y] = backgroundPosition;\n        if (this.isPercentage(x)) {\n            x = container.left + ((container.width - width) * parseFloat(x)) / 100;\n        }\n        else {\n            x = container.left + parseFloat(x);\n        }\n        if (this.isPercentage(y)) {\n            y = container.top + ((container.height - height) * parseFloat(y)) / 100;\n        }\n        else {\n            y = container.top + parseFloat(y);\n        }\n        const { offsetLeft, offsetTop, offsetHeight, offsetWidth } = this.target;\n        const floats = new Float32Array([\n            (offsetLeft - x) / width,\n            (offsetTop - y) / height,\n        ]);\n        this.Shaders.renderProgram.uniforms.topLeft = floats;\n        this.Shaders.renderProgram.uniforms.bottomRight = new Float32Array([\n            floats[0] + offsetWidth / width,\n            floats[1] + offsetHeight / height,\n        ]);\n        const maxSide = Math.max(this.canvas.width, this.canvas.height);\n        this.Shaders.renderProgram.uniforms.containerRatio = new Float32Array([\n            this.canvas.width / maxSide,\n            this.canvas.height / maxSide,\n        ]);\n    }\n    translateBackgroundPosition(value) {\n        const parts = value.split(\" \");\n        if (parts.length === 1) {\n            switch (value) {\n                case \"center\":\n                    return [\"50%\", \"50%\"];\n                case \"top\":\n                    return [\"50%\", \"0\"];\n                case \"bottom\":\n                    return [\"50%\", \"100%\"];\n                case \"left\":\n                    return [\"0\", \"50%\"];\n                case \"right\":\n                    return [\"100%\", \"50%\"];\n                default:\n                    return [value, \"50%\"];\n            }\n        }\n        return parts.map(part => {\n            switch (value) {\n                case \"center\":\n                    return \"50%\";\n                case \"top\":\n                case \"left\":\n                    return \"0\";\n                case \"right\":\n                case \"bottom\":\n                    return \"100%\";\n                default:\n                    return part;\n            }\n        });\n    }\n    restoreCSSBackground() {\n        this.target.style.backgroundImage =\n            this.StyleCache.get(\"originalInlineCSS\") || \"\";\n    }\n    dropAtPointer(pointer, radius, strength) {\n        const { borderTopWidth, borderLeftWidth } = window.getComputedStyle(this.target);\n        const borderTop = parseInt(borderTopWidth || \"0\");\n        const borderLeft = parseInt(borderLeftWidth || \"0\");\n        const { offsetTop, offsetLeft } = this.target;\n        this.drop(pointer.pageX - offsetLeft - borderLeft, pointer.pageY - offsetTop - borderTop, radius, strength);\n    }\n}\n","import { useEffect, useRef } from \"react\";\nimport { Ripples } from \"@figliolia/ripples\";\n\nexport const useRipples = <T extends HTMLElement = HTMLElement>() => {\n  const container = useRef<T>(null);\n\n  useEffect(() => {\n    if (!container.current) {\n      return;\n    }\n    const ripples = new Ripples(container.current, {\n      resolution: \"device\",\n    });\n    return () => {\n      ripples.destroy();\n    };\n  }, []);\n\n  return container;\n};\n","import type { ReactNode } from \"react\";\nimport { memo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { FullScreen } from \"Components/FullScreen\";\nimport { useRipples } from \"Hooks/useRipples\";\nimport { isPageActive, usePageController } from \"State/PageController\";\nimport \"./styles.scss\";\n\nexport const Page = memo(function Page({ name, children }: Props) {\n  const container = useRipples();\n  const active = usePageController(isPageActive);\n\n  const classes = useClassNames(\"page\", name, { active });\n\n  return (\n    <FullScreen Tag=\"main\" id=\"page\" ref={container} className={classes}>\n      <div className=\"content\">{children}</div>\n    </FullScreen>\n  );\n});\n\ninterface Props {\n  name: string;\n  children: ReactNode;\n}\n"],"names":["Animations","register","callback","ID","this","callstack","Promise","resolve","then","nextFrame","remove","frame","animate","requestAnimationFrame","length","closeLoop","execute","cancelAnimationFrame","__publicField","Subscriptable","ImageLoader","constructor","Textures","GL","load","src","crossOrigin","image","Image","reject","onload","textureIze","onerror","setTransparent","isDataUri","wrapping","isPowerOfTwo","width","height","REPEAT","CLAMP_TO_EDGE","bindTexture","TEXTURE_2D","backgroundTexture","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","url","match","x","_Options","options","configuration","configure","imageUrl","dropRadius","interactive","perturbance","onInitialized","resolution","extractResolution","Object","assign","defaults","window","devicePixelRatio","Math","max","extractUrl","value","urlMatch","exec","Options","_Shaders","textureDelta","Float32Array","dropProgram","compileDrop","updateProgram","compileUpdate","uniform2fv","locations","delta","renderProgram","compileRender","drop","position","radius","strength","useProgram","id","center","uniform1f","render","topLeft","uniforms","bottomRight","containerRatio","uniform1i","samplerBackground","samplerRipples","createProgram","VERTEX_SHADER","DROP_PROGRAM","UPDATE_PROGRAM","RENDER_BACKGROUND_PROGRAM","RENDER_RIPPLE_PROGRAM","vertexSource","fragmentSource","Error","program","attachShader","compileSource","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","name","enableVertexAttribArray","regex","shaderCode","getUniformLocation","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","join","Shaders","StyleCache","Map","super","initialize","target","zIndex","backgroundImage","getComputedStyle","set","style","get","key","evict","_Textures","context","createImageData","quad","createBuffer","createBackground","drawQuad","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","drawArrays","TRIANGLE_FAN","firstTexture","textures","readTexture","bufferReadIndex","writeTexture","bufferWriteIndex","readFrame","frameBuffers","writeFrame","getBrowserExtensions","browserSupport","extensions","forEach","getExtension","linearSupport","arrayType","textureData","i","texture","createTexture","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","TEXTURE_MIN_FILTER","LINEAR","NEAREST","TEXTURE_MAG_FILTER","framebufferTexture2D","COLOR_ATTACHMENT0","push","transparentPixels","swapBufferIndices","pixelStorei","UNPACK_FLIP_Y_WEBGL","ImageData","e","_a","document","createElement","getContext","detect","getExtensions","frameAndBuffer","configurations","getAll","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","config","configs","createConfig","OES_texture_half_float","HALF_FLOAT_OES","glType","nameLinear","configExtensions","canvas","extension","OES_texture_float","WebGL","rest","positionCanvas","createGL","initializeWebGL","bufferData","STATIC_DRAW","loadImage","call","clearColor","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","hideCSSBackground","inlineCSS","viewport","enable","BLEND","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","update","isPercentage","str","unit","activeTexture","TEXTURE0","offsetWidth","offsetHeight","top","right","bottom","left","appendChild","newImageSource","imageSource","loader","error","Ripples","reloadImage","pointerEventsEnabled","dropAtPointer","touches","changedTouches","cacheTargetPositions","setupWebGL","y","longestSide","dropPosition","show","visible","display","hide","restoreCSSBackground","pause","running","play","destroy","removeEventListener","updateSize","onClick","onTouch","onMouseMove","removeChild","delete","destroyed","addEventListener","initialized","setupPointerEvents","step","passive","computeTextureBoundaries","computeBackgroundSize","backgroundSize","container","BW","BH","scale","min","BP","split","backgroundWidth","backgroundHeight","parseFloat","backgroundAttachment","backgroundPosition","translateBackgroundPosition","scrollX","scrollY","innerWidth","innerHeight","offsetTop","offsetLeft","floats","maxSide","parts","map","part","pointer","borderTopWidth","borderLeftWidth","borderTop","parseInt","borderLeft","pageX","pageY","useRipples","useRef","useEffect","current","ripples","Page","memo","children","active","usePageController","isPageActive","classes","useClassNames","jsx","FullScreen","Tag","ref","className"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}