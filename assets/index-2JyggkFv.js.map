{"version":3,"file":"index-2JyggkFv.js","sources":["../../src/3D/CarScene/Boxes/Box.tsx","../../src/3D/CarScene/Boxes/index.tsx","../../src/Tools/Scenes.ts","../../src/3D/CarScene/Resources/Corvette.glb","../../src/3D/CarScene/Corvette/index.tsx","../../src/3D/CarScene/Resources/grid-texture.png","../../src/3D/CarScene/Grid/index.tsx","../../src/3D/CarScene/Resources/ground-normal.jpg","../../src/3D/CarScene/Resources/ground-roughness.jpg","../../src/3D/CarScene/Ground/index.tsx","../../src/3D/CarScene/Rings/index.tsx","../../src/3D/CarScene/Scene.tsx","../../src/3D/CarScene/index.tsx"],"sourcesContent":["import { useMemo, useRef } from \"react\";\nimport { Mesh, Vector3 } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\n\nexport const Box = ({ color }: Props) => {\n  const time = useRef(0);\n  const box = useRef<Mesh>(null);\n  const position = useRef(positionBox());\n  const xSpeed = useMemo(() => Math.random(), []);\n  const ySpeed = useMemo(() => Math.random(), []);\n  const scale = useMemo(() => Math.pow(Math.random(), 2) * 0.5 + 0.05, []);\n\n  useFrame((_, delta) => {\n    time.current += delta * 1.2;\n    if (!box.current) {\n      return;\n    }\n    const { x, y, z } = position.current;\n    const nextZ = z - time.current;\n    if (nextZ < -10) {\n      position.current = positionBox(Math.random() * 10 + 10);\n      time.current = 0;\n    }\n    box.current.position.set(x, y, nextZ);\n    box.current.rotation.x += xSpeed * delta;\n    box.current.rotation.y += ySpeed * delta;\n  });\n\n  return (\n    <mesh castShadow ref={box} scale={scale}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={color} envMapIntensity={0.15} />\n    </mesh>\n  );\n};\n\nexport type BoxColor = [r: number, g: number, b: number];\n\ninterface Props {\n  color: BoxColor;\n}\n\nfunction positionBox(z: number = (Math.random() * 2 - 1) * 15) {\n  const position = new Vector3(\n    (Math.random() * 2 - 1) * 3,\n    Math.max(0.5, Math.random() * 2.5 + 0.1),\n    z,\n  );\n  if (position.x < 0) {\n    position.x -= 2.5;\n  } else if (position.x > 0) {\n    position.x += 2.5;\n  }\n  return position;\n}\n","import { Fragment, useMemo } from \"react\";\nimport { Box, BoxColor } from \"./Box\";\n\nconst OFF_RED: BoxColor = [0.4, 0.1, 0.1];\nconst OFF_BLUE: BoxColor = [0.05, 0.15, 0.4];\n\nexport const Boxes = ({ total = 100 }: Props) => {\n  const boxes = useMemo(() => new Array<null>(total).fill(null), [total]);\n  return (\n    <Fragment>\n      {boxes.map((_, i) => (\n        <Box key={i} color={i % 2 === 0 ? OFF_RED : OFF_BLUE} />\n      ))}\n    </Fragment>\n  );\n};\n\ninterface Props {\n  total?: number;\n}\n","import { Group, Material, Mesh, MeshStandardMaterial, Object3D } from \"three\";\n\nexport class Scenes {\n  public static forEachMesh(scene: Group, callback: (mesh: Mesh) => void) {\n    scene.traverse(object => {\n      if (this.isMesh(object)) {\n        callback(object);\n      }\n    });\n  }\n\n  public static forEachMaterial(\n    materials: Material | Material[],\n    fn: (material: MeshStandardMaterial) => void,\n  ) {\n    const iterable = Array.isArray(materials) ? materials : [materials];\n    for (const material of iterable) {\n      fn(material as MeshStandardMaterial);\n    }\n  }\n\n  private static isMesh(object: Object3D): object is Mesh {\n    return object instanceof Mesh;\n  }\n}\n","export default \"__VITE_ASSET__WUftUpCb__\"","import { useEffect, useState } from \"react\";\nimport { Mesh } from \"three\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Scenes } from \"Tools/Scenes\";\nimport { PropLess } from \"Tools/Types\";\nimport Scene from \"../Resources/Corvette.glb\";\n\nconst ROTATION_BLACK_LIST = [\n  \"polySurface778\",\n  \"polySurface491\",\n  \"polySurface33\",\n  \"polySurface262\",\n];\n\nexport const Corvette = (_: PropLess) => {\n  const { scene } = useGLTF(Scene);\n  const [wheelMeshes, setWheelMeshes] = useState<Mesh[]>([]);\n\n  useEffect(() => {\n    const wheels: Mesh[] = [];\n    scene.scale.set(110, 110, 110);\n    scene.position.set(0, 0, 0);\n    Scenes.forEachMesh(scene, mesh => {\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      Scenes.forEachMaterial(mesh.material, material => {\n        material.envMapIntensity = 20;\n      });\n      if (\n        mesh.name.includes(\"Wheel\") &&\n        !ROTATION_BLACK_LIST.some(n => mesh.name.startsWith(n))\n      ) {\n        wheels.push(mesh);\n      }\n    });\n    setWheelMeshes(wheels);\n  }, [scene]);\n\n  useFrame(({ clock, camera }) => {\n    const movement = clock.getElapsedTime() * 2;\n    for (const mesh of wheelMeshes) {\n      mesh.rotation.x = camera.position.x >= 0 ? movement : -movement;\n    }\n  });\n\n  return <primitive object={scene} />;\n};\n\nuseGLTF.preload(Scene);\n","export default \"__VITE_ASSET__zLLbauW2__\"","import { useCallback } from \"react\";\nimport { Texture } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Textures } from \"Tools/Textures\";\nimport { PropLess } from \"Tools/Types\";\nimport gridTexture from \"../Resources/grid-texture.png\";\n\nexport const Grid = (_: PropLess) => {\n  const onLoad = useCallback((texture: Texture) => {\n    Textures.wrap(texture).repeat(texture, 30).rerender(texture);\n    texture.anisotropy = 4;\n  }, []);\n\n  const grid = useTexture(gridTexture, onLoad);\n\n  useFrame(({ clock }) => {\n    grid.offset.set(0, -clock.getElapsedTime() * 0.68);\n  });\n\n  return (\n    <mesh rotation-x={-Math.PI * 0.5} position={[0, 0.015, 0]}>\n      <planeGeometry args={[35, 35]} />\n      <meshBasicMaterial\n        transparent\n        map={grid}\n        alphaMap={grid}\n        opacity={0.25}\n        color={[1, 1, 1]}\n      />\n    </mesh>\n  );\n};\n\nuseTexture.preload(gridTexture);\n","export default \"__VITE_ASSET__sI66FgXy__\"","export default \"__VITE_ASSET__rs6ThNhK__\"","import { useCallback } from \"react\";\nimport { Texture } from \"three\";\nimport { MeshReflectorMaterial, useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Textures } from \"Tools/Textures\";\nimport { PropLess } from \"Tools/Types\";\nimport GroundNormal from \"../Resources/ground-normal.jpg\";\nimport GroundRoughness from \"../Resources/ground-roughness.jpg\";\n\nexport const Ground = (_: PropLess) => {\n  const onNormalLoad = useCallback((texture: Texture) => {\n    return Textures.wrap(texture)\n      .repeat(texture, 5)\n      .colorless(texture)\n      .rerender(texture);\n  }, []);\n\n  const onRoughnessLoad = useCallback((texture: Texture) => {\n    return Textures.wrap(texture).repeat(texture, 5).rerender(texture);\n  }, []);\n\n  const normals = useTexture(GroundNormal, onNormalLoad);\n  const roughness = useTexture(GroundRoughness, onRoughnessLoad);\n\n  useFrame(({ clock }) => {\n    const movement = clock.getElapsedTime() * -0.128;\n    normals.offset.set(0, movement);\n    roughness.offset.set(0, movement);\n  });\n\n  return (\n    <mesh castShadow receiveShadow rotation-x={-Math.PI * 0.5}>\n      <planeGeometry args={[30, 30]} />\n      <MeshReflectorMaterial\n        dithering\n        normalMap={normals}\n        roughnessMap={roughness}\n        envMapIntensity={0}\n        normalScale={[1, 1]}\n        color={[0.015, 0.015, 0.015]}\n        roughness={0.7}\n        blur={[1000, 400]} // Blur ground reflections (width, heigt), 0 skips blur\n        mixBlur={30} // How much blur mixes with surface roughness (default = 1)\n        mixStrength={80} // Strength of the reflections\n        mixContrast={1} // Contrast of the reflections\n        resolution={1024} // Off-buffer resolution, lower=faster, higher=better quality, slower\n        mirror={0} // Mirror environment, 0 = texture colors, 1 = pick up env colors\n        depthScale={0.01} // Scale the depth factor (0 = no depth, default = 0)\n        minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\n        maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\n        depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n        reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n      />\n    </mesh>\n  );\n};\n\nuseTexture.preload([GroundNormal, GroundRoughness]);\n","import { Fragment, useCallback, useMemo, useRef } from \"react\";\nimport { Color, Mesh } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Scenes } from \"Tools/Scenes\";\n\nconst RED = new Color(6, 0.16, 0.7).multiplyScalar(0.5);\nconst BLUE = new Color(0.1, 0.7, 3).multiplyScalar(0.5);\n\nexport const Rings = ({ total = 14 }: Props) => {\n  const nodes = useRef<Mesh[]>([]);\n  const color = useMemo(() => [0, 0, 0] as const, []);\n  const position = useMemo(() => [0, 0, 0] as const, []);\n  const ringEmission = useMemo(() => [0.5, 0.5, 0.5] as const, []);\n  const ringArgs = useMemo(() => [3.35, 0.05, 16, 100] as const, []);\n  const rings = useMemo(() => new Array<null>(total).fill(null), [total]);\n\n  const cacheReference = useCallback((index: number) => {\n    return (reference: Mesh) => {\n      nodes.current[index] = reference;\n    };\n  }, []);\n\n  useFrame(({ clock }) => {\n    let pointer = -1;\n    const time = clock.getElapsedTime();\n    for (const mesh of nodes.current) {\n      pointer++;\n      if (!mesh) {\n        continue;\n      }\n      const Z = (pointer - total / 2) * 3.5 + ((time * 0.4) % 3.5) * 2;\n      mesh.position.set(0, 0, -Z);\n      const distance = Math.abs(Z);\n      const scale = 1 - distance * 0.04;\n      mesh.scale.set(scale, scale, scale);\n      const color = (pointer % 2 === 0 ? BLUE : RED).clone();\n      let colorScale = 1;\n      if (distance > 2) {\n        colorScale = 1 - (Math.min(12, distance) - 2) / 10;\n      }\n      colorScale *= 0.5;\n      color.multiplyScalar(colorScale);\n      Scenes.forEachMaterial(mesh.material, material => {\n        material.emissive = color;\n      });\n    }\n  });\n\n  return (\n    <Fragment>\n      {rings.map((_, i) => {\n        const ref = cacheReference(i);\n        return (\n          <mesh ref={ref} key={i} castShadow receiveShadow position={position}>\n            <torusGeometry args={ringArgs} />\n            <meshStandardMaterial emissive={ringEmission} color={color} />\n          </mesh>\n        );\n      })}\n    </Fragment>\n  );\n};\n\ninterface Props {\n  total?: number;\n}\n","import { Fragment, useEffect, useMemo } from \"react\";\nimport {\n  CubeCamera,\n  Environment,\n  OrbitControls,\n  PerspectiveCamera,\n} from \"@react-three/drei\";\nimport { useThree } from \"@react-three/fiber\";\nimport { selectDimensions, useScreen } from \"State/Screen\";\nimport { PropLess } from \"Tools/Types\";\nimport { Boxes } from \"./Boxes\";\nimport { Corvette } from \"./Corvette\";\nimport { Grid } from \"./Grid\";\nimport { Ground } from \"./Ground\";\nimport { Rings } from \"./Rings\";\n\nexport const Scene = (_: PropLess) => {\n  const camera = useThree(t => t.camera);\n  const [width, height] = useScreen(selectDimensions);\n  const maxDimension = useMemo(() => Math.max(width, height), [width, height]);\n\n  useEffect(() => {\n    camera.position.x = Math.max(5, 50 - maxDimension / 20);\n  }, [maxDimension, camera]);\n\n  return (\n    <Fragment>\n      <OrbitControls\n        target={[0, 0.35, 0]}\n        maxPolarAngle={1.45}\n        maxZoom={-5.0}\n        minDistance={5}\n        maxDistance={50}\n      />\n      <PerspectiveCamera makeDefault fov={50} position={[3, 2, 5]} />\n      <color args={[0, 0, 0]} attach=\"background\" />\n      <spotLight\n        castShadow\n        color={[1, 0.25, 0.7]}\n        intensity={10.5}\n        angle={0.6}\n        decay={0.5}\n        penumbra={0.5}\n        position={[5, 5, 0]}\n        shadow-bias={-0.0001}\n      />\n      <spotLight\n        castShadow\n        color={[0.14, 0.5, 1]}\n        intensity={20}\n        angle={0.6}\n        decay={0.5}\n        penumbra={0.5}\n        position={[-5, 5, 0]}\n        shadow-bias={-0.0001}\n      />\n      <CubeCamera resolution={256} frames={Infinity}>\n        {texture => (\n          <Fragment>\n            <Environment map={texture} environmentIntensity={15} />\n            <Corvette />\n          </Fragment>\n        )}\n      </CubeCamera>\n      <Rings />\n      <Boxes />\n      <Grid />\n      <Ground />\n    </Fragment>\n  );\n};\n","import { LabsScene } from \"Components/LabsScene\";\nimport { PropLess } from \"Tools/Types\";\nimport { Scene } from \"./Scene\";\n\nexport const CarScene = (_: PropLess) => {\n  return (\n    <LabsScene>\n      <Scene />\n    </LabsScene>\n  );\n};\n"],"names":["Box","color","time","useRef","box","position","positionBox","xSpeed","useMemo","Math","random","ySpeed","scale","pow","useFrame","_","delta","current","x","y","z","nextZ","set","rotation","castShadow","ref","children","jsx","args","envMapIntensity","Vector3","max","OFF_RED","OFF_BLUE","Boxes","total","boxes","Array","fill","Fragment","map","i","Scenes","forEachMesh","scene","callback","traverse","object","this","isMesh","forEachMaterial","materials","fn","iterable","isArray","material","Mesh","Scene$1","ROTATION_BLACK_LIST","Corvette","useGLTF","Scene","wheelMeshes","setWheelMeshes","useState","useEffect","wheels","mesh","receiveShadow","name","includes","some","n","startsWith","push","clock","camera","movement","getElapsedTime","preload","gridTexture","Grid","onLoad","useCallback","texture","Textures","wrap","repeat","rerender","anisotropy","grid","useTexture","offset","jsxRuntimeExports","jsxs","PI","transparent","alphaMap","opacity","GroundNormal","GroundRoughness","Ground","onNormalLoad","colorless","onRoughnessLoad","normals","roughness","MeshReflectorMaterial","dithering","normalMap","roughnessMap","normalScale","blur","mixBlur","mixStrength","mixContrast","resolution","mirror","depthScale","minDepthThreshold","maxDepthThreshold","depthToBlurRatioBias","reflectorOffset","RED","Color","multiplyScalar","BLUE","Rings","nodes","ringEmission","ringArgs","rings","cacheReference","index","reference","pointer","Z","distance","abs","clone","colorScale","min","emissive","useThree","t","width","height","useScreen","selectDimensions","maxDimension","OrbitControls","target","maxPolarAngle","maxZoom","minDistance","maxDistance","PerspectiveCamera","makeDefault","fov","attach","intensity","angle","decay","penumbra","CubeCamera","frames","Infinity","Environment","environmentIntensity","CarScene","LabsScene"],"mappings":"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"}