{"version":3,"file":"index-fenkpZ0p.js","sources":["../../node_modules/camera-controls/dist/camera-controls.module.js","../../node_modules/@react-three/drei/core/CameraControls.js","../../node_modules/@react-three/drei/core/Preload.js","../../src/3D/SkateboardScene/SkateboardOptions.ts","../../src/3D/SkateboardScene/Resources/skateboard/OniMask.png","../../src/3D/SkateboardScene/Resources/skateboard/PinkSwirl.png","../../src/3D/SkateboardScene/Resources/skateboard/red-and-black.png","../../src/3D/SkateboardScene/Resources/skateboard/against-the-tide.png","../../src/3D/SkateboardScene/Resources/skateboard/thank-you-deck.png","../../src/3D/SkateboardScene/Resources/skateboard/yellow-and-black.png","../../src/3D/SkateboardScene/Resources/skateboard/red-and-white.png","../../src/3D/SkateboardScene/Resources/skateboard/black-and-yellow.png","../../src/3D/SkateboardScene/Resources/skateboard/green-and-navy.png","../../src/3D/SkateboardScene/Resources/skateboard/gray-and-black.png","../../src/3D/SkateboardScene/Resources/skateboard/grid-streaks.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-black.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-blue.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-cream.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-green.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-navy.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-pink.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-purple.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-red.png","../../src/3D/SkateboardScene/Resources/skateboard/wheel-yellow.png","../../src/3D/SkateboardScene/useCameraControls.ts","../../src/3D/SkateboardScene/CustomizerContext.tsx","../../src/3D/SkateboardScene/Controls/Options/Option/index.tsx","../../src/3D/SkateboardScene/Controls/Options/index.tsx","../../src/3D/SkateboardScene/Controls/index.tsx","../../src/3D/SkateboardScene/Resources/hdr/warehouse-512.hdr","../../src/3D/SkateboardScene/Preview/Floor.tsx","../../src/3D/SkateboardScene/Resources/concrete-normal.avif","../../src/3D/SkateboardScene/Resources/skateboard.gltf","../../src/3D/SkateboardScene/Preview/SkateboardModel/index.tsx","../../src/3D/SkateboardScene/Preview/SkateboardModel/useGripTape.ts","../../src/3D/SkateboardScene/Resources/skateboard/griptape-diffuse.webp","../../src/3D/SkateboardScene/Resources/skateboard/griptape-roughness.webp","../../src/3D/SkateboardScene/Preview/SkateboardModel/useBolts.ts","../../src/3D/SkateboardScene/Preview/SkateboardModel/useTrucks.ts","../../src/3D/SkateboardScene/Resources/skateboard/metal-normal.avif","../../src/3D/SkateboardScene/Preview/SkateboardModel/useDeck.ts","../../src/3D/SkateboardScene/Preview/SkateboardModel/useWheels.ts","../../src/3D/SkateboardScene/Preview/SkateboardModel/useSRGBTexture.ts","../../src/3D/SkateboardScene/Preview/useSelectedTexture.ts","../../src/3D/SkateboardScene/Preview/index.tsx","../../src/3D/SkateboardScene/index.tsx"],"sourcesContent":["/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4,\n};\nconst ACTION = Object.freeze({\n    NONE: 0b0,\n    ROTATE: 0b1,\n    TRUCK: 0b10,\n    SCREEN_PAN: 0b100,\n    OFFSET: 0b1000,\n    DOLLY: 0b10000,\n    ZOOM: 0b100000,\n    TOUCH_ROTATE: 0b1000000,\n    TOUCH_TRUCK: 0b10000000,\n    TOUCH_SCREEN_PAN: 0b100000000,\n    TOUCH_OFFSET: 0b1000000000,\n    TOUCH_DOLLY: 0b10000000000,\n    TOUCH_ZOOM: 0b100000000000,\n    TOUCH_DOLLY_TRUCK: 0b1000000000000,\n    TOUCH_DOLLY_SCREEN_PAN: 0b10000000000000,\n    TOUCH_DOLLY_OFFSET: 0b100000000000000,\n    TOUCH_DOLLY_ROTATE: 0b1000000000000000,\n    TOUCH_ZOOM_TRUCK: 0b10000000000000000,\n    TOUCH_ZOOM_OFFSET: 0b100000000000000000,\n    TOUCH_ZOOM_SCREEN_PAN: 0b1000000000000000000,\n    TOUCH_ZOOM_ROTATE: 0b10000000000000000000,\n});\nconst DOLLY_DIRECTION = {\n    NONE: 0,\n    IN: 1,\n    OUT: -1,\n};\nfunction isPerspectiveCamera(camera) {\n    return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n    return camera.isOrthographicCamera;\n}\n\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\n\nconst EPSILON = 1e-5;\nconst DEG2RAD = Math.PI / 180;\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nfunction approxZero(number, error = EPSILON) {\n    return Math.abs(number) < error;\n}\nfunction approxEquals(a, b, error = EPSILON) {\n    return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n    return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n    if (isFinite(value))\n        return value;\n    if (value < 0)\n        return -Number.MAX_VALUE;\n    return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n    if (Math.abs(value) < Number.MAX_VALUE)\n        return value;\n    return value * Infinity;\n}\n// https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\nfunction smoothDamp(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let change = current - target;\n    const originalTo = target;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    change = clamp(change, -maxChange, maxChange);\n    target = current - change;\n    const temp = (currentVelocityRef.value + omega * change) * deltaTime;\n    currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n    let output = target + (change + temp) * exp;\n    // Prevent overshooting\n    if (originalTo - current > 0.0 === output > originalTo) {\n        output = originalTo;\n        currentVelocityRef.value = (output - originalTo) / deltaTime;\n    }\n    return output;\n}\n// https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\nfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime, out) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let targetX = target.x;\n    let targetY = target.y;\n    let targetZ = target.z;\n    let changeX = current.x - targetX;\n    let changeY = current.y - targetY;\n    let changeZ = current.z - targetZ;\n    const originalToX = targetX;\n    const originalToY = targetY;\n    const originalToZ = targetZ;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    const maxChangeSq = maxChange * maxChange;\n    const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n    if (magnitudeSq > maxChangeSq) {\n        const magnitude = Math.sqrt(magnitudeSq);\n        changeX = changeX / magnitude * maxChange;\n        changeY = changeY / magnitude * maxChange;\n        changeZ = changeZ / magnitude * maxChange;\n    }\n    targetX = current.x - changeX;\n    targetY = current.y - changeY;\n    targetZ = current.z - changeZ;\n    const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n    const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n    const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n    currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n    currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n    currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n    out.x = targetX + (changeX + tempX) * exp;\n    out.y = targetY + (changeY + tempY) * exp;\n    out.z = targetZ + (changeZ + tempZ) * exp;\n    // Prevent overshooting\n    const origMinusCurrentX = originalToX - current.x;\n    const origMinusCurrentY = originalToY - current.y;\n    const origMinusCurrentZ = originalToZ - current.z;\n    const outMinusOrigX = out.x - originalToX;\n    const outMinusOrigY = out.y - originalToY;\n    const outMinusOrigZ = out.z - originalToZ;\n    if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n        out.x = originalToX;\n        out.y = originalToY;\n        out.z = originalToZ;\n        currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n        currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n        currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n    }\n    return out;\n}\n\nfunction extractClientCoordFromEvent(pointers, out) {\n    out.set(0, 0);\n    pointers.forEach((pointer) => {\n        out.x += pointer.clientX;\n        out.y += pointer.clientY;\n    });\n    out.x /= pointers.length;\n    out.y /= pointers.length;\n}\n\nfunction notSupportedInOrthographicCamera(camera, message) {\n    if (isOrthographicCamera(camera)) {\n        console.warn(`${message} is not supported in OrthographicCamera`);\n        return true;\n    }\n    return false;\n}\n\nclass EventDispatcher {\n    constructor() {\n        this._listeners = {};\n    }\n    /**\n     * Adds the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        const listeners = this._listeners;\n        if (listeners[type] === undefined)\n            listeners[type] = [];\n        if (listeners[type].indexOf(listener) === -1)\n            listeners[type].push(listener);\n    }\n    /**\n     * Presence of the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    hasEventListener(type, listener) {\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    /**\n     * Removes the specified event listener\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1)\n                listenerArray.splice(index, 1);\n        }\n    }\n    /**\n     * Removes all event listeners\n     * @param type event name\n     * @category Methods\n     */\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = {};\n            return;\n        }\n        if (Array.isArray(this._listeners[type]))\n            this._listeners[type].length = 0;\n    }\n    /**\n     * Fire an event type.\n     * @param event DispatcherEvent\n     * @category Methods\n     */\n    dispatchEvent(event) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n\nvar _a;\nconst VERSION = '2.10.1'; // will be replaced with `version` in package.json during the build process.\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isMac = /Mac/.test((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.platform);\nlet THREE;\nlet _ORIGIN;\nlet _AXIS_Y;\nlet _AXIS_Z;\nlet _v2;\nlet _v3A;\nlet _v3B;\nlet _v3C;\nlet _cameraDirection;\nlet _xColumn;\nlet _yColumn;\nlet _zColumn;\nlet _deltaTarget;\nlet _deltaOffset;\nlet _sphericalA;\nlet _sphericalB;\nlet _box3A;\nlet _box3B;\nlet _sphere;\nlet _quaternionA;\nlet _quaternionB;\nlet _rotationMatrix;\nlet _raycaster;\nclass CameraControls extends EventDispatcher {\n    /**\n     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n     *\n     * e.g\n     * ```javascript\n     * CameraControls.install( { THREE: THREE } );\n     * ```\n     *\n     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n     *\n     * ```js\n     * import {\n     * \tVector2,\n     * \tVector3,\n     * \tVector4,\n     * \tQuaternion,\n     * \tMatrix4,\n     * \tSpherical,\n     * \tBox3,\n     * \tSphere,\n     * \tRaycaster,\n     * \tMathUtils,\n     * } from 'three';\n     *\n     * const subsetOfTHREE = {\n     * \tVector2   : Vector2,\n     * \tVector3   : Vector3,\n     * \tVector4   : Vector4,\n     * \tQuaternion: Quaternion,\n     * \tMatrix4   : Matrix4,\n     * \tSpherical : Spherical,\n     * \tBox3      : Box3,\n     * \tSphere    : Sphere,\n     * \tRaycaster : Raycaster,\n     * };\n\n     * CameraControls.install( { THREE: subsetOfTHREE } );\n     * ```\n     * @category Statics\n     */\n    static install(libs) {\n        THREE = libs.THREE;\n        _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n        _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n        _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n        _v2 = new THREE.Vector2();\n        _v3A = new THREE.Vector3();\n        _v3B = new THREE.Vector3();\n        _v3C = new THREE.Vector3();\n        _cameraDirection = new THREE.Vector3();\n        _xColumn = new THREE.Vector3();\n        _yColumn = new THREE.Vector3();\n        _zColumn = new THREE.Vector3();\n        _deltaTarget = new THREE.Vector3();\n        _deltaOffset = new THREE.Vector3();\n        _sphericalA = new THREE.Spherical();\n        _sphericalB = new THREE.Spherical();\n        _box3A = new THREE.Box3();\n        _box3B = new THREE.Box3();\n        _sphere = new THREE.Sphere();\n        _quaternionA = new THREE.Quaternion();\n        _quaternionB = new THREE.Quaternion();\n        _rotationMatrix = new THREE.Matrix4();\n        _raycaster = new THREE.Raycaster();\n    }\n    /**\n     * list all ACTIONs\n     * @category Statics\n     */\n    static get ACTION() {\n        return ACTION;\n    }\n    /**\n     * @deprecated Use `cameraControls.mouseButtons.left = CameraControls.ACTION.SCREEN_PAN` instead.\n     */\n    set verticalDragToForward(_) {\n        console.warn('camera-controls: `verticalDragToForward` was removed. Use `mouseButtons.left = CameraControls.ACTION.SCREEN_PAN` instead.');\n    }\n    /**\n     * Creates a `CameraControls` instance.\n     *\n     * Note:\n     * You **must install** three.js before using camera-controls. see [#install](#install)\n     * Not doing so will lead to runtime errors (`undefined` references to THREE).\n     *\n     * e.g.\n     * ```\n     * CameraControls.install( { THREE } );\n     * const cameraControls = new CameraControls( camera, domElement );\n     * ```\n     *\n     * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n     * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n     * @category Constructor\n     */\n    constructor(camera, domElement) {\n        super();\n        /**\n         * Minimum vertical angle in radians.\n         * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n         * The default value is `0`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = 0;\n         * ```\n         * @category Properties\n         */\n        this.minPolarAngle = 0; // radians\n        /**\n         * Maximum vertical angle in radians.\n         * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n         * The default value is `Math.PI`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = Math.PI;\n         * ```\n         * @category Properties\n         */\n        this.maxPolarAngle = Math.PI; // radians\n        /**\n         * Minimum horizontal angle in radians.\n         * The angle has to be less than `.maxAzimuthAngle`.\n         * The default value is `- Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.minAzimuthAngle = - Infinity;\n         * ```\n         * @category Properties\n         */\n        this.minAzimuthAngle = -Infinity; // radians\n        /**\n         * Maximum horizontal angle in radians.\n         * The angle has to be greater than `.minAzimuthAngle`.\n         * The default value is `Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxAzimuthAngle = Infinity;\n         * ```\n         * @category Properties\n         */\n        this.maxAzimuthAngle = Infinity; // radians\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        /**\n         * Minimum distance for dolly. The value must be higher than `0`. Default is `Number.EPSILON`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.minDistance = Number.EPSILON;\n        /**\n         * Maximum distance for dolly. The value must be higher than `minDistance`. Default is `Infinity`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.maxDistance = Infinity;\n        /**\n         * `true` to enable Infinity Dolly for wheel and pinch. Use this with `minDistance` and `maxDistance`\n         * If the Dolly distance is less (or over) than the `minDistance` (or `maxDistance`), `infinityDolly` will keep the distance and pushes the target position instead.\n         * @category Properties\n         */\n        this.infinityDolly = false;\n        /**\n         * Minimum camera zoom.\n         * @category Properties\n         */\n        this.minZoom = 0.01;\n        /**\n         * Maximum camera zoom.\n         * @category Properties\n         */\n        this.maxZoom = Infinity;\n        /**\n         * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n         * @category Properties\n         */\n        this.smoothTime = 0.25;\n        /**\n         * the smoothTime while dragging\n         * @category Properties\n         */\n        this.draggingSmoothTime = 0.125;\n        /**\n         * Max transition speed in unit-per-seconds\n         * @category Properties\n         */\n        this.maxSpeed = Infinity;\n        /**\n         * Speed of azimuth (horizontal) rotation.\n         * @category Properties\n         */\n        this.azimuthRotateSpeed = 1.0;\n        /**\n         * Speed of polar (vertical) rotation.\n         * @category Properties\n         */\n        this.polarRotateSpeed = 1.0;\n        /**\n         * Speed of mouse-wheel dollying.\n         * @category Properties\n         */\n        this.dollySpeed = 1.0;\n        /**\n         * `true` to invert direction when dollying or zooming via drag\n         * @category Properties\n         */\n        this.dollyDragInverted = false;\n        /**\n         * Speed of drag for truck and pedestal.\n         * @category Properties\n         */\n        this.truckSpeed = 2.0;\n        /**\n         * `true` to enable Dolly-in to the mouse cursor coords.\n         * @category Properties\n         */\n        this.dollyToCursor = false;\n        /**\n         * @category Properties\n         */\n        this.dragToOffset = false;\n        /**\n         * Friction ratio of the boundary.\n         * @category Properties\n         */\n        this.boundaryFriction = 0.0;\n        /**\n         * Controls how soon the `rest` event fires as the camera slows.\n         * @category Properties\n         */\n        this.restThreshold = 0.01;\n        /**\n         * An array of Meshes to collide with camera.\n         * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n         * @category Properties\n         */\n        this.colliderMeshes = [];\n        /**\n         * Force cancel user dragging.\n         * @category Methods\n         */\n        // cancel will be overwritten in the constructor.\n        this.cancel = () => { };\n        this._enabled = true;\n        this._state = ACTION.NONE;\n        this._viewport = null;\n        this._changedDolly = 0;\n        this._changedZoom = 0;\n        this._hasRested = true;\n        this._boundaryEnclosesCamera = false;\n        this._needsUpdate = true;\n        this._updatedLastTime = false;\n        this._elementRect = new DOMRect();\n        this._isDragging = false;\n        this._dragNeedsUpdate = true;\n        this._activePointers = [];\n        this._lockedPointer = null;\n        this._interactiveArea = new DOMRect(0, 0, 1, 1);\n        // Use draggingSmoothTime over smoothTime while true.\n        // set automatically true on user-dragging start.\n        // set automatically false on programmable methods call.\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        this._isUserControllingOffset = false;\n        this._isUserControllingZoom = false;\n        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n        // velocities for smoothDamp\n        this._thetaVelocity = { value: 0 };\n        this._phiVelocity = { value: 0 };\n        this._radiusVelocity = { value: 0 };\n        this._targetVelocity = new THREE.Vector3();\n        this._focalOffsetVelocity = new THREE.Vector3();\n        this._zoomVelocity = { value: 0 };\n        this._truckInternal = (deltaX, deltaY, dragToOffset, screenSpacePanning) => {\n            let truckX;\n            let pedestalY;\n            if (isPerspectiveCamera(this._camera)) {\n                const offset = _v3A.copy(this._camera.position).sub(this._target);\n                // half of the fov is center to top of screen\n                const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n                const targetDistance = offset.length() * Math.tan(fov * 0.5);\n                truckX = (this.truckSpeed * deltaX * targetDistance / this._elementRect.height);\n                pedestalY = (this.truckSpeed * deltaY * targetDistance / this._elementRect.height);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                truckX = this.truckSpeed * deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n                pedestalY = this.truckSpeed * deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n            }\n            else {\n                return;\n            }\n            if (screenSpacePanning) {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, 0, true);\n                this.forward(-pedestalY, true);\n            }\n            else {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, pedestalY, true);\n            }\n        };\n        this._rotateInternal = (deltaX, deltaY) => {\n            const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n            const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n            this.rotate(theta, phi, true);\n        };\n        this._dollyInternal = (delta, x, y) => {\n            const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n            const lastDistance = this._sphericalEnd.radius;\n            const distance = this._sphericalEnd.radius * dollyScale;\n            const clampedDistance = clamp(distance, this.minDistance, this.maxDistance);\n            const overflowedDistance = clampedDistance - distance;\n            if (this.infinityDolly && this.dollyToCursor) {\n                this._dollyToNoClamp(distance, true);\n            }\n            else if (this.infinityDolly && !this.dollyToCursor) {\n                this.dollyInFixed(overflowedDistance, true);\n                this._dollyToNoClamp(clampedDistance, true);\n            }\n            else {\n                this._dollyToNoClamp(clampedDistance, true);\n            }\n            if (this.dollyToCursor) {\n                this._changedDolly += (this.infinityDolly ? distance : clampedDistance) - lastDistance;\n                this._dollyControlCoord.set(x, y);\n            }\n            this._lastDollyDirection = Math.sign(-delta);\n        };\n        this._zoomInternal = (delta, x, y) => {\n            const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n            const lastZoom = this._zoom;\n            const zoom = this._zoom * zoomScale;\n            // for both PerspectiveCamera and OrthographicCamera\n            this.zoomTo(zoom, true);\n            if (this.dollyToCursor) {\n                this._changedZoom += zoom - lastZoom;\n                this._dollyControlCoord.set(x, y);\n            }\n        };\n        // Check if the user has installed THREE\n        if (typeof THREE === 'undefined') {\n            console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n        }\n        this._camera = camera;\n        this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();\n        this._state = ACTION.NONE;\n        // the location\n        this._target = new THREE.Vector3();\n        this._targetEnd = this._target.clone();\n        this._focalOffset = new THREE.Vector3();\n        this._focalOffsetEnd = this._focalOffset.clone();\n        // rotation\n        this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n        this._sphericalEnd = this._spherical.clone();\n        this._lastDistance = this._spherical.radius;\n        this._zoom = this._camera.zoom;\n        this._zoomEnd = this._zoom;\n        this._lastZoom = this._zoom;\n        // collisionTest uses nearPlane.s\n        this._nearPlaneCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n        ];\n        this._updateNearPlaneCorners();\n        // Target cannot move outside of this box\n        this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n        // reset\n        this._cameraUp0 = this._camera.up.clone();\n        this._target0 = this._target.clone();\n        this._position0 = this._camera.position.clone();\n        this._zoom0 = this._zoom;\n        this._focalOffset0 = this._focalOffset.clone();\n        this._dollyControlCoord = new THREE.Vector2();\n        // configs\n        this.mouseButtons = {\n            left: ACTION.ROTATE,\n            middle: ACTION.DOLLY,\n            right: ACTION.TRUCK,\n            wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY :\n                isOrthographicCamera(this._camera) ? ACTION.ZOOM :\n                    ACTION.NONE,\n        };\n        this.touches = {\n            one: ACTION.TOUCH_ROTATE,\n            two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK :\n                isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK :\n                    ACTION.NONE,\n            three: ACTION.TOUCH_TRUCK,\n        };\n        const dragStartPosition = new THREE.Vector2();\n        const lastDragPosition = new THREE.Vector2();\n        const dollyStart = new THREE.Vector2();\n        const onPointerDown = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            if (this._interactiveArea.left !== 0 ||\n                this._interactiveArea.top !== 0 ||\n                this._interactiveArea.width !== 1 ||\n                this._interactiveArea.height !== 1) {\n                const elRect = this._domElement.getBoundingClientRect();\n                const left = event.clientX / elRect.width;\n                const top = event.clientY / elRect.height;\n                // check if the interactiveArea contains the drag start position.\n                if (left < this._interactiveArea.left ||\n                    left > this._interactiveArea.right ||\n                    top < this._interactiveArea.top ||\n                    top > this._interactiveArea.bottom)\n                    return;\n            }\n            // Don't call `event.preventDefault()` on the pointerdown event\n            // to keep receiving pointermove evens outside dragging iframe\n            // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n            const mouseButton = event.pointerType !== 'mouse' ? null :\n                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n                            null;\n            if (mouseButton !== null) {\n                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n                zombiePointer && this._disposePointer(zombiePointer);\n            }\n            if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer)\n                return;\n            const pointer = {\n                pointerId: event.pointerId,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton,\n            };\n            this._activePointers.push(pointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            this._isDragging = true;\n            startDragging(event);\n        };\n        const onPointerMove = (event) => {\n            if (event.cancelable)\n                event.preventDefault();\n            const pointerId = event.pointerId;\n            const pointer = this._lockedPointer || this._findPointerById(pointerId);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if ((!this._isDragging && this._lockedPointer) ||\n                    this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            dragging();\n        };\n        const onPointerUp = (event) => {\n            const pointer = this._findPointerById(event.pointerId);\n            if (pointer && pointer === this._lockedPointer)\n                return;\n            pointer && this._disposePointer(pointer);\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 0:\n                        this._state = ACTION.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = ACTION.NONE;\n            }\n            endDragging();\n        };\n        let lastScrollTimeStamp = -1;\n        const onMouseWheel = (event) => {\n            if (!this._domElement)\n                return;\n            if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)\n                return;\n            if (this._interactiveArea.left !== 0 ||\n                this._interactiveArea.top !== 0 ||\n                this._interactiveArea.width !== 1 ||\n                this._interactiveArea.height !== 1) {\n                const elRect = this._domElement.getBoundingClientRect();\n                const left = event.clientX / elRect.width;\n                const top = event.clientY / elRect.height;\n                // check if the interactiveArea contains the drag start position.\n                if (left < this._interactiveArea.left ||\n                    left > this._interactiveArea.right ||\n                    top < this._interactiveArea.top ||\n                    top > this._interactiveArea.bottom)\n                    return;\n            }\n            event.preventDefault();\n            if (this.dollyToCursor ||\n                this.mouseButtons.wheel === ACTION.ROTATE ||\n                this.mouseButtons.wheel === ACTION.TRUCK) {\n                const now = performance.now();\n                // only need to fire this at scroll start.\n                if (lastScrollTimeStamp - now < 1000)\n                    this._getClientRect(this._elementRect);\n                lastScrollTimeStamp = now;\n            }\n            // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n            const deltaYFactor = isMac ? -1 : -3;\n            // Checks event.ctrlKey to detect multi-touch gestures on a trackpad.\n            const delta = (event.deltaMode === 1 || event.ctrlKey) ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n            const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n            const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n            switch (this.mouseButtons.wheel) {\n                case ACTION.ROTATE: {\n                    this._rotateInternal(event.deltaX, event.deltaY);\n                    this._isUserControllingRotate = true;\n                    break;\n                }\n                case ACTION.TRUCK: {\n                    this._truckInternal(event.deltaX, event.deltaY, false, false);\n                    this._isUserControllingTruck = true;\n                    break;\n                }\n                case ACTION.SCREEN_PAN: {\n                    this._truckInternal(event.deltaX, event.deltaY, false, true);\n                    this._isUserControllingTruck = true;\n                    break;\n                }\n                case ACTION.OFFSET: {\n                    this._truckInternal(event.deltaX, event.deltaY, true, false);\n                    this._isUserControllingOffset = true;\n                    break;\n                }\n                case ACTION.DOLLY: {\n                    this._dollyInternal(-delta, x, y);\n                    this._isUserControllingDolly = true;\n                    break;\n                }\n                case ACTION.ZOOM: {\n                    this._zoomInternal(-delta, x, y);\n                    this._isUserControllingZoom = true;\n                    break;\n                }\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const onContextMenu = (event) => {\n            if (!this._domElement || !this._enabled)\n                return;\n            // contextmenu event is fired right after pointerdown\n            // remove attached handlers and active pointer, if interrupted by contextmenu.\n            if (this.mouseButtons.right === CameraControls.ACTION.NONE) {\n                const pointerId = event instanceof PointerEvent ? event.pointerId : 0;\n                const pointer = this._findPointerById(pointerId);\n                pointer && this._disposePointer(pointer);\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                return;\n            }\n            event.preventDefault();\n        };\n        const startDragging = (event) => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            this._getClientRect(this._elementRect);\n            dragStartPosition.copy(_v2);\n            lastDragPosition.copy(_v2);\n            const isMultiTouch = this._activePointers.length >= 2;\n            if (isMultiTouch) {\n                // 2 finger pinch\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                // center coords of 2 finger truck\n                const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n                const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n                lastDragPosition.set(x, y);\n            }\n            this._state = 0;\n            if (!event) {\n                if (this._lockedPointer)\n                    this._state = this._state | this.mouseButtons.left;\n            }\n            else if ('pointerType' in event && event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            // stop current movement on drag start\n            // - rotate\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._sphericalEnd.theta = this._spherical.theta;\n                this._sphericalEnd.phi = this._spherical.phi;\n                this._thetaVelocity.value = 0;\n                this._phiVelocity.value = 0;\n            }\n            // - truck and screen-pan\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.SCREEN_PAN) === ACTION.SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_SCREEN_PAN) === ACTION.TOUCH_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN) {\n                this._targetEnd.copy(this._target);\n                this._targetVelocity.set(0, 0, 0);\n            }\n            // - dolly\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n                this._sphericalEnd.radius = this._spherical.radius;\n                this._radiusVelocity.value = 0;\n            }\n            // - zoom\n            if ((this._state & ACTION.ZOOM) === ACTION.ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._zoomEnd = this._zoom;\n                this._zoomVelocity.value = 0;\n            }\n            // - offset\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._focalOffsetEnd.copy(this._focalOffset);\n                this._focalOffsetVelocity.set(0, 0, 0);\n            }\n            this.dispatchEvent({ type: 'controlstart' });\n        };\n        const dragging = () => {\n            if (!this._enabled || !this._dragNeedsUpdate)\n                return;\n            this._dragNeedsUpdate = false;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n            // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n            const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n            const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;\n            const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n            const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n            lastDragPosition.copy(_v2);\n            // rotate\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._rotateInternal(deltaX, deltaY);\n                this._isUserControllingRotate = true;\n            }\n            // mouse dolly or zoom\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n                const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                const dollyDirection = this.dollyDragInverted ? -1 : 1;\n                if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n                    this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            // touch dolly or zoom\n            if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                const dollyDelta = dollyStart.y - distance;\n                dollyStart.set(0, distance);\n                const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                    (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                    (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                    (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN ||\n                    (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n                    this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            // truck\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._truckInternal(deltaX, deltaY, false, false);\n                this._isUserControllingTruck = true;\n            }\n            // screen-pan\n            if ((this._state & ACTION.SCREEN_PAN) === ACTION.SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_SCREEN_PAN) === ACTION.TOUCH_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN ||\n                (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN) {\n                this._truckInternal(deltaX, deltaY, false, true);\n                this._isUserControllingTruck = true;\n            }\n            // offset\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._truckInternal(deltaX, deltaY, true, false);\n                this._isUserControllingOffset = true;\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const endDragging = () => {\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            lastDragPosition.copy(_v2);\n            this._dragNeedsUpdate = false;\n            if (this._activePointers.length === 0 ||\n                (this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer)) {\n                this._isDragging = false;\n            }\n            if (this._activePointers.length === 0 && this._domElement) {\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                this.dispatchEvent({ type: 'controlend' });\n            }\n        };\n        this.lockPointer = () => {\n            if (!this._enabled || !this._domElement)\n                return;\n            this.cancel();\n            // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n            this._lockedPointer = {\n                pointerId: -1,\n                clientX: 0,\n                clientY: 0,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton: null,\n            };\n            this._activePointers.push(this._lockedPointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.requestPointerLock();\n            this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            startDragging();\n        };\n        this.unlockPointer = () => {\n            var _a, _b, _c;\n            if (this._lockedPointer !== null) {\n                this._disposePointer(this._lockedPointer);\n                this._lockedPointer = null;\n            }\n            (_a = this._domElement) === null || _a === void 0 ? void 0 : _a.ownerDocument.exitPointerLock();\n            (_b = this._domElement) === null || _b === void 0 ? void 0 : _b.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            (_c = this._domElement) === null || _c === void 0 ? void 0 : _c.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n            this.cancel();\n        };\n        const onPointerLockChange = () => {\n            const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n            if (!isPointerLockActive)\n                this.unlockPointer();\n        };\n        const onPointerLockError = () => {\n            this.unlockPointer();\n        };\n        this._addAllEventListeners = (domElement) => {\n            this._domElement = domElement;\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n            this._domElement.addEventListener('pointerdown', onPointerDown);\n            this._domElement.addEventListener('pointercancel', onPointerUp);\n            this._domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.addEventListener('contextmenu', onContextMenu);\n        };\n        this._removeAllEventListeners = () => {\n            if (!this._domElement)\n                return;\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n            this._domElement.removeEventListener('pointerdown', onPointerDown);\n            this._domElement.removeEventListener('pointercancel', onPointerUp);\n            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n            // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.removeEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.removeEventListener('contextmenu', onContextMenu);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n        };\n        this.cancel = () => {\n            if (this._state === ACTION.NONE)\n                return;\n            this._state = ACTION.NONE;\n            this._activePointers.length = 0;\n            endDragging();\n        };\n        if (domElement)\n            this.connect(domElement);\n        this.update(0);\n    }\n    /**\n     * The camera to be controlled\n     * @category Properties\n     */\n    get camera() {\n        return this._camera;\n    }\n    set camera(camera) {\n        this._camera = camera;\n        this.updateCameraUp();\n        this._camera.updateProjectionMatrix();\n        this._updateNearPlaneCorners();\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether or not the controls are enabled.\n     * `false` to disable user dragging/touch-move, but all methods works.\n     * @category Properties\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(enabled) {\n        this._enabled = enabled;\n        if (!this._domElement)\n            return;\n        if (enabled) {\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n        }\n        else {\n            this.cancel();\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n        }\n    }\n    /**\n     * Returns `true` if the controls are active updating.\n     * readonly value.\n     * @category Properties\n     */\n    get active() {\n        return !this._hasRested;\n    }\n    /**\n     * Getter for the current `ACTION`.\n     * readonly value.\n     * @category Properties\n     */\n    get currentAction() {\n        return this._state;\n    }\n    /**\n     * get/set Current distance.\n     * @category Properties\n     */\n    get distance() {\n        return this._spherical.radius;\n    }\n    set distance(distance) {\n        if (this._spherical.radius === distance &&\n            this._sphericalEnd.radius === distance)\n            return;\n        this._spherical.radius = distance;\n        this._sphericalEnd.radius = distance;\n        this._needsUpdate = true;\n    }\n    // horizontal angle\n    /**\n     * get/set the azimuth angle (horizontal) in radians.\n     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n     * @category Properties\n     */\n    get azimuthAngle() {\n        return this._spherical.theta;\n    }\n    set azimuthAngle(azimuthAngle) {\n        if (this._spherical.theta === azimuthAngle &&\n            this._sphericalEnd.theta === azimuthAngle)\n            return;\n        this._spherical.theta = azimuthAngle;\n        this._sphericalEnd.theta = azimuthAngle;\n        this._needsUpdate = true;\n    }\n    // vertical angle\n    /**\n     * get/set the polar angle (vertical) in radians.\n     * @category Properties\n     */\n    get polarAngle() {\n        return this._spherical.phi;\n    }\n    set polarAngle(polarAngle) {\n        if (this._spherical.phi === polarAngle &&\n            this._sphericalEnd.phi === polarAngle)\n            return;\n        this._spherical.phi = polarAngle;\n        this._sphericalEnd.phi = polarAngle;\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether camera position should be enclosed in the boundary or not.\n     * @category Properties\n     */\n    get boundaryEnclosesCamera() {\n        return this._boundaryEnclosesCamera;\n    }\n    set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n        this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n        this._needsUpdate = true;\n    }\n    /**\n     * Set drag-start, touches and wheel enable area in the domElement.\n     * each values are between `0` and `1` inclusive, where `0` is left/top and `1` is right/bottom of the screen.\n     * e.g. `{ x: 0, y: 0, width: 1, height: 1 }` for entire area.\n     * @category Properties\n     */\n    set interactiveArea(interactiveArea) {\n        this._interactiveArea.width = clamp(interactiveArea.width, 0, 1);\n        this._interactiveArea.height = clamp(interactiveArea.height, 0, 1);\n        this._interactiveArea.x = clamp(interactiveArea.x, 0, 1 - this._interactiveArea.width);\n        this._interactiveArea.y = clamp(interactiveArea.y, 0, 1 - this._interactiveArea.height);\n    }\n    /**\n     * Adds the specified event listener.\n     * Applicable event types (which is `K`) are:\n     * | Event name          | Timing |\n     * | ------------------- | ------ |\n     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n     * | `'control'`         | When the user controls the camera (dragging). |\n     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n     * | `'update'`          | When the camera position is updated. |\n     * | `'wake'`            | When the camera starts moving. |\n     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n     * | `'sleep'`           | When the camera end moving. |\n     *\n     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n     *\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        super.addEventListener(type, listener);\n    }\n    /**\n     * Removes the specified event listener\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        super.removeEventListener(type, listener);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n     * Every value is added to the current value.\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotate(azimuthAngle, polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateAzimuthTo(azimuthAngle, enableTransition = false) {\n        return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n    }\n    /**\n     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotatePolarTo(polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n     * Camera view will rotate over the orbit pivot absolutely:\n     *\n     * azimuthAngle\n     * ```\n     *       0º\n     *         \\\n     * 90º -----+----- -90º\n     *           \\\n     *           180º\n     * ```\n     * | direction | angle                  |\n     * | --------- | ---------------------- |\n     * | front     | 0º                     |\n     * | left      | 90º (`Math.PI / 2`)    |\n     * | right     | -90º (`- Math.PI / 2`) |\n     * | back      | 180º (`Math.PI`)       |\n     *\n     * polarAngle\n     * ```\n     *     180º\n     *      |\n     *      90º\n     *      |\n     *      0º\n     * ```\n     * | direction            | angle                  |\n     * | -------------------- | ---------------------- |\n     * | top/sky              | 180º (`Math.PI`)       |\n     * | horizontal from view | 90º (`Math.PI / 2`)    |\n     * | bottom/floor         | 0º                     |\n     *\n     * @param azimuthAngle Azimuth rotate angle to. In radian.\n     * @param polarAngle Polar rotate angle to. In radian.\n     * @param enableTransition  Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateTo(azimuthAngle, polarAngle, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        const theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n        const phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        this._sphericalEnd.theta = theta;\n        this._sphericalEnd.phi = phi;\n        this._sphericalEnd.makeSafe();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.theta = this._sphericalEnd.theta;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in/out camera position.\n     * @param distance Distance of dollyIn. Negative number for dollyOut.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dolly(distance, enableTransition = false) {\n        return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n    }\n    /**\n     * Dolly in/out camera position to given distance.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dollyTo(distance, enableTransition = false) {\n        this._isUserControllingDolly = false;\n        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n        this._changedDolly = 0;\n        return this._dollyToNoClamp(clamp(distance, this.minDistance, this.maxDistance), enableTransition);\n    }\n    _dollyToNoClamp(distance, enableTransition = false) {\n        const lastRadius = this._sphericalEnd.radius;\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (hasCollider) {\n            const maxDistanceByCollisionTest = this._collisionTest();\n            const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n            const isDollyIn = lastRadius > distance;\n            if (!isDollyIn && isCollided)\n                return Promise.resolve();\n            this._sphericalEnd.radius = Math.min(distance, maxDistanceByCollisionTest);\n        }\n        else {\n            this._sphericalEnd.radius = distance;\n        }\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in, but does not change the distance between the target and the camera, and moves the target position instead.\n     * Specify a negative value for dolly out.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dollyInFixed(distance, enableTransition = false) {\n        this._targetEnd.add(this._getCameraDirection(_cameraDirection).multiplyScalar(distance));\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Zoom in/out camera. The value is added to camera zoom.\n     * Limits set with `.minZoom` and `.maxZoom`\n     * @param zoomStep zoom scale\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    zoom(zoomStep, enableTransition = false) {\n        return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n    }\n    /**\n     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n     * Limits set with .minZoom and .maxZoom\n     * @param zoom\n     * @param enableTransition\n     * @category Methods\n     */\n    zoomTo(zoom, enableTransition = false) {\n        this._isUserControllingZoom = false;\n        this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._zoom = this._zoomEnd;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n        this._changedZoom = 0;\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * @deprecated `pan()` has been renamed to `truck()`\n     * @category Methods\n     */\n    pan(x, y, enableTransition = false) {\n        console.warn('`pan` has been renamed to `truck`');\n        return this.truck(x, y, enableTransition);\n    }\n    /**\n     * Truck and pedestal camera using current azimuthal angle\n     * @param x Horizontal translate amount\n     * @param y Vertical translate amount\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    truck(x, y, enableTransition = false) {\n        this._camera.updateMatrix();\n        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n        _xColumn.multiplyScalar(x);\n        _yColumn.multiplyScalar(-y);\n        const offset = _v3A.copy(_xColumn).add(_yColumn);\n        const to = _v3B.copy(this._targetEnd).add(offset);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move forward / backward.\n     * @param distance Amount to move forward / backward. Negative value to move backward\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    forward(distance, enableTransition = false) {\n        _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n        _v3A.crossVectors(this._camera.up, _v3A);\n        _v3A.multiplyScalar(distance);\n        const to = _v3B.copy(this._targetEnd).add(_v3A);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move up / down.\n     * @param height Amount to move up / down. Negative value to move down\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    elevate(height, enableTransition = false) {\n        _v3A.copy(this._camera.up).multiplyScalar(height);\n        return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n    }\n    /**\n     * Move target position to given point.\n     * @param x x coord to move center position\n     * @param y y coord to move center position\n     * @param z z coord to move center position\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    moveTo(x, y, z, enableTransition = false) {\n        this._isUserControllingTruck = false;\n        const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n        this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Look in the given point direction.\n     * @param x point x.\n     * @param y point y.\n     * @param z point z.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @returns Transition end promise\n     * @category Methods\n     */\n    lookInDirectionOf(x, y, z, enableTransition = false) {\n        const point = _v3A.set(x, y, z);\n        const direction = point.sub(this._targetEnd).normalize();\n        const position = direction.multiplyScalar(-this._sphericalEnd.radius).add(this._targetEnd);\n        return this.setPosition(position.x, position.y, position.z, enableTransition);\n    }\n    /**\n     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n     * set `cover: true` to fill enter screen.\n     * e.g.\n     * ```\n     * cameraControls.fitToBox( myMesh );\n     * ```\n     * @param box3OrObject Axis aligned bounding box to fit the view.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n     * @returns Transition end promise\n     * @category Methods\n     */\n    fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {\n        const promises = [];\n        const aabb = box3OrObject.isBox3\n            ? _box3A.copy(box3OrObject)\n            : _box3A.setFromObject(box3OrObject);\n        if (aabb.isEmpty()) {\n            console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n            Promise.resolve();\n        }\n        // round to closest axis ( forward | backward | right | left | top | bottom )\n        const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n        const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n        promises.push(this.rotateTo(theta, phi, enableTransition));\n        const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n        const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n        const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n        if (viewFromPolar) {\n            rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n        }\n        rotation.multiply(this._yAxisUpSpaceInverse);\n        // make oriented bounding box\n        const bb = _box3B.makeEmpty();\n        // left bottom back corner\n        _v3B.copy(aabb.min).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom back corner\n        _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top back corner\n        _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top back corner\n        _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left bottom front corner\n        _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom front corner\n        _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top front corner\n        _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top front corner\n        _v3B.copy(aabb.max).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // add padding\n        bb.min.x -= paddingLeft;\n        bb.min.y -= paddingBottom;\n        bb.max.x += paddingRight;\n        bb.max.y += paddingTop;\n        rotation.setFromUnitVectors(_AXIS_Z, normal);\n        if (viewFromPolar) {\n            rotation.premultiply(_quaternionB.invert());\n        }\n        rotation.premultiply(this._yAxisUpSpace);\n        const bbSize = bb.getSize(_v3A);\n        const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n        if (isPerspectiveCamera(this._camera)) {\n            const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.dollyTo(distance, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const width = camera.right - camera.left;\n            const height = camera.top - camera.bottom;\n            const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.zoomTo(zoom, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Fit the viewport to the sphere or the bounding sphere of the object.\n     * @param sphereOrMesh\n     * @param enableTransition\n     * @category Methods\n     */\n    fitToSphere(sphereOrMesh, enableTransition) {\n        const promises = [];\n        const isObject3D = 'isObject3D' in sphereOrMesh;\n        const boundingSphere = isObject3D ?\n            CameraControls.createBoundingSphere(sphereOrMesh, _sphere) :\n            _sphere.copy(sphereOrMesh);\n        promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n        if (isPerspectiveCamera(this._camera)) {\n            const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n            promises.push(this.dollyTo(distanceToFit, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const width = this._camera.right - this._camera.left;\n            const height = this._camera.top - this._camera.bottom;\n            const diameter = 2 * boundingSphere.radius;\n            const zoom = Math.min(width / diameter, height / diameter);\n            promises.push(this.zoomTo(zoom, enableTransition));\n        }\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        return Promise.all(promises);\n    }\n    /**\n     * Look at the `target` from the `position`.\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n        this._changedDolly = 0;\n        const target = _v3B.set(targetX, targetY, targetZ);\n        const position = _v3A.set(positionX, positionY, positionZ);\n        this._targetEnd.copy(target);\n        this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Similar to setLookAt, but it interpolates between two states.\n     * @param positionAX\n     * @param positionAY\n     * @param positionAZ\n     * @param targetAX\n     * @param targetAY\n     * @param targetAZ\n     * @param positionBX\n     * @param positionBY\n     * @param positionBZ\n     * @param targetBX\n     * @param targetBY\n     * @param targetBZ\n     * @param t\n     * @param enableTransition\n     * @category Methods\n     */\n    lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n        this._changedDolly = 0;\n        const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n        const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n        _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n        const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n        const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n        _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n        this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n        const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n        const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n        const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n        this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set angle and distance by given position.\n     * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setPosition(positionX, positionY, positionZ, enableTransition = false) {\n        return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n    }\n    /**\n     * Set the target position where gaze at.\n     * An alias of `setLookAt()`, without position change. Thus keep the same position.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setTarget(targetX, targetY, targetZ, enableTransition = false) {\n        const pos = this.getPosition(_v3A);\n        const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n        // see https://github.com/yomotsu/camera-controls/issues/335\n        this._sphericalEnd.phi = clamp(this._sphericalEnd.phi, this.minPolarAngle, this.maxPolarAngle);\n        return promise;\n    }\n    /**\n     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n     * @param x\n     * @param y\n     * @param z\n     * @param enableTransition\n     * @category Methods\n     */\n    setFocalOffset(x, y, z, enableTransition = false) {\n        this._isUserControllingOffset = false;\n        this._focalOffsetEnd.set(x, y, z);\n        this._needsUpdate = true;\n        if (!enableTransition)\n            this._focalOffset.copy(this._focalOffsetEnd);\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) &&\n                approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) &&\n                approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set orbit point without moving the camera.\n     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @category Methods\n     */\n    setOrbitPoint(targetX, targetY, targetZ) {\n        this._camera.updateMatrixWorld();\n        _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n        _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n        const position = _v3A.set(targetX, targetY, targetZ);\n        const distance = position.distanceTo(this._camera.position);\n        const cameraToPoint = position.sub(this._camera.position);\n        _xColumn.multiplyScalar(cameraToPoint.x);\n        _yColumn.multiplyScalar(cameraToPoint.y);\n        _zColumn.multiplyScalar(cameraToPoint.z);\n        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n        _v3A.z = _v3A.z + distance;\n        this.dollyTo(distance, false);\n        this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n        this.moveTo(targetX, targetY, targetZ, false);\n    }\n    /**\n     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n     * @param box3\n     * @category Methods\n     */\n    setBoundary(box3) {\n        if (!box3) {\n            this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n            this._boundary.max.set(Infinity, Infinity, Infinity);\n            this._needsUpdate = true;\n            return;\n        }\n        this._boundary.copy(box3);\n        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n        this._needsUpdate = true;\n    }\n    /**\n     * Set (or unset) the current viewport.\n     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n     * @param viewportOrX\n     * @param y\n     * @param width\n     * @param height\n     * @category Methods\n     */\n    setViewport(viewportOrX, y, width, height) {\n        if (viewportOrX === null) { // null\n            this._viewport = null;\n            return;\n        }\n        this._viewport = this._viewport || new THREE.Vector4();\n        if (typeof viewportOrX === 'number') { // number\n            this._viewport.set(viewportOrX, y, width, height);\n        }\n        else { // Vector4\n            this._viewport.copy(viewportOrX);\n        }\n    }\n    /**\n     * Calculate the distance to fit the box.\n     * @param width box width\n     * @param height box height\n     * @param depth box depth\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitBox(width, height, depth, cover = false) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox'))\n            return this._spherical.radius;\n        const boundingRectAspect = width / height;\n        const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n        const aspect = this._camera.aspect;\n        const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n        return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n    }\n    /**\n     * Calculate the distance to fit the sphere.\n     * @param radius sphere radius\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitSphere(radius) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere'))\n            return this._spherical.radius;\n        // https://stackoverflow.com/a/44849975\n        const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n        const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n        const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n        return radius / (Math.sin(fov * 0.5));\n    }\n    /**\n     * Returns the orbit center position, where the camera looking at.\n     * @param out The receiving Vector3 instance to copy the result\n     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n     * @category Methods\n     */\n    getTarget(out, receiveEndValue = true) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(receiveEndValue ? this._targetEnd : this._target);\n    }\n    /**\n     * Returns the camera position.\n     * @param out The receiving Vector3 instance to copy the result\n     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n     * @category Methods\n     */\n    getPosition(out, receiveEndValue = true) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.setFromSpherical(receiveEndValue ? this._sphericalEnd : this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(receiveEndValue ? this._targetEnd : this._target);\n    }\n    /**\n     * Returns the spherical coordinates of the orbit.\n     * @param out The receiving Spherical instance to copy the result\n     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n     * @category Methods\n     */\n    getSpherical(out, receiveEndValue = true) {\n        const _out = out || new THREE.Spherical();\n        return _out.copy(receiveEndValue ? this._sphericalEnd : this._spherical);\n    }\n    /**\n     * Returns the focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n     * @param out The receiving Vector3 instance to copy the result\n     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n     * @category Methods\n     */\n    getFocalOffset(out, receiveEndValue = true) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(receiveEndValue ? this._focalOffsetEnd : this._focalOffset);\n    }\n    /**\n     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n     * @category Methods\n     */\n    normalizeRotations() {\n        this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n        if (this._sphericalEnd.theta < 0)\n            this._sphericalEnd.theta += PI_2;\n        this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n    }\n    /**\n     * stop all transitions.\n     */\n    stop() {\n        this._focalOffset.copy(this._focalOffsetEnd);\n        this._target.copy(this._targetEnd);\n        this._spherical.copy(this._sphericalEnd);\n        this._zoom = this._zoomEnd;\n    }\n    /**\n     * Reset all rotation and position to defaults.\n     * @param enableTransition\n     * @category Methods\n     */\n    reset(enableTransition = false) {\n        if (!approxEquals(this._camera.up.x, this._cameraUp0.x) ||\n            !approxEquals(this._camera.up.y, this._cameraUp0.y) ||\n            !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n            this._camera.up.copy(this._cameraUp0);\n            const position = this.getPosition(_v3A);\n            this.updateCameraUp();\n            this.setPosition(position.x, position.y, position.z);\n        }\n        const promises = [\n            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),\n            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),\n            this.zoomTo(this._zoom0, enableTransition),\n        ];\n        return Promise.all(promises);\n    }\n    /**\n     * Set current camera position as the default position.\n     * @category Methods\n     */\n    saveState() {\n        this._cameraUp0.copy(this._camera.up);\n        this.getTarget(this._target0);\n        this.getPosition(this._position0);\n        this._zoom0 = this._zoom;\n        this._focalOffset0.copy(this._focalOffset);\n    }\n    /**\n     * Sync camera-up direction.\n     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n     * @category Methods\n     */\n    updateCameraUp() {\n        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n    }\n    /**\n     * Apply current camera-up direction to the camera.\n     * The orbit system will be re-initialized with the current position.\n     * @category Methods\n     */\n    applyCameraUp() {\n        const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();\n        // So first find the vector off to the side, orthogonal to both this.object.up and\n        // the \"view\" vector.\n        const side = _v3B.crossVectors(cameraDirection, this._camera.up);\n        // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n        // This vector will be the new \"up\" vector.\n        this._camera.up.crossVectors(side, cameraDirection).normalize();\n        this._camera.updateMatrixWorld();\n        const position = this.getPosition(_v3A);\n        this.updateCameraUp();\n        this.setPosition(position.x, position.y, position.z);\n    }\n    /**\n     * Update camera position and directions.\n     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n     * @param delta\n     * @returns updated\n     * @category Methods\n     */\n    update(delta) {\n        const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n        const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n        const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n        const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n        const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n        const deltaZoom = this._zoomEnd - this._zoom;\n        // update theta\n        if (approxZero(deltaTheta)) {\n            this._thetaVelocity.value = 0;\n            this._spherical.theta = this._sphericalEnd.theta;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update phi\n        if (approxZero(deltaPhi)) {\n            this._phiVelocity.value = 0;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update distance\n        if (approxZero(deltaRadius)) {\n            this._radiusVelocity.value = 0;\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        else {\n            const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);\n            this._needsUpdate = true;\n        }\n        // update target position\n        if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n            this._targetVelocity.set(0, 0, 0);\n            this._target.copy(this._targetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);\n            this._needsUpdate = true;\n        }\n        // update focalOffset\n        if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n            this._focalOffsetVelocity.set(0, 0, 0);\n            this._focalOffset.copy(this._focalOffsetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);\n            this._needsUpdate = true;\n        }\n        // update zoom\n        if (approxZero(deltaZoom)) {\n            this._zoomVelocity.value = 0;\n            this._zoom = this._zoomEnd;\n        }\n        else {\n            const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n            this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);\n        }\n        if (this.dollyToCursor) {\n            if (isPerspectiveCamera(this._camera) && this._changedDolly !== 0) {\n                const dollyControlAmount = this._spherical.radius - this._lastDistance;\n                const camera = this._camera;\n                const cameraDirection = this._getCameraDirection(_cameraDirection);\n                const planeX = _v3A.copy(cameraDirection).cross(camera.up).normalize();\n                if (planeX.lengthSq() === 0)\n                    planeX.x = 1.0;\n                const planeY = _v3B.crossVectors(planeX, cameraDirection);\n                const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n                const prevRadius = this._sphericalEnd.radius - dollyControlAmount;\n                const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n                const cursor = _v3C.copy(this._targetEnd)\n                    .add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect))\n                    .add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n                const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);\n                const isMin = this._lastDollyDirection === DOLLY_DIRECTION.IN && this._spherical.radius <= this.minDistance;\n                const isMax = this._lastDollyDirection === DOLLY_DIRECTION.OUT && this.maxDistance <= this._spherical.radius;\n                if (this.infinityDolly && (isMin || isMax)) {\n                    this._sphericalEnd.radius -= dollyControlAmount;\n                    this._spherical.radius -= dollyControlAmount;\n                    const dollyAmount = _v3B.copy(cameraDirection).multiplyScalar(-dollyControlAmount);\n                    newTargetEnd.add(dollyAmount);\n                }\n                // target position may be moved beyond boundary.\n                this._boundary.clampPoint(newTargetEnd, newTargetEnd);\n                const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);\n                this._targetEnd.copy(newTargetEnd);\n                this._target.add(targetEndDiff);\n                this._changedDolly -= dollyControlAmount;\n                if (approxZero(this._changedDolly))\n                    this._changedDolly = 0;\n            }\n            else if (isOrthographicCamera(this._camera) && this._changedZoom !== 0) {\n                const dollyControlAmount = this._zoom - this._lastZoom;\n                const camera = this._camera;\n                const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n                const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n                const prevZoom = this._zoom - dollyControlAmount;\n                const lerpRatio = -(prevZoom - this._zoom) / this._zoom;\n                // find the \"distance\" (aka plane constant in three.js) of Plane\n                // from a given position (this._targetEnd) and normal vector (cameraDirection)\n                // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n                const cameraDirection = this._getCameraDirection(_cameraDirection);\n                const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n                const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);\n                const newPlaneConstant = newTargetEnd.dot(cameraDirection);\n                // Pull back the camera depth that has moved, to be the camera stationary as zoom\n                const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n                newTargetEnd.sub(pullBack);\n                // target position may be moved beyond boundary.\n                this._boundary.clampPoint(newTargetEnd, newTargetEnd);\n                const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);\n                this._targetEnd.copy(newTargetEnd);\n                this._target.add(targetEndDiff);\n                // this._target.copy( this._targetEnd );\n                this._changedZoom -= dollyControlAmount;\n                if (approxZero(this._changedZoom))\n                    this._changedZoom = 0;\n            }\n        }\n        if (this._camera.zoom !== this._zoom) {\n            this._camera.zoom = this._zoom;\n            this._camera.updateProjectionMatrix();\n            this._updateNearPlaneCorners();\n            this._needsUpdate = true;\n        }\n        this._dragNeedsUpdate = true;\n        // collision detection\n        const maxDistance = this._collisionTest();\n        this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n        // decompose spherical to the camera position\n        this._spherical.makeSafe();\n        this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n        this._camera.lookAt(this._target);\n        // set offset after the orbit movement\n        const affectOffset = !approxZero(this._focalOffset.x) ||\n            !approxZero(this._focalOffset.y) ||\n            !approxZero(this._focalOffset.z);\n        if (affectOffset) {\n            _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n            _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n            _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n            _xColumn.multiplyScalar(this._focalOffset.x);\n            _yColumn.multiplyScalar(-this._focalOffset.y);\n            _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n            _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n            this._camera.position.add(_v3A);\n            this._camera.updateMatrixWorld();\n        }\n        if (this._boundaryEnclosesCamera) {\n            this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n        }\n        const updated = this._needsUpdate;\n        if (updated && !this._updatedLastTime) {\n            this._hasRested = false;\n            this.dispatchEvent({ type: 'wake' });\n            this.dispatchEvent({ type: 'update' });\n        }\n        else if (updated) {\n            this.dispatchEvent({ type: 'update' });\n            if (approxZero(deltaTheta, this.restThreshold) &&\n                approxZero(deltaPhi, this.restThreshold) &&\n                approxZero(deltaRadius, this.restThreshold) &&\n                approxZero(deltaTarget.x, this.restThreshold) &&\n                approxZero(deltaTarget.y, this.restThreshold) &&\n                approxZero(deltaTarget.z, this.restThreshold) &&\n                approxZero(deltaOffset.x, this.restThreshold) &&\n                approxZero(deltaOffset.y, this.restThreshold) &&\n                approxZero(deltaOffset.z, this.restThreshold) &&\n                approxZero(deltaZoom, this.restThreshold) &&\n                !this._hasRested) {\n                this._hasRested = true;\n                this.dispatchEvent({ type: 'rest' });\n            }\n        }\n        else if (!updated && this._updatedLastTime) {\n            this.dispatchEvent({ type: 'sleep' });\n        }\n        this._lastDistance = this._spherical.radius;\n        this._lastZoom = this._zoom;\n        this._updatedLastTime = updated;\n        this._needsUpdate = false;\n        return updated;\n    }\n    /**\n     * Get all state in JSON string\n     * @category Methods\n     */\n    toJSON() {\n        return JSON.stringify({\n            enabled: this._enabled,\n            minDistance: this.minDistance,\n            maxDistance: infinityToMaxNumber(this.maxDistance),\n            minZoom: this.minZoom,\n            maxZoom: infinityToMaxNumber(this.maxZoom),\n            minPolarAngle: this.minPolarAngle,\n            maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n            minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n            maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n            smoothTime: this.smoothTime,\n            draggingSmoothTime: this.draggingSmoothTime,\n            dollySpeed: this.dollySpeed,\n            truckSpeed: this.truckSpeed,\n            dollyToCursor: this.dollyToCursor,\n            target: this._targetEnd.toArray(),\n            position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n            zoom: this._zoomEnd,\n            focalOffset: this._focalOffsetEnd.toArray(),\n            target0: this._target0.toArray(),\n            position0: this._position0.toArray(),\n            zoom0: this._zoom0,\n            focalOffset0: this._focalOffset0.toArray(),\n        });\n    }\n    /**\n     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n     * @param json\n     * @param enableTransition\n     * @category Methods\n     */\n    fromJSON(json, enableTransition = false) {\n        const obj = JSON.parse(json);\n        this.enabled = obj.enabled;\n        this.minDistance = obj.minDistance;\n        this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n        this.minZoom = obj.minZoom;\n        this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n        this.minPolarAngle = obj.minPolarAngle;\n        this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n        this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n        this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n        this.smoothTime = obj.smoothTime;\n        this.draggingSmoothTime = obj.draggingSmoothTime;\n        this.dollySpeed = obj.dollySpeed;\n        this.truckSpeed = obj.truckSpeed;\n        this.dollyToCursor = obj.dollyToCursor;\n        this._target0.fromArray(obj.target0);\n        this._position0.fromArray(obj.position0);\n        this._zoom0 = obj.zoom0;\n        this._focalOffset0.fromArray(obj.focalOffset0);\n        this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n        _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n        this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n        this.dollyTo(_sphericalA.radius, enableTransition);\n        this.zoomTo(obj.zoom, enableTransition);\n        this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n        this._needsUpdate = true;\n    }\n    /**\n     * Attach all internal event handlers to enable drag control.\n     * @category Methods\n     */\n    connect(domElement) {\n        if (this._domElement) {\n            console.warn('camera-controls is already connected.');\n            return;\n        }\n        domElement.setAttribute('data-camera-controls-version', VERSION);\n        this._addAllEventListeners(domElement);\n        this._getClientRect(this._elementRect);\n    }\n    /**\n     * Detach all internal event handlers to disable drag control.\n     */\n    disconnect() {\n        this.cancel();\n        this._removeAllEventListeners();\n        if (this._domElement) {\n            this._domElement.removeAttribute('data-camera-controls-version');\n            this._domElement = undefined;\n        }\n    }\n    /**\n     * Dispose the cameraControls instance itself, remove all eventListeners.\n     * @category Methods\n     */\n    dispose() {\n        // remove all user event listeners\n        this.removeAllEventListeners();\n        // remove all internal event listeners\n        this.disconnect();\n    }\n    // it's okay to expose public though\n    _getTargetDirection(out) {\n        // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n        return out.setFromSpherical(this._spherical).divideScalar(this._spherical.radius).applyQuaternion(this._yAxisUpSpaceInverse);\n    }\n    // it's okay to expose public though\n    _getCameraDirection(out) {\n        return this._getTargetDirection(out).negate();\n    }\n    _findPointerById(pointerId) {\n        return this._activePointers.find((activePointer) => activePointer.pointerId === pointerId);\n    }\n    _findPointerByMouseButton(mouseButton) {\n        return this._activePointers.find((activePointer) => activePointer.mouseButton === mouseButton);\n    }\n    _disposePointer(pointer) {\n        this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n    }\n    _encloseToBoundary(position, offset, friction) {\n        const offsetLength2 = offset.lengthSq();\n        if (offsetLength2 === 0.0) { // sanity check\n            return position;\n        }\n        // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n        const newTarget = _v3B.copy(offset).add(position); // target\n        const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n        const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n        const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n        if (deltaClampedTargetLength2 === 0.0) { // when the position doesn't have to be clamped\n            return position.add(offset);\n        }\n        else if (deltaClampedTargetLength2 === offsetLength2) { // when the position is completely stuck\n            return position;\n        }\n        else if (friction === 0.0) {\n            return position.add(offset).add(deltaClampedTarget);\n        }\n        else {\n            const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n            return position\n                .add(_v3B.copy(offset).multiplyScalar(offsetFactor))\n                .add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n        }\n    }\n    _updateNearPlaneCorners() {\n        if (isPerspectiveCamera(this._camera)) {\n            const camera = this._camera;\n            const near = camera.near;\n            const fov = camera.getEffectiveFOV() * DEG2RAD;\n            const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n            const widthHalf = heightHalf * camera.aspect; // near plain half width\n            this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n            this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const zoomInv = 1 / camera.zoom;\n            const left = camera.left * zoomInv;\n            const right = camera.right * zoomInv;\n            const top = camera.top * zoomInv;\n            const bottom = camera.bottom * zoomInv;\n            this._nearPlaneCorners[0].set(left, top, 0);\n            this._nearPlaneCorners[1].set(right, top, 0);\n            this._nearPlaneCorners[2].set(right, bottom, 0);\n            this._nearPlaneCorners[3].set(left, bottom, 0);\n        }\n    }\n    // lateUpdate\n    _collisionTest() {\n        let distance = Infinity;\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (!hasCollider)\n            return distance;\n        if (notSupportedInOrthographicCamera(this._camera, '_collisionTest'))\n            return distance;\n        const rayDirection = this._getTargetDirection(_cameraDirection);\n        _rotationMatrix.lookAt(_ORIGIN, rayDirection, this._camera.up);\n        for (let i = 0; i < 4; i++) {\n            const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n            nearPlaneCorner.applyMatrix4(_rotationMatrix);\n            const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n            _raycaster.set(origin, rayDirection);\n            _raycaster.far = this._spherical.radius + 1;\n            const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n            if (intersects.length !== 0 && intersects[0].distance < distance) {\n                distance = intersects[0].distance;\n            }\n        }\n        return distance;\n    }\n    /**\n     * Get its client rect and package into given `DOMRect` .\n     */\n    _getClientRect(target) {\n        if (!this._domElement)\n            return;\n        const rect = this._domElement.getBoundingClientRect();\n        target.x = rect.left;\n        target.y = rect.top;\n        if (this._viewport) {\n            target.x += this._viewport.x;\n            target.y += rect.height - this._viewport.w - this._viewport.y;\n            target.width = this._viewport.z;\n            target.height = this._viewport.w;\n        }\n        else {\n            target.width = rect.width;\n            target.height = rect.height;\n        }\n        return target;\n    }\n    _createOnRestPromise(resolveImmediately) {\n        if (resolveImmediately)\n            return Promise.resolve();\n        this._hasRested = false;\n        this.dispatchEvent({ type: 'transitionstart' });\n        return new Promise((resolve) => {\n            const onResolve = () => {\n                this.removeEventListener('rest', onResolve);\n                resolve();\n            };\n            this.addEventListener('rest', onResolve);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _addAllEventListeners(_domElement) { }\n    _removeAllEventListeners() { }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    get dampingFactor() {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    set dampingFactor(_) {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    get draggingDampingFactor() {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    set draggingDampingFactor(_) {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n    }\n    static createBoundingSphere(object3d, out = new THREE.Sphere()) {\n        const boundingSphere = out;\n        const center = boundingSphere.center;\n        _box3A.makeEmpty();\n        // find the center\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            _box3A.expandByObject(object);\n        });\n        _box3A.getCenter(center);\n        // find the radius\n        let maxRadiusSq = 0;\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            const mesh = object;\n            if (!mesh.geometry)\n                return;\n            const geometry = mesh.geometry.clone();\n            geometry.applyMatrix4(mesh.matrixWorld);\n            const bufferGeometry = geometry;\n            const position = bufferGeometry.attributes.position;\n            for (let i = 0, l = position.count; i < l; i++) {\n                _v3A.fromBufferAttribute(position, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n            }\n        });\n        boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        return boundingSphere;\n    }\n}\n\nexport { EventDispatcher, CameraControls as default };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { Box3, MathUtils, Matrix4, Quaternion, Raycaster, Sphere, Spherical, Vector2, Vector3, Vector4 } from 'three';\nimport * as React from 'react';\nimport { forwardRef, useMemo, useEffect } from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport CameraControlsImpl from 'camera-controls';\nexport { default as CameraControlsImpl } from 'camera-controls';\n\nconst CameraControls = /* @__PURE__ */forwardRef((props, ref) => {\n  // useMemo is used here instead of useEffect, otherwise the useMemo below runs first and throws\n  useMemo(() => {\n    // to allow for tree shaking, we only import the subset of THREE that is used by camera-controls\n    // see https://github.com/yomotsu/camera-controls#important\n    const subsetOfTHREE = {\n      Box3,\n      MathUtils: {\n        clamp: MathUtils.clamp\n      },\n      Matrix4,\n      Quaternion,\n      Raycaster,\n      Sphere,\n      Spherical,\n      Vector2,\n      Vector3,\n      Vector4\n    };\n    CameraControlsImpl.install({\n      THREE: subsetOfTHREE\n    });\n    extend({\n      CameraControlsImpl\n    });\n  }, []);\n  const {\n    camera,\n    domElement,\n    makeDefault,\n    onControlStart,\n    onControl,\n    onControlEnd,\n    onTransitionStart,\n    onUpdate,\n    onWake,\n    onRest,\n    onSleep,\n    onStart,\n    onEnd,\n    onChange,\n    regress,\n    ...restProps\n  } = props;\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const invalidate = useThree(state => state.invalidate);\n  const events = useThree(state => state.events);\n  const setEvents = useThree(state => state.setEvents);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = useMemo(() => new CameraControlsImpl(explCamera), [explCamera]);\n  useFrame((state, delta) => {\n    controls.update(delta);\n  }, -1);\n  useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.disconnect();\n  }, [explDomElement, controls]);\n  useEffect(() => {\n    function invalidateAndRegress() {\n      invalidate();\n      if (regress) performance.regress();\n    }\n    const handleControlStart = e => {\n      invalidateAndRegress();\n      onControlStart == null || onControlStart(e);\n      onStart == null || onStart(e); // backwards compatibility\n    };\n    const handleControl = e => {\n      invalidateAndRegress();\n      onControl == null || onControl(e);\n      onChange == null || onChange(e); // backwards compatibility\n    };\n    const handleControlEnd = e => {\n      onControlEnd == null || onControlEnd(e);\n      onEnd == null || onEnd(e); // backwards compatibility\n    };\n    const handleTransitionStart = e => {\n      invalidateAndRegress();\n      onTransitionStart == null || onTransitionStart(e);\n      onChange == null || onChange(e); // backwards compatibility\n    };\n    const handleUpdate = e => {\n      invalidateAndRegress();\n      onUpdate == null || onUpdate(e);\n      onChange == null || onChange(e); // backwards compatibility\n    };\n    const handleWake = e => {\n      invalidateAndRegress();\n      onWake == null || onWake(e);\n      onChange == null || onChange(e); // backwards compatibility\n    };\n    const handleRest = e => {\n      onRest == null || onRest(e);\n    };\n    const handleSleep = e => {\n      onSleep == null || onSleep(e);\n    };\n    controls.addEventListener('controlstart', handleControlStart);\n    controls.addEventListener('control', handleControl);\n    controls.addEventListener('controlend', handleControlEnd);\n    controls.addEventListener('transitionstart', handleTransitionStart);\n    controls.addEventListener('update', handleUpdate);\n    controls.addEventListener('wake', handleWake);\n    controls.addEventListener('rest', handleRest);\n    controls.addEventListener('sleep', handleSleep);\n    return () => {\n      controls.removeEventListener('controlstart', handleControlStart);\n      controls.removeEventListener('control', handleControl);\n      controls.removeEventListener('controlend', handleControlEnd);\n      controls.removeEventListener('transitionstart', handleTransitionStart);\n      controls.removeEventListener('update', handleUpdate);\n      controls.removeEventListener('wake', handleWake);\n      controls.removeEventListener('rest', handleRest);\n      controls.removeEventListener('sleep', handleSleep);\n    };\n  }, [controls, invalidate, setEvents, regress, performance, onControlStart, onControl, onControlEnd, onTransitionStart, onUpdate, onWake, onRest, onSleep, onChange, onStart, onEnd]);\n  useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls: controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, restProps));\n});\n\nexport { CameraControls };\n","import { WebGLCubeRenderTarget, CubeCamera } from 'three';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\n\nfunction Preload({\n  all,\n  scene,\n  camera\n}) {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const dCamera = useThree(({\n    camera\n  }) => camera);\n  const dScene = useThree(({\n    scene\n  }) => scene);\n\n  // Layout effect because it must run before React commits\n  React.useLayoutEffect(() => {\n    const invisible = [];\n    if (all) {\n      (scene || dScene).traverse(object => {\n        if (object.visible === false) {\n          invisible.push(object);\n          object.visible = true;\n        }\n      });\n    }\n    // Now compile the scene\n    gl.compile(scene || dScene, camera || dCamera);\n    // And for good measure, hit it with a cube camera\n    const cubeRenderTarget = new WebGLCubeRenderTarget(128);\n    const cubeCamera = new CubeCamera(0.01, 100000, cubeRenderTarget);\n    cubeCamera.update(gl, scene || dScene);\n    cubeRenderTarget.dispose();\n    // Flips these objects back\n    invisible.forEach(object => object.visible = false);\n  }, []);\n  return null;\n}\n\nexport { Preload };\n","import AgainstTheTide from \"./Resources/skateboard/against-the-tide.png\";\nimport BlackAndYellow from \"./Resources/skateboard/black-and-yellow.png\";\nimport GrayAndBlack from \"./Resources/skateboard/gray-and-black.png\";\nimport GreenAndNavy from \"./Resources/skateboard/green-and-navy.png\";\nimport GridStreaks from \"./Resources/skateboard/grid-streaks.png\";\nimport OniMask from \"./Resources/skateboard/OniMask.png\";\nimport PinkSwirl from \"./Resources/skateboard/PinkSwirl.png\";\nimport RedAndBlack from \"./Resources/skateboard/red-and-black.png\";\nimport RedAndWhite from \"./Resources/skateboard/red-and-white.png\";\nimport ThankYou from \"./Resources/skateboard/thank-you-deck.png\";\nimport WheelBlack from \"./Resources/skateboard/wheel-black.png\";\nimport WheelBlue from \"./Resources/skateboard/wheel-blue.png\";\nimport WheelCream from \"./Resources/skateboard/wheel-cream.png\";\nimport WheelGreen from \"./Resources/skateboard/wheel-green.png\";\nimport WheelNavy from \"./Resources/skateboard/wheel-navy.png\";\nimport WheelPink from \"./Resources/skateboard/wheel-pink.png\";\nimport WheelPurple from \"./Resources/skateboard/wheel-purple.png\";\nimport WheelRed from \"./Resources/skateboard/wheel-red.png\";\nimport WheelYellow from \"./Resources/skateboard/wheel-yellow.png\";\nimport YellowAndBlack from \"./Resources/skateboard/yellow-and-black.png\";\n\nexport class SkateboardOptions {\n  public static readonly METALS = [\n    \"#333\",\n    \"#6F6E6A\",\n    \"#34495E\",\n    \"#DEB887\",\n    \"#eee\",\n    \"#E84118\",\n    \"#068BD3\",\n    \"#A6E22E\",\n    \"#F1C40F\",\n    \"#8E44AD\",\n    \"#BA3763\",\n    \"#F1396E\",\n  ];\n\n  public static readonly DECKS = [\n    OniMask,\n    PinkSwirl,\n    RedAndBlack,\n    AgainstTheTide,\n    ThankYou,\n    YellowAndBlack,\n    RedAndWhite,\n    BlackAndYellow,\n    GreenAndNavy,\n    GrayAndBlack,\n    GridStreaks,\n  ];\n\n  public static readonly WHEELS = [\n    WheelBlack,\n    WheelBlue,\n    WheelCream,\n    WheelGreen,\n    WheelNavy,\n    WheelPink,\n    WheelPurple,\n    WheelRed,\n    WheelYellow,\n  ];\n}\n","export default \"__VITE_ASSET__xvwp8Rnn__\"","export default \"__VITE_ASSET__1wAkAbtI__\"","export default \"__VITE_ASSET__sUkDQYoJ__\"","export default \"__VITE_ASSET__1eh$Y5HD__\"","export default \"__VITE_ASSET__jb48tiyh__\"","export default \"__VITE_ASSET__jy3Yg8Jr__\"","export default \"__VITE_ASSET__avv$cffj__\"","export default \"__VITE_ASSET__iTf6FCZ7__\"","export default \"__VITE_ASSET__2k2a2M0e__\"","export default \"__VITE_ASSET__ezTLYmsE__\"","export default \"__VITE_ASSET__AmrMsqdM__\"","export default \"__VITE_ASSET__v8DDj7Wa__\"","export default \"__VITE_ASSET__CIkqgvzh__\"","export default \"__VITE_ASSET___3CIqszn__\"","export default \"__VITE_ASSET__7FQlAgZG__\"","export default \"__VITE_ASSET__DplcV58y__\"","export default \"__VITE_ASSET__AC3jlLzq__\"","export default \"__VITE_ASSET__DNmbfgSA__\"","export default \"__VITE_ASSET__csX0$JUH__\"","export default \"__VITE_ASSET__mseqTGld__\"","import { useCallback, useMemo, useRef } from \"react\";\nimport { Vector3 } from \"three\";\nimport { CameraControls } from \"@react-three/drei\";\n\nexport const DEFAULT_CAMERA_LOOK_AT = [0, 0.3, 0] as const;\nexport const DEFAULT_CAMERA_POSITION = [2.5, 0.75, 0] as const;\n\nexport const useCameraControls = () => {\n  const camera = useRef<CameraControls>(null);\n\n  const setCameraControls = useCallback(\n    (target: Vector3, position: Vector3) => {\n      if (!camera.current) {\n        return;\n      }\n      void camera.current.setTarget(target.x, target.y, target.z, true);\n      void camera.current.setPosition(position.x, position.y, position.z, true);\n    },\n    [camera],\n  );\n\n  const lookAtTruck = useCallback(() => {\n    setCameraControls(new Vector3(0, 0.29, 0.5), new Vector3(0.4, 0.3, 1));\n  }, [setCameraControls]);\n\n  const lookAtWheel = useCallback(() => {\n    setCameraControls(new Vector3(0.2, 0.54, 0.65), new Vector3(0.4, 1, 0.6));\n  }, [setCameraControls]);\n\n  const lookAtBolts = useCallback(() => {\n    setCameraControls(\n      new Vector3(0.15, 0.3, 0.62),\n      new Vector3(-0.75, 0.35, 0.8),\n    );\n  }, [setCameraControls]);\n\n  const lookAtDeck = useCallback(() => {\n    setCameraControls(\n      new Vector3(...DEFAULT_CAMERA_LOOK_AT),\n      new Vector3(...DEFAULT_CAMERA_POSITION),\n    );\n  }, [setCameraControls]);\n\n  return useMemo(\n    () => ({ camera, lookAtBolts, lookAtDeck, lookAtTruck, lookAtWheel }),\n    [lookAtBolts, lookAtDeck, lookAtTruck, lookAtWheel],\n  );\n};\n","import {\n  createContext,\n  createRef,\n  Dispatch,\n  RefObject,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { OptionalChildren } from \"@figliolia/react-lazy\";\nimport { CameraControls } from \"@react-three/drei\";\nimport { Callback } from \"Tools/Types\";\nimport { SkateboardOptions } from \"./SkateboardOptions\";\nimport { useCameraControls } from \"./useCameraControls\";\n\nconst CustomizerContext = createContext<ICustomizerContext>({\n  wheel: SkateboardOptions.WHEELS[0],\n  updateWheels: () => {},\n  deck: SkateboardOptions.DECKS[0],\n  updateDeck: () => {},\n  truck: SkateboardOptions.METALS[0],\n  updateTrucks: () => {},\n  bolt: SkateboardOptions.METALS[0],\n  updateBolts: () => {},\n  lookAtDeck: () => {},\n  camera: createRef(),\n});\n\ninterface ICustomizerContext {\n  wheel: string;\n  updateWheels: Callback<[string]>;\n  deck: string;\n  updateDeck: Callback<[string]>;\n  truck: string;\n  updateTrucks: Callback<[string]>;\n  bolt: string;\n  lookAtDeck: Callback;\n  updateBolts: Callback<[string]>;\n  camera: RefObject<CameraControls | null>;\n}\n\nexport const CustomizerContextProvider = ({ children }: OptionalChildren) => {\n  const [wheel, setWheel] = useState(SkateboardOptions.WHEELS[0]);\n  const [bolt, setBolt] = useState(SkateboardOptions.METALS[0]);\n  const [deck, setDeck] = useState(SkateboardOptions.DECKS[0]);\n  const [truck, setTruck] = useState(SkateboardOptions.METALS[0]);\n  const { camera, lookAtBolts, lookAtTruck, lookAtWheel, lookAtDeck } =\n    useCameraControls();\n\n  const createLookAt = useCallback(\n    (stateSetter: Dispatch<SetStateAction<string>>, lookAt: Callback) =>\n      (update: string) => {\n        stateSetter(update);\n        lookAt();\n      },\n    [],\n  );\n\n  const updateWheels = useMemo(\n    () => createLookAt(setWheel, lookAtWheel),\n    [createLookAt, lookAtWheel],\n  );\n  const updateTrucks = useMemo(\n    () => createLookAt(setTruck, lookAtTruck),\n    [createLookAt, lookAtTruck],\n  );\n  const updateDeck = useMemo(\n    () => createLookAt(setDeck, lookAtDeck),\n    [createLookAt, lookAtDeck],\n  );\n  const updateBolts = useMemo(\n    () => createLookAt(setBolt, lookAtBolts),\n    [createLookAt, lookAtBolts],\n  );\n\n  const value = useMemo(\n    () => ({\n      camera,\n      wheel,\n      bolt,\n      deck,\n      truck,\n      lookAtDeck,\n      updateWheels,\n      updateTrucks,\n      updateDeck,\n      updateBolts,\n    }),\n    [\n      wheel,\n      bolt,\n      deck,\n      truck,\n      camera,\n      lookAtDeck,\n      updateWheels,\n      updateTrucks,\n      updateDeck,\n      updateBolts,\n    ],\n  );\n  return (\n    <CustomizerContext.Provider value={value}>\n      {children}\n    </CustomizerContext.Provider>\n  );\n};\n\nexport const useCustomizer = () => {\n  return useContext(CustomizerContext);\n};\n","import { CSSProperties, ReactNode, useCallback } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { Callback } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Option = ({\n  selected,\n  children,\n  onClick,\n  colorField,\n  imageField,\n  imageStyles,\n}: Props) => {\n  const classes = useClassNames(\"option\", { selected });\n\n  const onSelect = useCallback(() => {\n    onClick(colorField ?? imageField ?? \"\");\n  }, [onClick, colorField, imageField]);\n\n  return (\n    <li>\n      <button className={classes} onClick={onSelect}>\n        {imageField ? (\n          <img src={imageField} alt=\"\" style={imageStyles} />\n        ) : (\n          <div style={{ backgroundColor: colorField ?? undefined }} />\n        )}\n        <span>{children}</span>\n      </button>\n    </li>\n  );\n};\n\ninterface CommonProps {\n  selected: boolean;\n  children: ReactNode;\n  onClick: Callback<[string]>;\n  imageStyles?: CSSProperties;\n}\n\ntype Props = CommonProps &\n  (\n    | {\n        colorField?: never;\n        imageField: string;\n      }\n    | {\n        colorField: string;\n        imageField?: never;\n        imgixParams?: never;\n      }\n  );\n","import { ReactNode, useMemo } from \"react\";\nimport { OptionalChildren } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Options = ({ title, selectedName, children }: Props) => {\n  const formatted = useMemo(\n    () => (selectedName ? getName(selectedName) : \"\"),\n    [selectedName],\n  );\n  return (\n    <div className=\"options\">\n      <div>\n        <h2>{title}</h2>\n        <p>\n          <span>| </span>\n          {formatted}\n        </p>\n      </div>\n      <ul>{children}</ul>\n    </div>\n  );\n};\n\ninterface Props extends OptionalChildren {\n  title?: ReactNode;\n  selectedName?: string;\n}\n\nfunction getName(path: string) {\n  const tokens = path.split(\"/\");\n  const file = tokens[tokens.length - 1];\n  const [name] = file.split(\".\");\n  return name.replace(/-/g, \" \");\n}\n\nexport * from \"./Option\";\n","import { PropLess } from \"Tools/Types\";\nimport { useCustomizer } from \"../CustomizerContext\";\nimport { SkateboardOptions } from \"../SkateboardOptions\";\nimport { Option, Options } from \"./Options\";\nimport \"./styles.scss\";\n\nexport const Controls = (_: PropLess) => {\n  const {\n    deck,\n    bolt,\n    wheel,\n    truck,\n    updateBolts,\n    updateDeck,\n    updateTrucks,\n    updateWheels,\n  } = useCustomizer();\n\n  return (\n    <div className=\"controls\">\n      <Options title=\"Deck\" selectedName={deck}>\n        {SkateboardOptions.DECKS.map(option => (\n          <Option\n            key={option}\n            imageField={option}\n            onClick={updateDeck}\n            imageStyles={{\n              width: \"500%\",\n              height: \"500%\",\n              translate: \"20% -0%\",\n              objectFit: \"cover\",\n            }}\n            selected={option === deck}>\n            {option.replace(/-/g, \" \")}\n          </Option>\n        ))}\n      </Options>\n      <Options title=\"Wheels\" selectedName={wheel}>\n        {SkateboardOptions.WHEELS.map(option => (\n          <Option\n            key={option}\n            imageField={option}\n            onClick={updateWheels}\n            imageStyles={{\n              width: \"125%\",\n              height: \"125%\",\n              translate: \"6% 8%\",\n              objectFit: \"cover\",\n            }}\n            selected={option === wheel}>\n            {option.replace(/-/g, \" \")}\n          </Option>\n        ))}\n      </Options>\n      <Options title=\"Trucks\" selectedName={truck}>\n        {SkateboardOptions.METALS.map(option => (\n          <Option\n            key={option}\n            colorField={option}\n            onClick={updateTrucks}\n            selected={option === truck}>\n            {option.replace(/-/g, \" \")}\n          </Option>\n        ))}\n      </Options>\n      <Options title=\"Bolts\" selectedName={bolt}>\n        {SkateboardOptions.METALS.map(option => (\n          <Option\n            key={option}\n            colorField={option}\n            onClick={updateBolts}\n            selected={option === bolt}>\n            {option.replace(/-/g, \" \")}\n          </Option>\n        ))}\n      </Options>\n    </div>\n  );\n};\n","export default \"__VITE_ASSET__rsl4AS10__\"","import { useMemo } from \"react\";\nimport { MeshStandardMaterial } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Textures } from \"Tools/Textures\";\nimport { PropLess } from \"Tools/Types\";\nimport ConcreteNormal from \"../Resources/concrete-normal.avif\";\n\nexport const ENVIRONMENT_COLOR = \"#3b3a3a\";\n\nexport const Floor = (_: PropLess) => {\n  const normalMap = useTexture(ConcreteNormal, t => {\n    Textures.wrap(t).repeat(t, 30).rerender(t);\n    t.anisotropy = 8;\n  });\n\n  const material = useMemo(\n    () =>\n      new MeshStandardMaterial({\n        roughness: 0.75,\n        color: ENVIRONMENT_COLOR,\n        normalMap: normalMap,\n      }),\n    [normalMap],\n  );\n  return (\n    <mesh\n      castShadow\n      receiveShadow\n      position={[0, -0.005, 0]}\n      rotation={[-Math.PI / 2, 0, 0]}\n      material={material}>\n      <circleGeometry args={[20, 32]} />\n    </mesh>\n  );\n};\n","export default \"__VITE_ASSET__47Zf0UFr__\"","export default \"__VITE_ASSET__6eox$VVE__\"","import {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { type Mesh, Object3D, Texture } from \"three\";\nimport { GLTF } from \"three-stdlib\";\nimport { useGLTF } from \"@react-three/drei\";\nimport Skateboard from \"../../Resources/skateboard.gltf\";\nimport { useBolts } from \"./useBolts\";\nimport { useDeck } from \"./useDeck\";\nimport { useGripTape } from \"./useGripTape\";\nimport { useTrucks } from \"./useTrucks\";\nimport { useWheels } from \"./useWheels\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    GripTape: Mesh;\n    Wheel1: Mesh;\n    Wheel2: Mesh;\n    Deck: Mesh;\n    Wheel4: Mesh;\n    Bolts: Mesh;\n    Wheel3: Mesh;\n    Baseplates: Mesh;\n    Truck1: Mesh;\n    Truck2: Mesh;\n  };\n};\n\nexport const SkateboardModel = forwardRef(function SkateboardModel(\n  { wheelTexture, deckTexture, boltColor, truckColor, pos = \"upright\" }: Props,\n  ref: ForwardedRef<SMController>,\n) {\n  const { nodes } = useGLTF(Skateboard) as unknown as GLTFResult;\n  const wheelRefs = useRef<Object3D[]>([]);\n  const gripTapeMaterial = useGripTape();\n  const boltMaterial = useBolts(boltColor);\n  const truckMaterial = useTrucks(truckColor);\n  const deckMaterial = useDeck(deckTexture);\n  const wheelMaterial = useWheels(wheelTexture);\n\n  const cacheObjectReference = useCallback(\n    (index: number, target: RefObject<Object3D[]>) =>\n      (node: Object3D | null) => {\n        if (node) {\n          target.current[index] = node;\n        }\n      },\n    [],\n  );\n\n  const wheelCaches = useMemo(\n    () =>\n      Array.from({ length: 4 }, (_, i) => cacheObjectReference(i, wheelRefs)),\n    [cacheObjectReference],\n  );\n\n  const positions = useMemo(\n    () =>\n      ({\n        side: { rotation: [0, 0, Math.PI / 2], position: [0.25, 0.295, 0] },\n        upright: { rotation: [0, 0, 0], position: [0, 0, 0] },\n      }) as const,\n    [],\n  );\n\n  useImperativeHandle(ref, () => ({ wheels: wheelRefs }), [wheelRefs]);\n\n  return (\n    <group\n      dispose={null}\n      rotation={positions[pos].rotation}\n      position={positions[pos].position}>\n      <group name=\"Scene\">\n        <mesh\n          name=\"GripTape\"\n          castShadow\n          receiveShadow\n          material={gripTapeMaterial}\n          geometry={nodes.GripTape.geometry}\n          position={[0, 0.286, -0.002]}\n        />\n        <mesh\n          name=\"Wheel1\"\n          castShadow\n          receiveShadow\n          ref={wheelCaches[0]}\n          geometry={nodes.Wheel1.geometry}\n          material={wheelMaterial}\n          position={[0.238, 0.086, 0.635]}\n        />\n        <mesh\n          name=\"Wheel2\"\n          castShadow\n          receiveShadow\n          ref={wheelCaches[1]}\n          geometry={nodes.Wheel2.geometry}\n          material={wheelMaterial}\n          position={[-0.237, 0.086, 0.635]}\n        />\n        <mesh\n          name=\"Deck\"\n          castShadow\n          receiveShadow\n          geometry={nodes.Deck.geometry}\n          material={deckMaterial}\n          position={[0, 0.271, -0.002]}\n        />\n        <mesh\n          name=\"Wheel4\"\n          castShadow\n          receiveShadow\n          ref={wheelCaches[3]}\n          geometry={nodes.Wheel4.geometry}\n          material={wheelMaterial}\n          position={[-0.238, 0.086, -0.635]}\n          rotation={[Math.PI, 0, Math.PI]}\n        />\n        <mesh\n          name=\"Bolts\"\n          castShadow\n          receiveShadow\n          geometry={nodes.Bolts.geometry}\n          material={boltMaterial}\n          position={[0, 0.198, 0]}\n          rotation={[Math.PI, 0, Math.PI]}\n        />\n        <mesh\n          name=\"Wheel3\"\n          castShadow\n          receiveShadow\n          ref={wheelCaches[2]}\n          geometry={nodes.Wheel3.geometry}\n          material={wheelMaterial}\n          position={[0.237, 0.086, -0.635]}\n          rotation={[Math.PI, 0, Math.PI]}\n        />\n        <mesh\n          name=\"Baseplates\"\n          castShadow\n          receiveShadow\n          geometry={nodes.Baseplates.geometry}\n          material={truckMaterial}\n          position={[0, 0.211, 0]}\n        />\n        <mesh\n          name=\"Truck1\"\n          castShadow\n          receiveShadow\n          geometry={nodes.Truck1.geometry}\n          material={truckMaterial}\n          position={[0, 0.101, -0.617]}\n        />\n        <mesh\n          name=\"Truck2\"\n          castShadow\n          receiveShadow\n          geometry={nodes.Truck2.geometry}\n          material={truckMaterial}\n          position={[0, 0.101, 0.617]}\n          rotation={[Math.PI, 0, Math.PI]}\n        />\n      </group>\n    </group>\n  );\n});\n\nuseGLTF.preload(Skateboard);\n\nexport interface Props {\n  boltColor?: string;\n  truckColor?: string;\n  deckTexture: Texture;\n  wheelTexture: Texture;\n  pos?: \"upright\" | \"side\";\n}\n\nexport interface SMController {\n  wheels: RefObject<Object3D[]>;\n}\n","import { useMemo } from \"react\";\nimport { MeshStandardMaterial } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Textures } from \"Tools/Textures\";\nimport GripTapDiffuse from \"../../Resources/skateboard/griptape-diffuse.webp\";\nimport GripTapeRoughness from \"../../Resources/skateboard/griptape-roughness.webp\";\n\nexport const useGripTape = () => {\n  const gripTapeDiffuse = useTexture(GripTapDiffuse);\n  const gripTapeRoughness = useTexture(GripTapeRoughness);\n  return useMemo(() => {\n    const material = new MeshStandardMaterial({\n      map: gripTapeDiffuse,\n      bumpMap: gripTapeRoughness,\n      roughnessMap: gripTapeRoughness,\n      bumpScale: 3.5,\n      roughness: 0.8,\n      color: \"#555\",\n    });\n    if (gripTapeDiffuse) {\n      Textures.wrap(gripTapeDiffuse)\n        .repeat(gripTapeDiffuse, 9)\n        .rerender(gripTapeDiffuse);\n    }\n    if (gripTapeRoughness) {\n      Textures.wrap(gripTapeRoughness)\n        .repeat(gripTapeRoughness, 9)\n        .rerender(gripTapeRoughness);\n      gripTapeRoughness.anisotropy = 8;\n    }\n    return material;\n  }, [gripTapeDiffuse, gripTapeRoughness]);\n};\n","export default \"__VITE_ASSET__fGgUdfM6__\"","export default \"__VITE_ASSET__T0b0KajT__\"","import { useMemo } from \"react\";\nimport { MeshStandardMaterial } from \"three\";\n\nexport const useBolts = (color = \"#555\") => {\n  return useMemo(\n    () =>\n      new MeshStandardMaterial({\n        color,\n        metalness: 0.5,\n        roughness: 0.3,\n      }),\n    [color],\n  );\n};\n","import { useMemo } from \"react\";\nimport { MeshStandardMaterial, Vector2 } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Textures } from \"Tools/Textures\";\nimport MetalNormal from \"../../Resources/skateboard/metal-normal.avif\";\n\nexport const useTrucks = (color = \"#555\") => {\n  const metalNormal = useTexture(MetalNormal, t => {\n    Textures.wrap(t).repeat(t, 8).rerender(t);\n    t.anisotropy = 8;\n  });\n  return useMemo(\n    () =>\n      new MeshStandardMaterial({\n        color,\n        metalness: 0.8,\n        roughness: 0.25,\n        normalMap: metalNormal,\n        normalScale: new Vector2(0.3, 0.3),\n      }),\n    [color, metalNormal],\n  );\n};\n","export default \"__VITE_ASSET__pFIk1vHY__\"","import { useMemo } from \"react\";\nimport { MeshStandardMaterial, Texture } from \"three\";\n\nexport const useDeck = (texture: Texture) => {\n  return useMemo(\n    () =>\n      new MeshStandardMaterial({\n        roughness: 0.1,\n        map: texture,\n      }),\n    [texture],\n  );\n};\n","import { useMemo } from \"react\";\nimport { MeshStandardMaterial, Texture } from \"three\";\n\nexport const useWheels = (texture: Texture) => {\n  return useMemo(\n    () =>\n      new MeshStandardMaterial({\n        roughness: 0.35,\n        map: texture,\n      }),\n    [texture],\n  );\n};\n","import { SRGBColorSpace, Texture } from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { TextureResult } from \"./types\";\n\nexport const useSRGBTexture = <T extends string | string[]>(\n  urls: T,\n): TextureResult<T> => {\n  const deckTextures = useTexture(urls, t => {\n    const returnArray = Array.isArray(t);\n    const textures: Texture[] = returnArray\n      ? (deckTextures as Texture[])\n      : [deckTextures as Texture];\n    textures.forEach(t => {\n      t.flipY = false;\n      t.colorSpace = SRGBColorSpace;\n      t.needsUpdate = true;\n    });\n  });\n  return deckTextures as TextureResult<T>;\n};\n","import { useMemo } from \"react\";\nimport { useSRGBTexture } from \"./SkateboardModel/useSRGBTexture\";\n\nexport const useSelectedTexture = (options: string[], selection?: string) => {\n  const textures = useSRGBTexture(options);\n\n  const indices = useMemo(() => {\n    const hash: Record<string, number> = {};\n    const { length } = options;\n    for (let i = 0; i < length; i++) {\n      hash[options[i]] = i;\n    }\n    return hash;\n  }, [options]);\n\n  const selectionIndex = useMemo(\n    () => indices[selection ?? \"-1\"] ?? 0,\n    [indices, selection],\n  );\n  return useMemo(() => textures[selectionIndex], [textures, selectionIndex]);\n};\n","import gsap from \"gsap\";\nimport { Fragment, Suspense, useCallback, useEffect, useRef } from \"react\";\nimport { Mesh } from \"three\";\nimport { CameraControls, Environment, Preload } from \"@react-three/drei\";\nimport { useLabsLoader } from \"Hooks/useLabsLoader\";\nimport { PropLess } from \"Tools/Types\";\nimport { useCustomizer } from \"../CustomizerContext\";\nimport Lighting from \"../Resources/hdr/warehouse-512.hdr\";\nimport { SkateboardOptions } from \"../SkateboardOptions\";\nimport { ENVIRONMENT_COLOR, Floor } from \"./Floor\";\nimport { SkateboardModel, SMController } from \"./SkateboardModel\";\nimport { useSelectedTexture } from \"./useSelectedTexture\";\n\nconst DEFAULT_METAL_COLOR = \"#6f6e6a\";\n\nexport function PreviewCanvas(_: PropLess) {\n  useLabsLoader();\n  const floor = useRef<Mesh>(null);\n  const controller = useRef<SMController>(null);\n  const { camera, wheel, deck, bolt, truck, lookAtDeck } = useCustomizer();\n\n  const deckTexture = useSelectedTexture(SkateboardOptions.DECKS, deck);\n  const wheelTexture = useSelectedTexture(SkateboardOptions.WHEELS, wheel);\n\n  const truckColor = truck ?? DEFAULT_METAL_COLOR;\n  const boltColor = bolt ?? DEFAULT_METAL_COLOR;\n\n  const onCameraControlStart = useCallback(() => {\n    if (\n      !camera.current ||\n      !floor.current ||\n      camera.current.colliderMeshes.length\n    ) {\n      return;\n    }\n    camera.current.colliderMeshes = [floor.current];\n  }, [camera]);\n\n  useEffect(() => {\n    if (!controller?.current?.wheels?.current?.length) {\n      return;\n    }\n    for (const wheelMesh of controller.current.wheels.current) {\n      if (wheelMesh) {\n        gsap.to(wheelMesh.rotation, {\n          x: \"+=30\",\n          duration: 2.5,\n          ease: \"circ.out\",\n        });\n      }\n    }\n  }, [wheel]);\n\n  useEffect(() => {\n    if (camera.current) {\n      lookAtDeck();\n    }\n  }, [lookAtDeck, camera]);\n\n  return (\n    <Fragment>\n      <Suspense fallback={null}>\n        <Environment files={Lighting} environmentIntensity={0.6} />\n        <directionalLight\n          castShadow\n          lookAt={[0, 0, 0]}\n          position={[1, 1, 1]}\n          intensity={1.6}\n        />\n        <fog attach=\"fog\" args={[ENVIRONMENT_COLOR, 3, 10]} />\n        <color attach=\"background\" args={[ENVIRONMENT_COLOR]} />\n        <Floor />\n        <mesh rotation={[-Math.PI / 2, 0, 0]} ref={floor}>\n          <planeGeometry args={[6, 6]} />\n          <meshBasicMaterial visible={false} />\n        </mesh>\n        <SkateboardModel\n          pos=\"side\"\n          ref={controller}\n          boltColor={boltColor}\n          truckColor={truckColor}\n          deckTexture={deckTexture}\n          wheelTexture={wheelTexture}\n        />\n        <CameraControls\n          makeDefault\n          ref={camera}\n          maxDistance={4}\n          minDistance={0.2}\n          onStart={onCameraControlStart}\n        />\n      </Suspense>\n      <Preload all />\n    </Fragment>\n  );\n}\n","import { Canvas } from \"@react-three/fiber\";\nimport { SplitHeading } from \"Components/SplitHeading\";\nimport { PropLess } from \"Tools/Types\";\nimport { Controls } from \"./Controls\";\nimport { CustomizerContextProvider } from \"./CustomizerContext\";\nimport { PreviewCanvas } from \"./Preview\";\nimport { DEFAULT_CAMERA_POSITION } from \"./useCameraControls\";\nimport \"./styles.scss\";\n\nexport default function SkateboardScene(_: PropLess) {\n  return (\n    <div className=\"skateboard-scene\">\n      <CustomizerContextProvider>\n        <div className=\"preview\">\n          <div className=\"canvas-container\">\n            <Canvas\n              shadows\n              camera={{\n                fov: 50,\n                position: DEFAULT_CAMERA_POSITION,\n              }}>\n              <PreviewCanvas />\n            </Canvas>\n          </div>\n        </div>\n        <div className=\"options-menu\">\n          <SplitHeading text=\"Build Your Board\" />\n          <Controls />\n        </div>\n      </CustomizerContextProvider>\n    </div>\n  );\n}\n"],"names":["MOUSE_BUTTON","ACTION","Object","freeze","NONE","ROTATE","TRUCK","SCREEN_PAN","OFFSET","DOLLY","ZOOM","TOUCH_ROTATE","TOUCH_TRUCK","TOUCH_SCREEN_PAN","TOUCH_OFFSET","TOUCH_DOLLY","TOUCH_ZOOM","TOUCH_DOLLY_TRUCK","TOUCH_DOLLY_SCREEN_PAN","TOUCH_DOLLY_OFFSET","TOUCH_DOLLY_ROTATE","TOUCH_ZOOM_TRUCK","TOUCH_ZOOM_OFFSET","TOUCH_ZOOM_SCREEN_PAN","TOUCH_ZOOM_ROTATE","DOLLY_DIRECTION","isPerspectiveCamera","camera","isOrthographicCamera","PI_2","Math","PI","PI_HALF","EPSILON","DEG2RAD","clamp","value","min","max","approxZero","number","error","abs","approxEquals","a","b","roundToStep","step","round","infinityToMaxNumber","isFinite","Number","MAX_VALUE","maxNumberToInfinity","Infinity","smoothDamp","current","target","currentVelocityRef","smoothTime","maxSpeed","deltaTime","omega","x","exp","change","originalTo","maxChange","temp","output","smoothDampVec3","out","targetX","targetY","y","targetZ","z","changeX","changeY","changeZ","originalToX","originalToY","originalToZ","magnitudeSq","magnitude","sqrt","tempX","tempY","tempZ","origMinusCurrentX","origMinusCurrentY","origMinusCurrentZ","extractClientCoordFromEvent","pointers","set","forEach","pointer","clientX","clientY","length","notSupportedInOrthographicCamera","message","console","warn","EventDispatcher","constructor","this","_listeners","addEventListener","type","listener","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","removeAllEventListeners","Array","isArray","dispatchEvent","event","array","slice","i","l","call","_a","TOUCH_DOLLY_FACTOR","isMac","test","globalThis","navigator","platform","THREE","_ORIGIN","_AXIS_Y","_AXIS_Z","_v2","_v3A","_v3B","_v3C","_cameraDirection","_xColumn","_yColumn","_zColumn","_deltaTarget","_deltaOffset","_sphericalA","_sphericalB","_box3A","_box3B","_sphere","_quaternionA","_quaternionB","_rotationMatrix","_raycaster","CameraControls","install","libs","Vector3","Vector2","Spherical","Box3","Sphere","Quaternion","Matrix4","Raycaster","verticalDragToForward","_","domElement","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","infinityDolly","minZoom","maxZoom","draggingSmoothTime","azimuthRotateSpeed","polarRotateSpeed","dollySpeed","dollyDragInverted","truckSpeed","dollyToCursor","dragToOffset","boundaryFriction","restThreshold","colliderMeshes","cancel","_enabled","_state","_viewport","_changedDolly","_changedZoom","_hasRested","_boundaryEnclosesCamera","_needsUpdate","_updatedLastTime","_elementRect","DOMRect","_isDragging","_dragNeedsUpdate","_activePointers","_lockedPointer","_interactiveArea","_isUserControllingRotate","_isUserControllingDolly","_isUserControllingTruck","_isUserControllingOffset","_isUserControllingZoom","_lastDollyDirection","_thetaVelocity","_phiVelocity","_radiusVelocity","_targetVelocity","_focalOffsetVelocity","_zoomVelocity","_truckInternal","deltaX","deltaY","screenSpacePanning","truckX","pedestalY","_camera","offset","copy","position","sub","_target","fov","getEffectiveFOV","targetDistance","tan","height","right","left","zoom","width","top","bottom","setFocalOffset","_focalOffsetEnd","truck","forward","_rotateInternal","theta","phi","rotate","_dollyInternal","delta","dollyScale","pow","lastDistance","_sphericalEnd","radius","distance","clampedDistance","overflowedDistance","_dollyToNoClamp","dollyInFixed","_dollyControlCoord","sign","_zoomInternal","zoomScale","lastZoom","_zoom","zoomTo","_yAxisUpSpace","setFromUnitVectors","up","_yAxisUpSpaceInverse","clone","invert","_targetEnd","_focalOffset","_spherical","setFromVector3","applyQuaternion","_lastDistance","_zoomEnd","_lastZoom","_nearPlaneCorners","_updateNearPlaneCorners","_boundary","_cameraUp0","_target0","_position0","_zoom0","_focalOffset0","mouseButtons","middle","wheel","touches","one","two","three","dragStartPosition","lastDragPosition","dollyStart","onPointerDown","_domElement","elRect","getBoundingClientRect","mouseButton","pointerType","buttons","zombiePointer","_findPointerByMouseButton","_disposePointer","pointerId","ownerDocument","onPointerMove","passive","onPointerUp","startDragging","cancelable","preventDefault","_findPointerById","movementX","movementY","lastScrollTimeStamp","onMouseWheel","now","performance","_getClientRect","deltaYFactor","deltaMode","ctrlKey","onContextMenu","PointerEvent","dx","dy","dragging","lockedPointer","pointerLockElement","dollyX","dollyY","dollyDirection","dollyDelta","endDragging","lockPointer","requestPointerLock","onPointerLockChange","onPointerLockError","unlockPointer","_b","_c","exitPointerLock","_addAllEventListeners","style","touchAction","userSelect","webkitUserSelect","_removeAllEventListeners","connect","update","updateCameraUp","updateProjectionMatrix","enabled","active","currentAction","azimuthAngle","polarAngle","boundaryEnclosesCamera","interactiveArea","super","enableTransition","rotateTo","rotateAzimuthTo","rotatePolarTo","makeSafe","resolveImmediately","_createOnRestPromise","dolly","dollyTo","lastRadius","maxDistanceByCollisionTest","_collisionTest","isCollided","Promise","resolve","add","_getCameraDirection","multiplyScalar","zoomStep","pan","updateMatrix","setFromMatrixColumn","matrix","to","moveTo","crossVectors","elevate","_encloseToBoundary","lookInDirectionOf","normalize","setPosition","fitToBox","box3OrObject","cover","paddingLeft","paddingRight","paddingBottom","paddingTop","promises","aabb","isBox3","setFromObject","isEmpty","normal","setFromSpherical","rotation","viewFromPolar","multiply","setFromAxisAngle","bb","makeEmpty","expandByPoint","setX","setY","setZ","premultiply","bbSize","getSize","center","getCenter","getDistanceToFitBox","all","fitToSphere","sphereOrMesh","boundingSphere","createBoundingSphere","distanceToFit","getDistanceToFitSphere","diameter","setLookAt","positionX","positionY","positionZ","normalizeRotations","lerpLookAt","positionAX","positionAY","positionAZ","targetAX","targetAY","targetAZ","positionBX","positionBY","positionBZ","targetBX","targetBY","targetBZ","t","targetA","positionA","targetB","positionB","lerp","deltaTheta","deltaPhi","deltaRadius","setTarget","pos","getPosition","promise","setOrbitPoint","updateMatrixWorld","matrixWorldInverse","distanceTo","cameraToPoint","setBoundary","box3","clampPoint","setViewport","viewportOrX","Vector4","depth","boundingRectAspect","aspect","vFOV","hFOV","atan","sin","getTarget","receiveEndValue","isVector3","getSpherical","getFocalOffset","stop","reset","saveState","applyCameraUp","cameraDirection","subVectors","side","deltaTarget","deltaOffset","deltaZoom","dollyControlAmount","planeX","cross","lengthSq","planeY","worldToScreen","lerpRatio","cursor","newTargetEnd","isMin","isMax","dollyAmount","targetEndDiff","worldCursorPosition","near","far","unproject","quaternion","dot","prevPlaneConstant","newPlaneConstant","pullBack","lookAt","updated","toJSON","JSON","stringify","toArray","focalOffset","target0","position0","zoom0","focalOffset0","fromJSON","json","obj","parse","fromArray","setAttribute","disconnect","removeAttribute","dispose","_getTargetDirection","divideScalar","negate","find","activePointer","friction","offsetLength2","newTarget","deltaClampedTarget","deltaClampedTargetLength2","offsetFactor","heightHalf","widthHalf","zoomInv","rayDirection","nearPlaneCorner","applyMatrix4","origin","addVectors","intersects","intersectObjects","rect","w","onResolve","dampingFactor","draggingDampingFactor","object3d","traverseVisible","object","isMesh","expandByObject","maxRadiusSq","mesh","geometry","matrixWorld","attributes","count","fromBufferAttribute","distanceToSquared","forwardRef","props","ref","useMemo","subsetOfTHREE","MathUtils","CameraControlsImpl","extend","makeDefault","onControlStart","onControl","onControlEnd","onTransitionStart","onUpdate","onWake","onRest","onSleep","onStart","onEnd","onChange","regress","restProps","__objRest","defaultCamera","useThree","state","gl","invalidate","events","setEvents","get","explCamera","explDomElement","connected","controls","React.createElement","useFrame","useEffect","invalidateAndRegress","handleControlStart","e","handleControl","handleControlEnd","handleTransitionStart","handleUpdate","handleWake","handleRest","handleSleep","old","createElement","_extends","Preload","scene","dCamera","dScene","React.useLayoutEffect","invisible","traverse","visible","compile","cubeRenderTarget","WebGLCubeRenderTarget","CubeCamera","SkateboardOptions","__publicField","DEFAULT_CAMERA_LOOK_AT","DEFAULT_CAMERA_POSITION","CustomizerContext","createContext","WHEELS","updateWheels","deck","DECKS","updateDeck","METALS","updateTrucks","bolt","updateBolts","lookAtDeck","createRef","CustomizerContextProvider","children","setWheel","useState","setBolt","setDeck","setTruck","lookAtBolts","lookAtTruck","lookAtWheel","useRef","setCameraControls","useCallback","useCameraControls","createLookAt","stateSetter","jsx","Provider","useCustomizer","useContext","Option","selected","onClick","colorField","imageField","imageStyles","classes","useClassNames","onSelect","jsxs","className","src","alt","backgroundColor","Options","title","selectedName","formatted","path","tokens","split","file","name","replace","getName","Controls","map","option","jsxRuntimeExports","translate","objectFit","Lighting","ENVIRONMENT_COLOR","Floor","normalMap","useTexture","Textures","wrap","repeat","rerender","anisotropy","material","MeshStandardMaterial","roughness","color","castShadow","receiveShadow","args","Skateboard","SkateboardModel","wheelTexture","deckTexture","boltColor","truckColor","nodes","useGLTF","wheelRefs","gripTapeMaterial","gripTapeDiffuse","gripTapeRoughness","bumpMap","roughnessMap","bumpScale","useGripTape","boltMaterial","metalness","useBolts","truckMaterial","metalNormal","normalScale","useTrucks","deckMaterial","texture","wheelMaterial","useWheels","cacheObjectReference","node","wheelCaches","from","positions","upright","wheels","GripTape","Wheel1","Wheel2","Deck","Wheel4","Bolts","Wheel3","Baseplates","Truck1","Truck2","preload","useSelectedTexture","options","selection","textures","urls","deckTextures","flipY","colorSpace","SRGBColorSpace","needsUpdate","useSRGBTexture","indices","hash","selectionIndex","DEFAULT_METAL_COLOR","PreviewCanvas","floor","controller","onCameraControlStart","wheelMesh","gsapWithCSS","duration","ease","Fragment","Suspense","fallback","Environment","files","environmentIntensity","intensity","attach","SkateboardScene","Canvas","shadows","SplitHeading","text"],"mappings":"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","x_google_ignoreList":[0,1,2]}