{"version":3,"mappings":"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","names":["useController","Controller","useRef","current","CircleLoader","_","className","children","jsx","viewBox","jsxRuntimeExports","cx","cy","r","Experiment","title","description","image","video","scene","preload","preloadScene","timeout","Timeout","useEffect","abortAll","useTimeout","sceneComplete","useLabs","ready","loadingScene","setLoadingScene","useState","videoNode","preloadedVideo","mouseOverPreloader","preloadedScene","preloadingVideo","setPreloadedVideo","preloadLabsScene","useCallback","preloadLabsVideo","_b","_a","play","call","oncanplaythrough","onerror","src","useMemo","usePreloader","onMouseOut","pause","onClick","execute","Labs","activateScene","classes","useClassNames","loading","jsxs","role","tabIndex","onTouchEnd","onMouseLeave","onMouseEnter","onTouchStart","ref","loop","playsInline","autoPlay","muted","SplitHeading","As","text","LabsText","memo","id","Scene","active","sceneComponent","LazyCarScene","CreateLazyComponent","loader","__vitePreload","import","then","v","default","CarScene","LazyMagazineScene","MagazineScene","LazyNetflixScene","NetflixScene","RipplesScene","useRipples","onLoad","FullScreen","LazySkateboardScene","API","index","useMenuButtonDelay","onUnmount","callback","fn","useUnmount","destroy","Page","name","map","item","i","__spreadValues"],"sources":["../../node_modules/@figliolia/react-hooks/dist/mjs/Hooks/useUnmount.js","../../node_modules/@figliolia/react-hooks/dist/mjs/Hooks/useController.js","../../src/Components/CircleLoader/index.tsx","../../src/Components/Experiment/index.tsx","../../node_modules/@figliolia/react-hooks/dist/mjs/Hooks/useTimeout.js","../../src/Components/Experiment/usePreloader.ts","../../src/Components/LabsText/index.tsx","../../src/Components/Scene/index.tsx","../../src/3D/CarScene/Lazy.tsx","../../src/3D/MagazineScene/Lazy.tsx","../../src/3D/Netflix/Lazy.tsx","../../src/3D/RipplesScene/index.tsx","../../src/3D/SkateboardScene/Lazy.tsx","../../src/Pages/Labs/API.tsx","../../src/Images/car-scene.webp","../../src/Videos/car-scene.mp4","../../src/Images/skateboard-configurator.webp","../../src/Videos/skateboard-configurator.mp4","../../src/Images/netflix-content-transition.webp","../../src/Videos/netflix-content-transition.mp4","../../src/Images/ripples.webp","../../src/Videos/ripples.mp4","../../src/Images/magazine-slider.webp","../../src/Videos/magazine-slider.mp4","../../src/Pages/Labs/index.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nexport const useUnmount = (onUnmount) => {\n    const callback = useRef(onUnmount);\n    callback.current = onUnmount;\n    useEffect(() => {\n        const { current: fn } = callback;\n        return () => fn();\n    }, []);\n};\n","import { useRef } from \"react\";\nexport const useController = (Controller) => {\n    const controller = useRef(Controller);\n    return controller.current;\n};\n","import { Propless } from \"3D/MagazineScene/types\";\nimport \"./styles.scss\";\n\nexport const CircleLoader = (_: Propless) => {\n  return (\n    <div className=\"circle-loader\">\n      <svg viewBox=\"0 0 80 80\">\n        <circle cx=\"40\" cy=\"40\" r=\"32\" />\n      </svg>\n    </div>\n  );\n};\n","import { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { useTimeout } from \"@figliolia/react-hooks\";\nimport { CreateLazyComponent } from \"@figliolia/react-lazy\";\nimport { CircleLoader } from \"Components/CircleLoader\";\nimport { SplitHeading } from \"Components/SplitHeading\";\nimport { Labs, ready, useLabs } from \"State/Labs\";\nimport { usePreloader } from \"./usePreloader\";\nimport \"./styles.scss\";\n\nexport const Experiment = ({\n  title,\n  description,\n  image,\n  video,\n  scene,\n  preload: preloadScene,\n}: Props) => {\n  const timeout = useTimeout();\n  const sceneComplete = useLabs(ready);\n  const [loadingScene, setLoadingScene] = useState(false);\n  const { videoNode, preloadedVideo, mouseOverPreloader } = usePreloader(\n    video,\n    preloadScene,\n  );\n\n  const onMouseOut = useCallback(() => {\n    videoNode?.current?.pause?.();\n  }, [videoNode]);\n\n  const onClick = useCallback(() => {\n    setLoadingScene(true);\n    timeout.execute(() => {\n      Labs.activateScene(scene);\n    }, 500);\n  }, [scene, timeout]);\n\n  useEffect(() => {\n    if (loadingScene && sceneComplete) {\n      timeout.execute(() => {\n        setLoadingScene(false);\n      }, 1000);\n    }\n  }, [loadingScene, sceneComplete, timeout]);\n\n  const classes = useClassNames(\"experiment\", {\n    ready: preloadedVideo,\n    loading: loadingScene,\n  });\n\n  return (\n    <article\n      role=\"button\"\n      tabIndex={0}\n      onClick={onClick}\n      className={classes}\n      onTouchEnd={onMouseOut}\n      onMouseLeave={onMouseOut}\n      onMouseEnter={mouseOverPreloader}\n      onTouchStart={mouseOverPreloader}>\n      <div className=\"e-loader\" aria-hidden={!loadingScene}>\n        <CircleLoader />\n      </div>\n      <div className=\"media\">\n        <video ref={videoNode} loop playsInline autoPlay muted src={video} />\n        <img src={image} />\n      </div>\n      <div className=\"meta\">\n        <SplitHeading As=\"h2\" text={title} />\n        <p>{description}</p>\n      </div>\n    </article>\n  );\n};\n\ninterface Props {\n  title: string;\n  description: string;\n  image: string;\n  video: string;\n  scene: ReactNode;\n  preload?: ReturnType<typeof CreateLazyComponent<any>>[\"preload\"];\n}\n","import { useEffect } from \"react\";\nimport { Timeout } from \"../Generics/Timeout.js\";\nimport { useController } from \"./useController.js\";\nexport const useTimeout = () => {\n    const timeout = useController(new Timeout());\n    useEffect(() => {\n        return () => {\n            timeout.abortAll();\n        };\n    }, [timeout]);\n    return timeout;\n};\n","import { useCallback, useMemo, useRef, useState } from \"react\";\nimport { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const usePreloader = (\n  video: string,\n  preloadScene?: ReturnType<typeof CreateLazyComponent<any>>[\"preload\"],\n) => {\n  const preloadedScene = useRef(false);\n  const preloadingVideo = useRef(false);\n  const videoNode = useRef<HTMLVideoElement>(null);\n  const [preloadedVideo, setPreloadedVideo] = useState(false);\n\n  const preloadLabsScene = useCallback(() => {\n    if (!preloadedScene.current) {\n      preloadedScene.current = true;\n      void preloadScene?.();\n    }\n  }, [preloadScene]);\n\n  const preloadLabsVideo = useCallback(() => {\n    if (preloadingVideo.current || !videoNode.current) {\n      return;\n    }\n    void preloadScene?.();\n    if (preloadedVideo) {\n      void videoNode.current?.play?.();\n      return;\n    }\n    preloadingVideo.current = true;\n    videoNode.current.oncanplaythrough = () => {\n      setPreloadedVideo(true);\n      preloadingVideo.current = false;\n      void videoNode.current?.play?.();\n    };\n    videoNode.current.onerror = () => {\n      preloadingVideo.current = false;\n    };\n    videoNode.current.src = video;\n  }, [preloadedVideo, video, preloadScene]);\n\n  const mouseOverPreloader = useCallback(() => {\n    preloadLabsScene();\n    preloadLabsVideo();\n  }, [preloadLabsScene, preloadLabsVideo]);\n\n  return useMemo(\n    () => ({ videoNode, preloadedVideo, mouseOverPreloader }),\n    [preloadedVideo, mouseOverPreloader],\n  );\n};\n","import { memo } from \"react\";\nimport { SplitHeading } from \"Components/SplitHeading\";\nimport type { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const LabsText = memo(\n  function LabsText(_: PropLess) {\n    return (\n      <div className=\"labs-text\">\n        <SplitHeading id=\"labsText\" text=\"Labs\" />\n      </div>\n    );\n  },\n  () => true,\n);\n","import { useClassNames } from \"@figliolia/classnames\";\nimport { ready, scene, useLabs } from \"State/Labs\";\nimport { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const Scene = (_: PropLess) => {\n  const active = useLabs(ready);\n  const sceneComponent = useLabs(scene);\n  const classes = useClassNames(\"scene\", { active });\n  return <div className={classes}>{sceneComponent}</div>;\n};\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyCarScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.CarScene })),\n});\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyMagazineScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.MagazineScene })),\n});\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazyNetflixScene = CreateLazyComponent({\n  loader: () => import(\"./index\").then(v => ({ default: v.NetflixScene })),\n});\n","import { useEffect } from \"react\";\nimport { FullScreen } from \"Components/FullScreen\";\nimport { useRipples } from \"Hooks/useRipples\";\nimport { Labs } from \"State/Labs\";\nimport { PropLess } from \"Tools/Types\";\nimport \"./styles.scss\";\n\nexport const RipplesScene = (_: PropLess) => {\n  const ref = useRipples();\n\n  useEffect(() => {\n    Labs.onLoad();\n  }, []);\n\n  return <FullScreen className=\"ripples-scene\" ref={ref} />;\n};\n","import { CreateLazyComponent } from \"@figliolia/react-lazy\";\n\nexport const LazySkateboardScene = CreateLazyComponent({\n  loader: () => import(\"./index\"),\n});\n","import { LazyCarScene } from \"3D/CarScene/Lazy\";\nimport { LazyMagazineScene } from \"3D/MagazineScene/Lazy\";\nimport { LazyNetflixScene } from \"3D/Netflix/Lazy\";\nimport { RipplesScene } from \"3D/RipplesScene\";\nimport { LazySkateboardScene } from \"3D/SkateboardScene/Lazy\";\nimport CarImage from \"Images/car-scene.webp\";\nimport MagazineImage from \"Images/magazine-slider.webp\";\nimport NetflixImage from \"Images/netflix-content-transition.webp\";\nimport RipplesImage from \"Images/ripples.webp\";\nimport SkateboardImage from \"Images/skateboard-configurator.webp\";\nimport CarVid from \"Videos/car-scene.mp4\";\nimport MagazineVideo from \"Videos/magazine-slider.mp4\";\nimport NetflixVideo from \"Videos/netflix-content-transition.mp4\";\nimport RipplesVideo from \"Videos/ripples.mp4\";\nimport SkateboardVideo from \"Videos/skateboard-configurator.mp4\";\n\nexport const API = [\n  {\n    title: \"Car Scene\",\n    description:\n      \"A guided three.js exercise in animation, lighting, and visual effects using a C8 Corvette\",\n    image: CarImage,\n    video: CarVid,\n    scene: <LazyCarScene />,\n    preload: LazyCarScene.preload,\n  },\n  {\n    title: \"Skateboard Configurator\",\n    description:\n      \"A guided three.js tutorial building a CMS driven product configurator\",\n    image: SkateboardImage,\n    video: SkateboardVideo,\n    scene: <LazySkateboardScene />,\n    preload: LazySkateboardScene.preload,\n  },\n  {\n    title: \"Netflix Design Concept\",\n    description:\n      \"A webGL experiment replacing all media on the netflix home page with WebGL shaders\",\n    image: NetflixImage,\n    video: NetflixVideo,\n    scene: <LazyNetflixScene />,\n    preload: LazyNetflixScene.preload,\n  },\n  {\n    title: \"WebGL Ripples\",\n    description:\n      \"A dependency-free webGL shader library that brings water ripples to ordinary background images\",\n    image: RipplesImage,\n    video: RipplesVideo,\n    scene: <RipplesScene />,\n  },\n  {\n    title: \"Magazine Slider\",\n    description: \"A fun image slider originally designed by Wassim Samad\",\n    image: MagazineImage,\n    video: MagazineVideo,\n    scene: <LazyMagazineScene />,\n    preload: LazyMagazineScene.preload,\n  },\n] as const;\n","export default \"__VITE_ASSET___iOh_$Ui__\"","export default \"__VITE_ASSET__USvigzXn__\"","export default \"__VITE_ASSET__Ggska8ZM__\"","export default \"__VITE_ASSET__xiN_Pmhz__\"","export default \"__VITE_ASSET__8MBbvqIB__\"","export default \"__VITE_ASSET__ptVW13$8__\"","export default \"__VITE_ASSET__YzqEpbLs__\"","export default \"__VITE_ASSET__9x6oJLu6__\"","export default \"__VITE_ASSET__HpfhwPzX__\"","export default \"__VITE_ASSET__4QmNIuJ8__\"","import { memo } from \"react\";\nimport { useClassNames } from \"@figliolia/classnames\";\nimport { useUnmount } from \"@figliolia/react-hooks\";\nimport { Experiment } from \"Components/Experiment\";\nimport { LabsText } from \"Components/LabsText\";\nimport { Page } from \"Components/Page\";\nimport { Scene } from \"Components/Scene\";\nimport { useMenuButtonDelay } from \"Hooks/useMenuButtonDelay\";\nimport { Labs, ready, useLabs } from \"State/Labs\";\nimport type { PropLess } from \"Tools/Types\";\nimport { API } from \"./API\";\nimport \"./styles.scss\";\n\nexport default memo(\n  function LabsPage(_: PropLess) {\n    useMenuButtonDelay(2000);\n    const active = useLabs(ready);\n\n    useUnmount(() => {\n      Labs.destroy();\n    });\n\n    const classes = useClassNames(\"labs\", { \"no-scroll\": active });\n\n    return (\n      <Page name={classes}>\n        <div className=\"heading\">\n          <LabsText />\n        </div>\n        <div className=\"experiments\">\n          {API.map((item, i) => (\n            <Experiment key={i} {...item} />\n          ))}\n        </div>\n        <Scene />\n      </Page>\n    );\n  },\n  () => false,\n);\n"],"file":"assets/index-JQUisQKi.js"}